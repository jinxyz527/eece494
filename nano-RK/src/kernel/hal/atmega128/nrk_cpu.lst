   1               		.file	"nrk_cpu.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 126               	.global	nrk_battery_save
 128               	nrk_battery_save:
 129               		.stabd	46,0,0
   1:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** /******************************************************************************
   2:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  All rights reserved.
   5:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
   6:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  10:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  14:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  GNU General Public License for more details.
  18:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  19:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  You should have received a copy of the GNU General Public License
  20:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  22:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  Contributing Authors (specific to this file):
  23:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  Anthony Rowe
  24:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  Zane Starr
  25:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *  Anand Eswaren
  26:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *******************************************************************************/
  27:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  28:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <include.h>
  29:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk.h>
  30:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <avr/sleep.h>
  31:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_stack_check.h>
  32:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_cfg.h>
  33:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_error.h>
  34:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_task.h>
  35:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_defs.h>
  36:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #include <nrk_timer.h>
  37:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #
  38:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** /*
  39:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** ***************************************************************************************************
  40:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *                                        INITIALIZE A TASK'S STACK
  41:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  42:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** * Description: This function is highly processor specific.
  43:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  44:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** * Arguments  : task          is a pointer to the task code
  45:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  46:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *              pdata         is a pointer to a user supplied data area that will be passed to the t
  47:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *                            when the task first executes.
  48:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  49:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
  50:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *                            a 'free' entry on the task stack.  
  51:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *                            'ptos' contains the HIGHEST valid address of the stack.  
  52:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  53:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *              opt           specifies options that can be used to alter the behavior of OSTaskStkI
  54:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *                            We don't use have any option implemented for this project. You can jus
  55:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *                            set opt to 0
  56:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  57:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** * Returns    : Always returns the location of the new top-of-stack' once the processor registers ha
  58:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *              been placed on the stack in the proper order.
  59:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** *
  60:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** * Note(s)    : 
  61:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** ***************************************************************************************************
  62:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** */
  63:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  64:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #define BUILD_DATE "Date: " __DATE__ "\n"
  65:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  66:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_battery_save()
  67:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 131               	.LM0:
 132               	.LFBB1:
 133               	/* prologue: function */
 134               	/* frame size = 0 */
 135               	/* epilogue start */
  68:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #ifdef NRK_BATTERY_SAVE
  69:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****  	_nrk_stop_os_timer();
  70:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         _nrk_set_next_wakeup(250);
  71:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_led_clr(0);
  72:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_led_set(1);
  73:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_led_clr(2);
  74:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_led_clr(3);
  75:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         SET_VREG_INACTIVE();
  76:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_sleep();
  77:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #endif
  78:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 137               	.LM1:
 138 0000 0895      		ret
 140               	.Lscope1:
 142               		.stabd	78,0,0
 146               	.global	nrk_task_set_entry_function
 148               	nrk_task_set_entry_function:
 149               		.stabd	46,0,0
  79:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  80:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_task_set_entry_function( nrk_task_type *task, void *func )
  81:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 151               	.LM2:
 152               	.LFBB2:
 153               	/* prologue: function */
 154               	/* frame size = 0 */
  82:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** task->task=func;
 156               	.LM3:
 157 0002 FC01      		movw r30,r24
 158 0004 7683      		std Z+6,r23
 159 0006 6583      		std Z+5,r22
 160               	/* epilogue start */
  83:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 162               	.LM4:
 163 0008 0895      		ret
 165               	.Lscope2:
 167               		.stabd	78,0,0
 169               	.global	nrk_sleep
 171               	nrk_sleep:
 172               		.stabd	46,0,0
  84:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  85:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  86:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_sleep()
  87:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 174               	.LM5:
 175               	.LFBB3:
 176               	/* prologue: function */
 177               	/* frame size = 0 */
  88:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  89:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     set_sleep_mode (SLEEP_MODE_PWR_SAVE);
 179               	.LM6:
 180 000a 85B7      		in r24,85-0x20
 181 000c 837E      		andi r24,lo8(-29)
 182 000e 8861      		ori r24,lo8(24)
 183 0010 85BF      		out 85-0x20,r24
  90:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     sleep_mode ();
 185               	.LM7:
 186 0012 85B7      		in r24,85-0x20
 187 0014 8062      		ori r24,lo8(32)
 188 0016 85BF      		out 85-0x20,r24
 189               	/* #APP */
 190               	 ;  90 "../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c" 1
 191 0018 8895      		sleep
 192               		
 193               	 ;  0 "" 2
 194               	/* #NOAPP */
 195 001a 85B7      		in r24,85-0x20
 196 001c 8F7D      		andi r24,lo8(-33)
 197 001e 85BF      		out 85-0x20,r24
 198               	/* epilogue start */
  91:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  92:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 200               	.LM8:
 201 0020 0895      		ret
 203               	.Lscope3:
 205               		.stabd	78,0,0
 207               	.global	nrk_idle
 209               	nrk_idle:
 210               		.stabd	46,0,0
  93:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  94:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_idle()
  95:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 212               	.LM9:
 213               	.LFBB4:
 214               	/* prologue: function */
 215               	/* frame size = 0 */
  96:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
  97:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     set_sleep_mode( SLEEP_MODE_IDLE);
 217               	.LM10:
 218 0022 85B7      		in r24,85-0x20
 219 0024 837E      		andi r24,lo8(-29)
 220 0026 85BF      		out 85-0x20,r24
  98:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     sleep_mode ();
 222               	.LM11:
 223 0028 85B7      		in r24,85-0x20
 224 002a 8062      		ori r24,lo8(32)
 225 002c 85BF      		out 85-0x20,r24
 226               	/* #APP */
 227               	 ;  98 "../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c" 1
 228 002e 8895      		sleep
 229               		
 230               	 ;  0 "" 2
 231               	/* #NOAPP */
 232 0030 85B7      		in r24,85-0x20
 233 0032 8F7D      		andi r24,lo8(-33)
 234 0034 85BF      		out 85-0x20,r24
 235               	/* epilogue start */
  99:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 100:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 237               	.LM12:
 238 0036 0895      		ret
 240               	.Lscope4:
 242               		.stabd	78,0,0
 245               	.global	nrk_task_stk_init
 247               	nrk_task_stk_init:
 248               		.stabd	46,0,0
 101:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** void *nrk_task_stk_init (void (*task)(), void *ptos, void *pbos)
 102:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 250               	.LM13:
 251               	.LFBB5:
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 103:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     uint16_t *stk ;  // 2 bytes
 104:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     uint8_t *stkc; // 1 byte
 105:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 106:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
 107:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (unsigned char*)stk;
 108:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
 255               	.LM14:
 256 0038 25E5      		ldi r18,lo8(85)
 257 003a FA01      		movw r30,r20
 258 003c 2083      		st Z,r18
 109:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     stk    = (unsigned int *)ptos;          /* Load stack pointer */
 260               	.LM15:
 261 003e FB01      		movw r30,r22
 110:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     /* build a context for the new task */
 111:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     /* Where do these numbers come from? */
 112:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****    /* *(--stk) = 0x4f50;   // O P 
 113:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0x4d4e;   // M N 
 114:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0x4b4c;   // K L                      
 115:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0x494a;   // I J                      
 116:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0x4748;   // G H                      
 117:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0x4546;   // E F                    
 118:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0x4344;   // C D    	
 119:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0x4142;   // A B
 120:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** */
 121:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     --stk;
 263               	.LM16:
 264 0040 3297      		sbiw r30,2
 122:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     stkc = (unsigned char*)stk;	
 123:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
 266               	.LM17:
 267 0042 9083      		st Z,r25
 124:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = (unsigned char)((unsigned int)(task)%256);
 269               	.LM18:
 270 0044 8183      		std Z+1,r24
 125:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 	
 126:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 272               	.LM19:
 273 0046 1292      		st -Z,__zero_reg__
 274 0048 1292      		st -Z,__zero_reg__
 127:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;       
 276               	.LM20:
 277 004a 1292      		st -Z,__zero_reg__
 278 004c 1292      		st -Z,__zero_reg__
 128:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;                        
 280               	.LM21:
 281 004e 1292      		st -Z,__zero_reg__
 282 0050 1292      		st -Z,__zero_reg__
 129:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;                        
 284               	.LM22:
 285 0052 1292      		st -Z,__zero_reg__
 286 0054 1292      		st -Z,__zero_reg__
 130:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;                         
 288               	.LM23:
 289 0056 1292      		st -Z,__zero_reg__
 290 0058 1292      		st -Z,__zero_reg__
 131:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;                         
 292               	.LM24:
 293 005a 1292      		st -Z,__zero_reg__
 294 005c 1292      		st -Z,__zero_reg__
 132:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;                        
 296               	.LM25:
 297 005e 1292      		st -Z,__zero_reg__
 298 0060 1292      		st -Z,__zero_reg__
 133:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 300               	.LM26:
 301 0062 1292      		st -Z,__zero_reg__
 302 0064 1292      		st -Z,__zero_reg__
 134:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 135:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 304               	.LM27:
 305 0066 1292      		st -Z,__zero_reg__
 306 0068 1292      		st -Z,__zero_reg__
 136:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 308               	.LM28:
 309 006a 1292      		st -Z,__zero_reg__
 310 006c 1292      		st -Z,__zero_reg__
 137:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 312               	.LM29:
 313 006e 1292      		st -Z,__zero_reg__
 314 0070 1292      		st -Z,__zero_reg__
 138:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 316               	.LM30:
 317 0072 1292      		st -Z,__zero_reg__
 318 0074 1292      		st -Z,__zero_reg__
 139:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 320               	.LM31:
 321 0076 1292      		st -Z,__zero_reg__
 322 0078 1292      		st -Z,__zero_reg__
 140:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 324               	.LM32:
 325 007a 1292      		st -Z,__zero_reg__
 326 007c 1292      		st -Z,__zero_reg__
 141:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 328               	.LM33:
 329 007e 1292      		st -Z,__zero_reg__
 330 0080 1292      		st -Z,__zero_reg__
 142:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0; 
 332               	.LM34:
 333 0082 1292      		st -Z,__zero_reg__
 334 0084 1292      		st -Z,__zero_reg__
 143:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *(--stk) = 0;
 336               	.LM35:
 337 0086 1292      		st -Z,__zero_reg__
 338 0088 1292      		st -Z,__zero_reg__
 144:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 145:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 146:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     return ((void *)stk);
 147:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 340               	.LM36:
 341 008a CF01      		movw r24,r30
 342               	/* epilogue start */
 343 008c 0895      		ret
 345               	.Lscope5:
 347               		.stabd	78,0,0
 349               	.global	nrk_stack_pointer_restore
 351               	nrk_stack_pointer_restore:
 352               		.stabd	46,0,0
 148:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 149:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
 150:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 151:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 152:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
 153:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** task->Ptos = (void *) &stk_base[stk_size-1];
 154:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** task->Pbos = (void *) &stk_base[0];
 155:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 156:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 157:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 158:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 159:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 160:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** inline void nrk_stack_pointer_restore()
 161:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 354               	.LM37:
 355               	.LFBB6:
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 162:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** unsigned char *stkc;
 163:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 164:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 165:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 166:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #else
 167:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         stkc = NRK_KERNEL_STK_TOP;
 168:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #endif
 169:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 359               	.LM38:
 360 008e 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 361 0090 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 362 0092 9093 FE10 		sts 4350,r25
 170:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 364               	.LM39:
 365 0096 8093 FF10 		sts 4351,r24
 366               	/* epilogue start */
 171:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 368               	.LM40:
 369 009a 0895      		ret
 371               	.Lscope6:
 373               		.stabd	78,0,0
 375               	.global	nrk_stack_pointer_init
 377               	nrk_stack_pointer_init:
 378               		.stabd	46,0,0
 172:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 173:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** inline void nrk_stack_pointer_init()
 174:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 380               	.LM41:
 381               	.LFBB7:
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 175:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** unsigned char *stkc;
 176:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 177:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 178:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_kernel_stk[0]=STK_CANARY_VAL;
 179:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 180:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     #else
 181:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 182:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         *stkc = STK_CANARY_VAL;
 385               	.LM42:
 386 009c 85E5      		ldi r24,lo8(85)
 387 009e 8093 7E10 		sts 4222,r24
 183:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         stkc = NRK_KERNEL_STK_TOP;
 184:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****         nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 389               	.LM43:
 390 00a2 EEEF      		ldi r30,lo8(4350)
 391 00a4 F0E1      		ldi r31,hi8(4350)
 392 00a6 F093 0000 		sts (nrk_kernel_stk_ptr)+1,r31
 393 00aa E093 0000 		sts nrk_kernel_stk_ptr,r30
 185:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     #endif
 186:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 395               	.LM44:
 396 00ae 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 397 00b0 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 398 00b2 9083      		st Z,r25
 187:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 400               	.LM45:
 401 00b4 8093 FF10 		sts 4351,r24
 402               	/* epilogue start */
 188:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 189:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 404               	.LM46:
 405 00b8 0895      		ret
 407               	.Lscope7:
 409               		.stabd	78,0,0
 411               	.global	nrk_target_start
 413               	nrk_target_start:
 414               		.stabd	46,0,0
 190:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 191:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 192:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** /* start the target running */
 193:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** void nrk_target_start(void)
 194:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** {
 416               	.LM47:
 417               	.LFBB8:
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 195:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 
 196:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****   _nrk_setup_timer();
 421               	.LM48:
 422 00ba 0E94 0000 		call _nrk_setup_timer
 197:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c ****   nrk_int_enable();  
 424               	.LM49:
 425 00be 0E94 0000 		call nrk_int_enable
 426               	/* epilogue start */
 198:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** 	
 199:../../../nano-RK/src/kernel/hal/atmega128/nrk_cpu.c **** }
 428               	.LM50:
 429 00c2 0895      		ret
 431               	.Lscope8:
 433               		.stabd	78,0,0
 438               	.global	nrk_task_set_stk
 440               	nrk_task_set_stk:
 441               		.stabd	46,0,0
 443               	.LM51:
 444               	.LFBB9:
 445 00c4 EF92      		push r14
 446 00c6 FF92      		push r15
 447 00c8 0F93      		push r16
 448 00ca 1F93      		push r17
 449 00cc CF93      		push r28
 450 00ce DF93      		push r29
 451               	/* prologue: function */
 452               	/* frame size = 0 */
 453 00d0 EC01      		movw r28,r24
 454 00d2 8B01      		movw r16,r22
 455 00d4 7A01      		movw r14,r20
 457               	.LM52:
 458 00d6 4032      		cpi r20,32
 459 00d8 5105      		cpc r21,__zero_reg__
 460 00da 00F4      		brsh .L18
 461 00dc 81E1      		ldi r24,lo8(17)
 462 00de 0E94 0000 		call nrk_error_add
 463               	.L18:
 465               	.LM53:
 466 00e2 0894      		sec
 467 00e4 E108      		sbc r14,__zero_reg__
 468 00e6 F108      		sbc r15,__zero_reg__
 469 00e8 E00E      		add r14,r16
 470 00ea F11E      		adc r15,r17
 471 00ec FA82      		std Y+2,r15
 472 00ee E982      		std Y+1,r14
 474               	.LM54:
 475 00f0 1C83      		std Y+4,r17
 476 00f2 0B83      		std Y+3,r16
 477               	/* epilogue start */
 479               	.LM55:
 480 00f4 DF91      		pop r29
 481 00f6 CF91      		pop r28
 482 00f8 1F91      		pop r17
 483 00fa 0F91      		pop r16
 484 00fc FF90      		pop r15
 485 00fe EF90      		pop r14
 486 0100 0895      		ret
 488               	.Lscope9:
 490               		.stabd	78,0,0
 491               		.comm _nrk_signal_list,4,1
 492               		.comm nrk_idle_task_stk,128,1
 493               		.comm nrk_kernel_stk_ptr,2,1
 494               		.comm nrk_task_TCB,99,1
 495               		.comm nrk_wakeup_signal,1,1
 496               		.comm _nrk_readyQ,20,1
 497               		.comm _free_node,2,1
 498               		.comm _head_node,2,1
 499               		.comm nrk_cur_task_prio,1,1
 500               		.comm nrk_cur_task_TCB,2,1
 501               		.comm nrk_high_ready_prio,1,1
 502               		.comm nrk_high_ready_TCB,2,1
 503               		.comm _nrk_resource_cnt,1,1
 504               		.comm nrk_system_time,8,1
 505               		.comm error_task,1,1
 506               		.comm error_num,1,1
 507               		.comm nrk_sem_list,3,1
 508               		.comm _nrk_prev_timer_val,1,1
 509               		.comm _nrk_time_trigger,1,1
 510               		.comm app_timer0_callback,2,1
 511               		.comm app_timer0_prescale,1,1
 534               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_cpu.c
     /tmp/ccZCON4O.s:2      *ABS*:0000003f __SREG__
     /tmp/ccZCON4O.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccZCON4O.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccZCON4O.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccZCON4O.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccZCON4O.s:128    .text:00000000 nrk_battery_save
     /tmp/ccZCON4O.s:148    .text:00000002 nrk_task_set_entry_function
     /tmp/ccZCON4O.s:171    .text:0000000a nrk_sleep
     /tmp/ccZCON4O.s:209    .text:00000022 nrk_idle
     /tmp/ccZCON4O.s:247    .text:00000038 nrk_task_stk_init
     /tmp/ccZCON4O.s:351    .text:0000008e nrk_stack_pointer_restore
     /tmp/ccZCON4O.s:377    .text:0000009c nrk_stack_pointer_init
                            *COM*:00000002 nrk_kernel_stk_ptr
     /tmp/ccZCON4O.s:413    .text:000000ba nrk_target_start
     /tmp/ccZCON4O.s:440    .text:000000c4 nrk_task_set_stk
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000063 nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000014 _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000003 nrk_sem_list
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_timer_tick
_nrk_setup_timer
nrk_int_enable
nrk_error_add

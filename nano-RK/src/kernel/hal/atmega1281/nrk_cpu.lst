   1               		.file	"nrk_cpu.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 126               	.global	nrk_battery_save
 128               	nrk_battery_save:
 129               		.stabd	46,0,0
   1:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** /******************************************************************************
   2:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  All rights reserved.
   5:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
   6:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  10:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  14:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  19:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  22:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  Anthony Rowe
  24:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  Zane Starr
  25:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *  Anand Eswaren
  26:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *******************************************************************************/
  27:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  28:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <include.h>
  29:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <nrk.h>
  30:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <avr/sleep.h>
  31:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <nrk_stack_check.h>
  32:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <nrk_task.h>
  33:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <nrk_defs.h>
  34:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <nrk_cfg.h>
  35:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <nrk_timer.h>
  36:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #include <nrk_error.h>
  37:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  38:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #define BUILD_DATE "Date: " __DATE__ "\n"
  39:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** /*
  40:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** ***************************************************************************************************
  41:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *                                        INITIALIZE A TASK'S STACK
  42:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  43:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** * Description: This function is highly processor specific.
  44:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  45:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** * Arguments  : task          is a pointer to the task code
  46:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  47:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *              pdata         is a pointer to a user supplied data area that will be passed to the t
  48:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *                            when the task first executes.
  49:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  50:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
  51:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *                            a 'free' entry on the task stack.  
  52:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *                            'ptos' contains the HIGHEST valid address of the stack.  
  53:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  54:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *              opt           specifies options that can be used to alter the behavior of OSTaskStkI
  55:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *                            We don't use have any option implemented for this project. You can jus
  56:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *                            set opt to 0
  57:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  58:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** * Returns    : Always returns the location of the new top-of-stack' once the processor registers ha
  59:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *              been placed on the stack in the proper order.
  60:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** *
  61:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** * Note(s)    : 
  62:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** ***************************************************************************************************
  63:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** */
  64:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  65:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  66:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** void nrk_battery_save()
  67:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 131               	.LM0:
 132               	.LFBB1:
 133               	/* prologue: function */
 134               	/* frame size = 0 */
 135               	/* epilogue start */
  68:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #ifdef NRK_BATTERY_SAVE
  69:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****  	_nrk_stop_os_timer();
  70:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         _nrk_set_next_wakeup(250);
  71:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_led_clr(0);
  72:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_led_set(1);
  73:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_led_clr(2);
  74:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_led_clr(3);
  75:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         SET_VREG_INACTIVE();
  76:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_sleep();
  77:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #endif
  78:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 137               	.LM1:
 138 0000 0895      		ret
 140               	.Lscope1:
 142               		.stabd	78,0,0
 144               	.global	nrk_sleep
 146               	nrk_sleep:
 147               		.stabd	46,0,0
  79:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  80:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** void nrk_sleep()
  81:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 149               	.LM2:
 150               	.LFBB2:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
  82:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  83:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     set_sleep_mode (SLEEP_MODE_PWR_SAVE);
 154               	.LM3:
 155 0002 83B7      		in r24,83-0x20
 156 0004 817F      		andi r24,lo8(-15)
 157 0006 8660      		ori r24,lo8(6)
 158 0008 83BF      		out 83-0x20,r24
  84:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     sleep_mode ();
 160               	.LM4:
 161 000a 83B7      		in r24,83-0x20
 162 000c 8160      		ori r24,lo8(1)
 163 000e 83BF      		out 83-0x20,r24
 164               	/* #APP */
 165               	 ;  84 "../../../src/kernel/hal/atmega1281/nrk_cpu.c" 1
 166 0010 8895      		sleep
 167               		
 168               	 ;  0 "" 2
 169               	/* #NOAPP */
 170 0012 83B7      		in r24,83-0x20
 171 0014 8E7F      		andi r24,lo8(-2)
 172 0016 83BF      		out 83-0x20,r24
 173               	/* epilogue start */
  85:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  86:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 175               	.LM5:
 176 0018 0895      		ret
 178               	.Lscope2:
 180               		.stabd	78,0,0
 182               	.global	nrk_idle
 184               	nrk_idle:
 185               		.stabd	46,0,0
  87:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  88:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** void nrk_idle()
  89:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 187               	.LM6:
 188               	.LFBB3:
 189               	/* prologue: function */
 190               	/* frame size = 0 */
  90:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  91:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     set_sleep_mode( SLEEP_MODE_IDLE);
 192               	.LM7:
 193 001a 83B7      		in r24,83-0x20
 194 001c 817F      		andi r24,lo8(-15)
 195 001e 83BF      		out 83-0x20,r24
  92:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     sleep_mode ();
 197               	.LM8:
 198 0020 83B7      		in r24,83-0x20
 199 0022 8160      		ori r24,lo8(1)
 200 0024 83BF      		out 83-0x20,r24
 201               	/* #APP */
 202               	 ;  92 "../../../src/kernel/hal/atmega1281/nrk_cpu.c" 1
 203 0026 8895      		sleep
 204               		
 205               	 ;  0 "" 2
 206               	/* #NOAPP */
 207 0028 83B7      		in r24,83-0x20
 208 002a 8E7F      		andi r24,lo8(-2)
 209 002c 83BF      		out 83-0x20,r24
 210               	/* epilogue start */
  93:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  94:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 212               	.LM9:
 213 002e 0895      		ret
 215               	.Lscope3:
 217               		.stabd	78,0,0
 221               	.global	nrk_task_set_entry_function
 223               	nrk_task_set_entry_function:
 224               		.stabd	46,0,0
  95:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
  96:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** void nrk_task_set_entry_function( nrk_task_type *task, void *func )
  97:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 226               	.LM10:
 227               	.LFBB4:
 228               	/* prologue: function */
 229               	/* frame size = 0 */
  98:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** task->task=func;
 231               	.LM11:
 232 0030 FC01      		movw r30,r24
 233 0032 7683      		std Z+6,r23
 234 0034 6583      		std Z+5,r22
 235               	/* epilogue start */
  99:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 237               	.LM12:
 238 0036 0895      		ret
 240               	.Lscope4:
 242               		.stabd	78,0,0
 245               	.global	nrk_task_stk_init
 247               	nrk_task_stk_init:
 248               		.stabd	46,0,0
 100:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 101:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
 102:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 103:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 104:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
 105:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** task->Ptos = (void *) &stk_base[stk_size-1];
 106:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** task->Pbos = (void *) &stk_base[0];
 107:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 108:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 109:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 110:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** void *nrk_task_stk_init (void (*task)(), void *ptos, void *pbos)
 111:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 250               	.LM13:
 251               	.LFBB5:
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 112:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     uint16_t *stk ;  // 2 bytes
 113:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     uint8_t *stkc; // 1 byte
 114:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 115:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
 116:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     stkc = (unsigned char*)stk;
 117:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
 255               	.LM14:
 256 0038 25E5      		ldi r18,lo8(85)
 257 003a FA01      		movw r30,r20
 258 003c 2083      		st Z,r18
 118:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     stk    = (unsigned int *)ptos;          /* Load stack pointer */
 260               	.LM15:
 261 003e FB01      		movw r30,r22
 119:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     /* build a context for the new task */
 120:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     /* Where do these numbers come from? */
 121:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****    /* *(--stk) = 0x4f50;   // O P 
 122:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0x4d4e;   // M N 
 123:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0x4b4c;   // K L                      
 124:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0x494a;   // I J                      
 125:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0x4748;   // G H                      
 126:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0x4546;   // E F                    
 127:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0x4344;   // C D    	
 128:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0x4142;   // A B
 129:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** */
 130:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     --stk;
 263               	.LM16:
 264 0040 3297      		sbiw r30,2
 131:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     stkc = (unsigned char*)stk;	
 132:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
 266               	.LM17:
 267 0042 9083      		st Z,r25
 133:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *stkc = (unsigned char)((unsigned int)(task)%256);
 269               	.LM18:
 270 0044 8183      		std Z+1,r24
 134:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 	
 135:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;
 272               	.LM19:
 273 0046 1292      		st -Z,__zero_reg__
 274 0048 1292      		st -Z,__zero_reg__
 136:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;       
 276               	.LM20:
 277 004a 1292      		st -Z,__zero_reg__
 278 004c 1292      		st -Z,__zero_reg__
 137:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;                        
 280               	.LM21:
 281 004e 1292      		st -Z,__zero_reg__
 282 0050 1292      		st -Z,__zero_reg__
 138:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;                        
 284               	.LM22:
 285 0052 1292      		st -Z,__zero_reg__
 286 0054 1292      		st -Z,__zero_reg__
 139:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;                         
 288               	.LM23:
 289 0056 1292      		st -Z,__zero_reg__
 290 0058 1292      		st -Z,__zero_reg__
 140:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;                         
 292               	.LM24:
 293 005a 1292      		st -Z,__zero_reg__
 294 005c 1292      		st -Z,__zero_reg__
 141:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;                        
 296               	.LM25:
 297 005e 1292      		st -Z,__zero_reg__
 298 0060 1292      		st -Z,__zero_reg__
 142:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 300               	.LM26:
 301 0062 1292      		st -Z,__zero_reg__
 302 0064 1292      		st -Z,__zero_reg__
 143:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 144:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 304               	.LM27:
 305 0066 1292      		st -Z,__zero_reg__
 306 0068 1292      		st -Z,__zero_reg__
 145:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 308               	.LM28:
 309 006a 1292      		st -Z,__zero_reg__
 310 006c 1292      		st -Z,__zero_reg__
 146:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 312               	.LM29:
 313 006e 1292      		st -Z,__zero_reg__
 314 0070 1292      		st -Z,__zero_reg__
 147:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 316               	.LM30:
 317 0072 1292      		st -Z,__zero_reg__
 318 0074 1292      		st -Z,__zero_reg__
 148:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 320               	.LM31:
 321 0076 1292      		st -Z,__zero_reg__
 322 0078 1292      		st -Z,__zero_reg__
 149:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 324               	.LM32:
 325 007a 1292      		st -Z,__zero_reg__
 326 007c 1292      		st -Z,__zero_reg__
 150:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 328               	.LM33:
 329 007e 1292      		st -Z,__zero_reg__
 330 0080 1292      		st -Z,__zero_reg__
 151:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0; 
 332               	.LM34:
 333 0082 1292      		st -Z,__zero_reg__
 334 0084 1292      		st -Z,__zero_reg__
 152:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *(--stk) = 0;
 336               	.LM35:
 337 0086 1292      		st -Z,__zero_reg__
 338 0088 1292      		st -Z,__zero_reg__
 153:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 154:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 155:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     return ((void *)stk);
 156:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 340               	.LM36:
 341 008a CF01      		movw r24,r30
 342               	/* epilogue start */
 343 008c 0895      		ret
 345               	.Lscope5:
 347               		.stabd	78,0,0
 349               	.global	nrk_stack_pointer_init
 351               	nrk_stack_pointer_init:
 352               		.stabd	46,0,0
 157:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 158:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** inline void nrk_stack_pointer_init()
 159:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 354               	.LM37:
 355               	.LFBB6:
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 160:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** unsigned char *stkc;
 161:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 162:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 163:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_kernel_stk[0]=STK_CANARY_VAL;
 164:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 165:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     #else
 166:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
 167:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         *stkc = STK_CANARY_VAL;
 359               	.LM38:
 360 008e 85E5      		ldi r24,lo8(85)
 361 0090 8093 7E21 		sts 8574,r24
 168:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
 169:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
 363               	.LM39:
 364 0094 EEEF      		ldi r30,lo8(8702)
 365 0096 F1E2      		ldi r31,hi8(8702)
 366 0098 F093 0000 		sts (nrk_kernel_stk_ptr)+1,r31
 367 009c E093 0000 		sts nrk_kernel_stk_ptr,r30
 170:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     #endif
 171:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 369               	.LM40:
 370 00a0 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 371 00a2 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 372 00a4 9083      		st Z,r25
 172:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 374               	.LM41:
 375 00a6 8093 FF21 		sts 8703,r24
 376               	/* epilogue start */
 173:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 174:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 378               	.LM42:
 379 00aa 0895      		ret
 381               	.Lscope6:
 383               		.stabd	78,0,0
 385               	.global	nrk_stack_pointer_restore
 387               	nrk_stack_pointer_restore:
 388               		.stabd	46,0,0
 175:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 176:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 177:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** inline void nrk_stack_pointer_restore()
 178:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 390               	.LM43:
 391               	.LFBB7:
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 179:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** unsigned char *stkc;
 180:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 181:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 182:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 183:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #else
 184:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
 185:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** #endif
 186:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 395               	.LM44:
 396 00ac 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 397 00ae 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 398 00b0 9093 FE21 		sts 8702,r25
 187:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****         *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 400               	.LM45:
 401 00b4 8093 FF21 		sts 8703,r24
 402               	/* epilogue start */
 188:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 404               	.LM46:
 405 00b8 0895      		ret
 407               	.Lscope7:
 409               		.stabd	78,0,0
 411               	.global	nrk_target_start
 413               	nrk_target_start:
 414               		.stabd	46,0,0
 189:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 190:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** /* start the target running */
 191:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** void nrk_target_start(void)
 192:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** {
 416               	.LM47:
 417               	.LFBB8:
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 193:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 
 194:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****   _nrk_setup_timer();
 421               	.LM48:
 422 00ba 0E94 0000 		call _nrk_setup_timer
 195:../../../src/kernel/hal/atmega1281/nrk_cpu.c ****   nrk_int_enable();  
 424               	.LM49:
 425 00be 0E94 0000 		call nrk_int_enable
 426               	/* epilogue start */
 196:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** 	
 197:../../../src/kernel/hal/atmega1281/nrk_cpu.c **** }
 428               	.LM50:
 429 00c2 0895      		ret
 431               	.Lscope8:
 433               		.stabd	78,0,0
 438               	.global	nrk_task_set_stk
 440               	nrk_task_set_stk:
 441               		.stabd	46,0,0
 443               	.LM51:
 444               	.LFBB9:
 445 00c4 EF92      		push r14
 446 00c6 FF92      		push r15
 447 00c8 0F93      		push r16
 448 00ca 1F93      		push r17
 449 00cc CF93      		push r28
 450 00ce DF93      		push r29
 451               	/* prologue: function */
 452               	/* frame size = 0 */
 453 00d0 EC01      		movw r28,r24
 454 00d2 8B01      		movw r16,r22
 455 00d4 7A01      		movw r14,r20
 457               	.LM52:
 458 00d6 4032      		cpi r20,32
 459 00d8 5105      		cpc r21,__zero_reg__
 460 00da 00F4      		brsh .L18
 461 00dc 81E1      		ldi r24,lo8(17)
 462 00de 0E94 0000 		call nrk_error_add
 463               	.L18:
 465               	.LM53:
 466 00e2 0894      		sec
 467 00e4 E108      		sbc r14,__zero_reg__
 468 00e6 F108      		sbc r15,__zero_reg__
 469 00e8 E00E      		add r14,r16
 470 00ea F11E      		adc r15,r17
 471 00ec FA82      		std Y+2,r15
 472 00ee E982      		std Y+1,r14
 474               	.LM54:
 475 00f0 1C83      		std Y+4,r17
 476 00f2 0B83      		std Y+3,r16
 477               	/* epilogue start */
 479               	.LM55:
 480 00f4 DF91      		pop r29
 481 00f6 CF91      		pop r28
 482 00f8 1F91      		pop r17
 483 00fa 0F91      		pop r16
 484 00fc FF90      		pop r15
 485 00fe EF90      		pop r14
 486 0100 0895      		ret
 488               	.Lscope9:
 490               		.stabd	78,0,0
 491               		.comm _nrk_signal_list,4,1
 492               		.comm nrk_idle_task_stk,128,1
 493               		.comm nrk_kernel_stk_ptr,2,1
 494               		.comm nrk_task_TCB,66,1
 495               		.comm nrk_wakeup_signal,1,1
 496               		.comm _nrk_readyQ,15,1
 497               		.comm _free_node,2,1
 498               		.comm _head_node,2,1
 499               		.comm nrk_cur_task_prio,1,1
 500               		.comm nrk_cur_task_TCB,2,1
 501               		.comm nrk_high_ready_prio,1,1
 502               		.comm nrk_high_ready_TCB,2,1
 503               		.comm _nrk_resource_cnt,1,1
 504               		.comm nrk_system_time,8,1
 505               		.comm nrk_sem_list,6,1
 506               		.comm _nrk_prev_timer_val,1,1
 507               		.comm _nrk_time_trigger,1,1
 508               		.comm app_timer0_callback,2,1
 509               		.comm app_timer0_prescale,1,1
 510               		.comm error_task,1,1
 511               		.comm error_num,1,1
 534               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_cpu.c
     /tmp/cc4CtrfW.s:2      *ABS*:0000003f __SREG__
     /tmp/cc4CtrfW.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc4CtrfW.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc4CtrfW.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cc4CtrfW.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cc4CtrfW.s:128    .text:00000000 nrk_battery_save
     /tmp/cc4CtrfW.s:146    .text:00000002 nrk_sleep
     /tmp/cc4CtrfW.s:184    .text:0000001a nrk_idle
     /tmp/cc4CtrfW.s:223    .text:00000030 nrk_task_set_entry_function
     /tmp/cc4CtrfW.s:247    .text:00000038 nrk_task_stk_init
     /tmp/cc4CtrfW.s:351    .text:0000008e nrk_stack_pointer_init
                            *COM*:00000002 nrk_kernel_stk_ptr
     /tmp/cc4CtrfW.s:387    .text:000000ac nrk_stack_pointer_restore
     /tmp/cc4CtrfW.s:413    .text:000000ba nrk_target_start
     /tmp/cc4CtrfW.s:440    .text:000000c4 nrk_task_set_stk
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000042 nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:0000000f _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000008 nrk_system_time
                            *COM*:00000006 nrk_sem_list
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_timer_tick
_nrk_setup_timer
nrk_int_enable
nrk_error_add

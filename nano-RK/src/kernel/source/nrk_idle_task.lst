   1               		.file	"nrk_idle_task.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 135               	.global	nrk_idle_task
 137               	nrk_idle_task:
 138               		.stabd	46,0,0
   1:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** /******************************************************************************
   2:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  All rights reserved.
   5:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *
   6:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *
  10:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *
  14:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  GNU General Public License for more details.
  18:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *
  19:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  You should have received a copy of the GNU General Public License
  20:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *
  22:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  Contributing Authors (specific to this file):
  23:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *  Anthony Rowe
  24:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** *******************************************************************************/
  25:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 
  26:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk.h>
  27:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_idle_task.h>
  28:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_cpu.h>
  29:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_cfg.h>
  30:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_stack_check.h>
  31:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_error.h>
  32:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_timer.h>
  33:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_platform_time.h>
  34:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <nrk_scheduler.h>
  35:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #include <stdio.h>
  36:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 
  37:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** void nrk_idle_task()
  38:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** {
 140               	.LM0:
 141               	.LFBB1:
 142 0000 0F93      		push r16
 143 0002 1F93      		push r17
 144               	/* prologue: function */
 145               	/* frame size = 0 */
  39:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** volatile unsigned char *stkc;
  40:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** // unsigned int *stk ;  // 2 bytes
  41:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** while(1)
  42:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** {
  43:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 
  44:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****   nrk_stack_check(); 
  45:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****   
  46:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****   if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
  47:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****     {
  48:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	    _nrk_cpu_state=CPU_IDLE;
 147               	.LM1:
 148 0004 01E0      		ldi r16,lo8(1)
  49:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	    nrk_idle();
  50:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****     }
  51:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****     else {
  52:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	#ifndef NRK_NO_POWER_DOWN
  53:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	    // Allow last UART byte to get out
  54:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****     	    nrk_spin_wait_us(10);  
  55:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	    _nrk_cpu_state=CPU_SLEEP;
 150               	.LM2:
 151 0006 12E0      		ldi r17,lo8(2)
 152               	.L9:
 154               	.LM3:
 155 0008 0E94 0000 		call nrk_stack_check
 157               	.LM4:
 158 000c 0E94 0000 		call _nrk_get_next_wakeup
 159 0010 8531      		cpi r24,lo8(21)
 160 0012 00F4      		brsh .L2
 162               	.LM5:
 163 0014 0093 0000 		sts _nrk_cpu_state,r16
 165               	.LM6:
 166 0018 0E94 0000 		call nrk_idle
 167 001c 00C0      		rjmp .L3
 168               	.L2:
 170               	.LM7:
 171 001e 8AE0      		ldi r24,lo8(10)
 172 0020 90E0      		ldi r25,hi8(10)
 173 0022 0E94 0000 		call nrk_spin_wait_us
 175               	.LM8:
 176 0026 1093 0000 		sts _nrk_cpu_state,r17
  56:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	    nrk_sleep();
 178               	.LM9:
 179 002a 0E94 0000 		call nrk_sleep
 180               	.L3:
  57:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	#else
  58:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	    nrk_idle();
  59:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** 	#endif
  60:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****     }
  61:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****  
  62:../../../nano-RK/src/kernel/source/nrk_idle_task.c **** #ifdef NRK_STACK_CHECK
  63:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****    if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
 182               	.LM10:
 183 002e 8091 0000 		lds r24,nrk_idle_task_stk
 184 0032 8535      		cpi r24,lo8(85)
 185 0034 01F0      		breq .L4
 186 0036 88E0      		ldi r24,lo8(8)
 187 0038 0E94 0000 		call nrk_error_add
 188               	.L4:
  64:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****    #ifdef KERNEL_STK_ARRAY
  65:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****    	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
  66:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****    #else
  67:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****    	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
  68:../../../nano-RK/src/kernel/source/nrk_idle_task.c ****    	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
 190               	.LM11:
 191 003c 8091 7E10 		lds r24,4222
 192 0040 8535      		cpi r24,lo8(85)
 193 0042 01F0      		breq .L9
 194 0044 88E0      		ldi r24,lo8(8)
 195 0046 0E94 0000 		call nrk_error_add
 196 004a 00C0      		rjmp .L9
 198               	.Lscope1:
 200               		.stabd	78,0,0
 201               		.comm _nrk_signal_list,4,1
 202               		.comm nrk_idle_task_stk,128,1
 203               		.comm nrk_kernel_stk_ptr,2,1
 204               		.comm error_task,1,1
 205               		.comm error_num,1,1
 206               		.comm _nrk_prev_timer_val,1,1
 207               		.comm _nrk_time_trigger,1,1
 208               		.comm app_timer0_callback,2,1
 209               		.comm app_timer0_prescale,1,1
 210               		.comm _nrk_cpu_state,1,1
 211               		.comm next_next_wakeup,2,1
 224               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_idle_task.c
     /tmp/ccojUiYr.s:2      *ABS*:0000003f __SREG__
     /tmp/ccojUiYr.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccojUiYr.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccojUiYr.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccojUiYr.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccojUiYr.s:137    .text:00000000 nrk_idle_task
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000002 next_next_wakeup

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_stack_check
_nrk_get_next_wakeup
nrk_idle
nrk_spin_wait_us
nrk_sleep
nrk_error_add

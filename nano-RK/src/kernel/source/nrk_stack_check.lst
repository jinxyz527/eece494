   1               		.file	"nrk_stack_check.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 133               	.global	nrk_stack_check_pid
 135               	nrk_stack_check_pid:
 136               		.stabd	46,0,0
   1:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** /******************************************************************************
   2:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  All rights reserved.
   5:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *
   6:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *
  10:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *
  14:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  GNU General Public License for more details.
  18:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *
  19:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  You should have received a copy of the GNU General Public License
  20:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *
  22:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  Contributing Authors (specific to this file):
  23:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  Anthony Rowe
  24:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *  Zane Starr
  25:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** *******************************************************************************/
  26:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  27:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #include <nrk.h>
  28:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #include <nrk_error.h>
  29:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #include <nrk_stack_check.h>
  30:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #include <stdio.h>
  31:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  32:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** void dump_stack_info()
  33:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** {
  34:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	unsigned int *stk;
  35:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	unsigned char *stkc;
  36:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	uint8_t i;
  37:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  38:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
  39:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  40:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
  41:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
  42:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	stkc = (unsigned char*)stk;
  43:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	printf( "bottom = %x ",(uint16_t)stkc );
  44:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	printf( "canary = %x ",*stkc );
  45:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
  46:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	stkc = (unsigned char*)stk;
  47:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	printf( "stk = %x ",(uint16_t)stkc );
  48:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
  49:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  50:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	for(i=0; i<NRK_MAX_TASKS; i++ )
  51:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	{
  52:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
  53:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		stkc = (unsigned char*)stk;
  54:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
  55:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		printf( "canary = %x ",*stkc );
  56:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
  57:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		stkc = (unsigned char*)stk;
  58:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		printf( "stk = %x ",(uint16_t)stkc );
  59:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
  60:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  61:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	}
  62:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  63:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** }
  64:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  65:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  66:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** /*
  67:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****  * Simple Canary value stack overflow check.
  68:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****  * If the end of the stack was overwritten, then flag an error.
  69:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****  *
  70:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****  * */
  71:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** //inline void nrk_stack_check()
  72:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** void nrk_stack_check()
  73:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** {
  74:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
  75:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  76:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** unsigned int *stk ;  // 2 bytes
  77:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** unsigned char *stkc; // 1 byte
  78:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     
  79:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
  80:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  81:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL) {
  82:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	    	#ifdef NRK_REPORT_ERRORS
  83:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	    	 dump_stack_info();
  84:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		#endif
  85:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
  86:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		 *stkc=STK_CANARY_VAL; 
  87:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     		  } 
  88:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****  
  89:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
  90:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  91:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND ) {
  92:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	    	#ifdef NRK_REPORT_ERRORS
  93:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	    	 dump_stack_info();
  94:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		#endif
  95:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
  96:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     		 } 
  97:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  98:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
  99:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
 100:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
 101:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #endif
 102:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** }
 103:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
 104:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** int8_t nrk_stack_check_pid(int8_t pid)
 105:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** {
 138               	.LM0:
 139               	.LFBB1:
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 106:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
 107:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 
 108:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** unsigned int *stk ;  // 2 bytes
 109:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** unsigned char *stkc; // 1 byte
 110:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     
 111:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
 143               	.LM1:
 144 0000 9927      		clr r25
 145 0002 87FD      		sbrc r24,7
 146 0004 9095      		com r25
 147 0006 FC01      		movw r30,r24
 148 0008 25E0      		ldi r18,5
 149 000a EE0F      	1:	lsl r30
 150 000c FF1F      		rol r31
 151 000e 2A95      		dec r18
 152 0010 01F4      		brne 1b
 153 0012 E80F      		add r30,r24
 154 0014 F91F      		adc r31,r25
 155 0016 E050      		subi r30,lo8(-(nrk_task_TCB))
 156 0018 F040      		sbci r31,hi8(-(nrk_task_TCB))
 157 001a A281      		ldd r26,Z+2
 158 001c B381      		ldd r27,Z+3
 112:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 113:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL) {
 160               	.LM2:
 161 001e 8C91      		ld r24,X
 162 0020 8535      		cpi r24,lo8(85)
 163 0022 01F0      		breq .L2
 114:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		 *stkc=STK_CANARY_VAL; 
 165               	.LM3:
 166 0024 85E5      		ldi r24,lo8(85)
 167 0026 8C93      		st X,r24
 168 0028 8FEF      		ldi r24,lo8(-1)
 115:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		 return NRK_ERROR;
 170               	.LM4:
 171 002a 0895      		ret
 172               	.L2:
 116:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     		  }  
 117:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
 118:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 119:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND ) {
 174               	.LM5:
 175 002c 8081      		ld r24,Z
 176 002e 9181      		ldd r25,Z+1
 177 0030 21E1      		ldi r18,hi8(4352)
 178 0032 8030      		cpi r24,lo8(4352)
 179 0034 9207      		cpc r25,r18
 180 0036 00F4      		brsh .L4
 181 0038 81E0      		ldi r24,lo8(1)
 182 003a 0895      		ret
 183               	.L4:
 120:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
 185               	.LM6:
 186 003c 82E1      		ldi r24,lo8(18)
 187 003e 0E94 0000 		call nrk_error_add
 188 0042 8FEF      		ldi r24,lo8(-1)
 121:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** 		 return NRK_ERROR;
 122:../../../nano-RK/src/kernel/source/nrk_stack_check.c ****     		}
 123:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** #endif
 124:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** return NRK_OK;
 125:../../../nano-RK/src/kernel/source/nrk_stack_check.c **** }
 190               	.LM7:
 191 0044 0895      		ret
 193               	.Lscope1:
 195               		.stabd	78,0,0
 196               		.data
 197               	.LC0:
 198 0000 6375 723A 		.string	"cur: %d "
 198      2025 6420 
 198      00
 199               	.LC1:
 200 0009 626F 7474 		.string	"bottom = %x "
 200      6F6D 203D 
 200      2025 7820 
 200      00
 201               	.LC2:
 202 0016 6361 6E61 		.string	"canary = %x "
 202      7279 203D 
 202      2025 7820 
 202      00
 203               	.LC3:
 204 0023 7374 6B20 		.string	"stk = %x "
 204      3D20 2578 
 204      2000 
 205               	.LC4:
 206 002d 7463 6220 		.string	"tcb addr = %x\r\n"
 206      6164 6472 
 206      203D 2025 
 206      780D 0A00 
 207               	.LC5:
 208 003d 2564 3A20 		.string	"%d: bottom = %x "
 208      626F 7474 
 208      6F6D 203D 
 208      2025 7820 
 208      00
 209               		.text
 211               	.global	dump_stack_info
 213               	dump_stack_info:
 214               		.stabd	46,0,0
 216               	.LM8:
 217               	.LFBB2:
 218 0046 6F92      		push r6
 219 0048 7F92      		push r7
 220 004a 8F92      		push r8
 221 004c 9F92      		push r9
 222 004e AF92      		push r10
 223 0050 BF92      		push r11
 224 0052 CF92      		push r12
 225 0054 DF92      		push r13
 226 0056 EF92      		push r14
 227 0058 FF92      		push r15
 228 005a 0F93      		push r16
 229 005c 1F93      		push r17
 230 005e CF93      		push r28
 231 0060 DF93      		push r29
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 235               	.LM9:
 236 0062 80E0      		ldi r24,lo8(__c.1976)
 237 0064 90E0      		ldi r25,hi8(__c.1976)
 238 0066 0E94 0000 		call nrk_kprintf
 240               	.LM10:
 241 006a 00D0      		rcall .
 242 006c 00D0      		rcall .
 243 006e 80E0      		ldi r24,lo8(.LC0)
 244 0070 90E0      		ldi r25,hi8(.LC0)
 245 0072 ADB7      		in r26,__SP_L__
 246 0074 BEB7      		in r27,__SP_H__
 247 0076 1296      		adiw r26,1+1
 248 0078 9C93      		st X,r25
 249 007a 8E93      		st -X,r24
 250 007c 1197      		sbiw r26,1
 251 007e E091 0000 		lds r30,nrk_cur_task_TCB
 252 0082 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 253 0086 8085      		ldd r24,Z+8
 254 0088 9927      		clr r25
 255 008a 87FD      		sbrc r24,7
 256 008c 9095      		com r25
 257 008e 1496      		adiw r26,3+1
 258 0090 9C93      		st X,r25
 259 0092 8E93      		st -X,r24
 260 0094 1397      		sbiw r26,3
 261 0096 0E94 0000 		call printf
 263               	.LM11:
 264 009a E091 0000 		lds r30,nrk_cur_task_TCB
 265 009e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 266 00a2 C281      		ldd r28,Z+2
 267 00a4 D381      		ldd r29,Z+3
 269               	.LM12:
 270 00a6 80E0      		ldi r24,lo8(.LC1)
 271 00a8 90E0      		ldi r25,hi8(.LC1)
 272 00aa EDB7      		in r30,__SP_L__
 273 00ac FEB7      		in r31,__SP_H__
 274 00ae 9283      		std Z+2,r25
 275 00b0 8183      		std Z+1,r24
 276 00b2 D483      		std Z+4,r29
 277 00b4 C383      		std Z+3,r28
 278 00b6 0E94 0000 		call printf
 280               	.LM13:
 281 00ba EDB7      		in r30,__SP_L__
 282 00bc FEB7      		in r31,__SP_H__
 283 00be 3196      		adiw r30,1
 284 00c0 60E0      		ldi r22,lo8(.LC2)
 285 00c2 A62E      		mov r10,r22
 286 00c4 60E0      		ldi r22,hi8(.LC2)
 287 00c6 B62E      		mov r11,r22
 288 00c8 ADB7      		in r26,__SP_L__
 289 00ca BEB7      		in r27,__SP_H__
 290 00cc 1296      		adiw r26,1+1
 291 00ce BC92      		st X,r11
 292 00d0 AE92      		st -X,r10
 293 00d2 1197      		sbiw r26,1
 294 00d4 8881      		ld r24,Y
 295 00d6 8283      		std Z+2,r24
 296 00d8 1382      		std Z+3,__zero_reg__
 297 00da 0E94 0000 		call printf
 299               	.LM14:
 300 00de 50E0      		ldi r21,lo8(.LC3)
 301 00e0 C52E      		mov r12,r21
 302 00e2 50E0      		ldi r21,hi8(.LC3)
 303 00e4 D52E      		mov r13,r21
 304 00e6 EDB7      		in r30,__SP_L__
 305 00e8 FEB7      		in r31,__SP_H__
 306 00ea D282      		std Z+2,r13
 307 00ec C182      		std Z+1,r12
 308 00ee E091 0000 		lds r30,nrk_cur_task_TCB
 309 00f2 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 310 00f6 8081      		ld r24,Z
 311 00f8 9181      		ldd r25,Z+1
 312 00fa ADB7      		in r26,__SP_L__
 313 00fc BEB7      		in r27,__SP_H__
 314 00fe 1496      		adiw r26,3+1
 315 0100 9C93      		st X,r25
 316 0102 8E93      		st -X,r24
 317 0104 1397      		sbiw r26,3
 318 0106 0E94 0000 		call printf
 320               	.LM15:
 321 010a 40E0      		ldi r20,lo8(.LC4)
 322 010c E42E      		mov r14,r20
 323 010e 40E0      		ldi r20,hi8(.LC4)
 324 0110 F42E      		mov r15,r20
 325 0112 EDB7      		in r30,__SP_L__
 326 0114 FEB7      		in r31,__SP_H__
 327 0116 F282      		std Z+2,r15
 328 0118 E182      		std Z+1,r14
 329 011a 8091 0000 		lds r24,nrk_cur_task_TCB
 330 011e 9091 0000 		lds r25,(nrk_cur_task_TCB)+1
 331 0122 9483      		std Z+4,r25
 332 0124 8383      		std Z+3,r24
 333 0126 0E94 0000 		call printf
 334 012a C0E0      		ldi r28,lo8(nrk_task_TCB)
 335 012c D0E0      		ldi r29,hi8(nrk_task_TCB)
 336 012e 00E0      		ldi r16,lo8(0)
 337 0130 10E0      		ldi r17,hi8(0)
 338 0132 0F90      		pop __tmp_reg__
 339 0134 0F90      		pop __tmp_reg__
 340 0136 0F90      		pop __tmp_reg__
 341 0138 0F90      		pop __tmp_reg__
 343               	.LM16:
 344 013a 30E0      		ldi r19,lo8(.LC5)
 345 013c 832E      		mov r8,r19
 346 013e 30E0      		ldi r19,hi8(.LC5)
 347 0140 932E      		mov r9,r19
 349               	.LM17:
 350 0142 3501      		movw r6,r10
 352               	.LM18:
 353 0144 BC2C      		mov r11,r12
 355               	.LM19:
 356 0146 AE2C      		mov r10,r14
 357 0148 CF2C      		mov r12,r15
 358               	.L8:
 360               	.LM20:
 361 014a EA80      		ldd r14,Y+2
 362 014c FB80      		ldd r15,Y+3
 364               	.LM21:
 365 014e 00D0      		rcall .
 366 0150 00D0      		rcall .
 367 0152 00D0      		rcall .
 368 0154 EDB7      		in r30,__SP_L__
 369 0156 FEB7      		in r31,__SP_H__
 370 0158 3196      		adiw r30,1
 371 015a ADB7      		in r26,__SP_L__
 372 015c BEB7      		in r27,__SP_H__
 373 015e 1296      		adiw r26,1+1
 374 0160 9C92      		st X,r9
 375 0162 8E92      		st -X,r8
 376 0164 1197      		sbiw r26,1
 377 0166 1383      		std Z+3,r17
 378 0168 0283      		std Z+2,r16
 379 016a F582      		std Z+5,r15
 380 016c E482      		std Z+4,r14
 381 016e 0E94 0000 		call printf
 383               	.LM22:
 384 0172 0F90      		pop __tmp_reg__
 385 0174 0F90      		pop __tmp_reg__
 386 0176 EDB7      		in r30,__SP_L__
 387 0178 FEB7      		in r31,__SP_H__
 388 017a 3196      		adiw r30,1
 389 017c ADB7      		in r26,__SP_L__
 390 017e BEB7      		in r27,__SP_H__
 391 0180 1196      		adiw r26,1
 392 0182 6C92      		st X,r6
 393 0184 1197      		sbiw r26,1
 394 0186 1296      		adiw r26,2
 395 0188 7C92      		st X,r7
 396 018a D701      		movw r26,r14
 397 018c 8C91      		ld r24,X
 398 018e 8283      		std Z+2,r24
 399 0190 1382      		std Z+3,__zero_reg__
 400 0192 0E94 0000 		call printf
 402               	.LM23:
 403 0196 EDB7      		in r30,__SP_L__
 404 0198 FEB7      		in r31,__SP_H__
 405 019a B182      		std Z+1,r11
 406 019c D282      		std Z+2,r13
 407 019e 8881      		ld r24,Y
 408 01a0 9981      		ldd r25,Y+1
 409 01a2 9483      		std Z+4,r25
 410 01a4 8383      		std Z+3,r24
 411 01a6 0E94 0000 		call printf
 413               	.LM24:
 414 01aa ADB7      		in r26,__SP_L__
 415 01ac BEB7      		in r27,__SP_H__
 416 01ae 1196      		adiw r26,1
 417 01b0 AC92      		st X,r10
 418 01b2 1197      		sbiw r26,1
 419 01b4 1296      		adiw r26,2
 420 01b6 CC92      		st X,r12
 421 01b8 1297      		sbiw r26,2
 422 01ba 1496      		adiw r26,3+1
 423 01bc DC93      		st X,r29
 424 01be CE93      		st -X,r28
 425 01c0 1397      		sbiw r26,3
 426 01c2 0E94 0000 		call printf
 427 01c6 0F5F      		subi r16,lo8(-(1))
 428 01c8 1F4F      		sbci r17,hi8(-(1))
 429 01ca A196      		adiw r28,33
 431               	.LM25:
 432 01cc 0F90      		pop __tmp_reg__
 433 01ce 0F90      		pop __tmp_reg__
 434 01d0 0F90      		pop __tmp_reg__
 435 01d2 0F90      		pop __tmp_reg__
 436 01d4 0330      		cpi r16,3
 437 01d6 1105      		cpc r17,__zero_reg__
 438 01d8 01F0      		breq .+2
 439 01da 00C0      		rjmp .L8
 440               	/* epilogue start */
 442               	.LM26:
 443 01dc DF91      		pop r29
 444 01de CF91      		pop r28
 445 01e0 1F91      		pop r17
 446 01e2 0F91      		pop r16
 447 01e4 FF90      		pop r15
 448 01e6 EF90      		pop r14
 449 01e8 DF90      		pop r13
 450 01ea CF90      		pop r12
 451 01ec BF90      		pop r11
 452 01ee AF90      		pop r10
 453 01f0 9F90      		pop r9
 454 01f2 8F90      		pop r8
 455 01f4 7F90      		pop r7
 456 01f6 6F90      		pop r6
 457 01f8 0895      		ret
 459               	.Lscope2:
 461               		.stabd	78,0,0
 463               	.global	nrk_stack_check
 465               	nrk_stack_check:
 466               		.stabd	46,0,0
 468               	.LM27:
 469               	.LFBB3:
 470 01fa CF93      		push r28
 471 01fc DF93      		push r29
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 475               	.LM28:
 476 01fe E091 0000 		lds r30,nrk_cur_task_TCB
 477 0202 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 478 0206 C281      		ldd r28,Z+2
 479 0208 D381      		ldd r29,Z+3
 481               	.LM29:
 482 020a 8881      		ld r24,Y
 483 020c 8535      		cpi r24,lo8(85)
 484 020e 01F0      		breq .L12
 486               	.LM30:
 487 0210 0E94 0000 		call dump_stack_info
 489               	.LM31:
 490 0214 81E0      		ldi r24,lo8(1)
 491 0216 0E94 0000 		call nrk_error_add
 493               	.LM32:
 494 021a 85E5      		ldi r24,lo8(85)
 495 021c 8883      		st Y,r24
 496               	.L12:
 498               	.LM33:
 499 021e E091 0000 		lds r30,nrk_cur_task_TCB
 500 0222 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 501 0226 8081      		ld r24,Z
 502 0228 9181      		ldd r25,Z+1
 503 022a 21E1      		ldi r18,hi8(4352)
 504 022c 8030      		cpi r24,lo8(4352)
 505 022e 9207      		cpc r25,r18
 506 0230 00F0      		brlo .L14
 508               	.LM34:
 509 0232 0E94 0000 		call dump_stack_info
 511               	.LM35:
 512 0236 82E1      		ldi r24,lo8(18)
 513 0238 0E94 0000 		call nrk_error_add
 514               	.L14:
 515               	/* epilogue start */
 517               	.LM36:
 518 023c DF91      		pop r29
 519 023e CF91      		pop r28
 520 0240 0895      		ret
 522               	.Lscope3:
 524               		.stabd	78,0,0
 525               		.section	.progmem.data,"a",@progbits
 528               	__c.1976:
 529 0000 0D0A 5354 		.string	"\r\nSTACK DUMP\r\n"
 529      4143 4B20 
 529      4455 4D50 
 529      0D0A 00
 530               		.comm _nrk_signal_list,4,1
 531               		.comm nrk_idle_task_stk,128,1
 532               		.comm nrk_kernel_stk_ptr,2,1
 533               		.comm error_task,1,1
 534               		.comm error_num,1,1
 540               		.text
 542               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_stack_check.c
     /tmp/ccNN8DAh.s:2      *ABS*:0000003f __SREG__
     /tmp/ccNN8DAh.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccNN8DAh.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccNN8DAh.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccNN8DAh.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccNN8DAh.s:135    .text:00000000 nrk_stack_check_pid
     /tmp/ccNN8DAh.s:213    .text:00000046 dump_stack_info
     /tmp/ccNN8DAh.s:528    .progmem.data:00000000 __c.1976
     /tmp/ccNN8DAh.s:465    .text:000001fa nrk_stack_check
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_TCB
nrk_error_add
nrk_kprintf
nrk_cur_task_TCB
printf

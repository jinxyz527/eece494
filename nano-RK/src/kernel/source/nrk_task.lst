   1               		.file	"nrk_task.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 128               	.global	nrk_get_high_ready_task_ID
 130               	nrk_get_high_ready_task_ID:
 131               		.stabd	46,0,0
   1:../../../nano-RK/src/kernel/source/nrk_task.c **** /******************************************************************************
   2:../../../nano-RK/src/kernel/source/nrk_task.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../nano-RK/src/kernel/source/nrk_task.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../nano-RK/src/kernel/source/nrk_task.c **** *  All rights reserved.
   5:../../../nano-RK/src/kernel/source/nrk_task.c **** *
   6:../../../nano-RK/src/kernel/source/nrk_task.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../nano-RK/src/kernel/source/nrk_task.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../nano-RK/src/kernel/source/nrk_task.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../nano-RK/src/kernel/source/nrk_task.c **** *
  10:../../../nano-RK/src/kernel/source/nrk_task.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../nano-RK/src/kernel/source/nrk_task.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../nano-RK/src/kernel/source/nrk_task.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../nano-RK/src/kernel/source/nrk_task.c **** *
  14:../../../nano-RK/src/kernel/source/nrk_task.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../nano-RK/src/kernel/source/nrk_task.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../nano-RK/src/kernel/source/nrk_task.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../nano-RK/src/kernel/source/nrk_task.c **** *  GNU General Public License for more details.
  18:../../../nano-RK/src/kernel/source/nrk_task.c **** *
  19:../../../nano-RK/src/kernel/source/nrk_task.c **** *  You should have received a copy of the GNU General Public License
  20:../../../nano-RK/src/kernel/source/nrk_task.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../nano-RK/src/kernel/source/nrk_task.c **** *
  22:../../../nano-RK/src/kernel/source/nrk_task.c **** *  Contributing Authors (specific to this file):
  23:../../../nano-RK/src/kernel/source/nrk_task.c **** *  Anthony Rowe
  24:../../../nano-RK/src/kernel/source/nrk_task.c **** *  Zane Starr
  25:../../../nano-RK/src/kernel/source/nrk_task.c **** *  Anand Eswaren
  26:../../../nano-RK/src/kernel/source/nrk_task.c **** *******************************************************************************/
  27:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  28:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <nrk.h>
  29:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <nrk_task.h>
  30:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <include.h>
  31:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <ulib.h>
  32:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <nrk_timer.h>
  33:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <nrk_scheduler.h>
  34:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <nrk_error.h>
  35:../../../nano-RK/src/kernel/source/nrk_task.c **** #include <nrk_stack_check.h>
  36:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  37:../../../nano-RK/src/kernel/source/nrk_task.c **** //#define TIME_PAD  2
  38:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  39:../../../nano-RK/src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ();
  40:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  41:../../../nano-RK/src/kernel/source/nrk_task.c **** uint8_t nrk_get_high_ready_task_ID ()
  42:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 133               	.LM0:
 134               	.LFBB1:
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 138               	.LM1:
 139 0000 E091 0000 		lds r30,_head_node
 140 0004 F091 0000 		lds r31,(_head_node)+1
  43:../../../nano-RK/src/kernel/source/nrk_task.c ****   return (_head_node->task_ID);
  44:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 142               	.LM2:
 143 0008 8081      		ld r24,Z
 144               	/* epilogue start */
 145 000a 0895      		ret
 147               	.Lscope1:
 149               		.stabd	78,0,0
 151               	.global	nrk_print_readyQ
 153               	nrk_print_readyQ:
 154               		.stabd	46,0,0
  45:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  46:../../../nano-RK/src/kernel/source/nrk_task.c **** void nrk_print_readyQ ()
  47:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 156               	.LM3:
 157               	.LFBB2:
 158               	/* prologue: function */
 159               	/* frame size = 0 */
  48:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_queue *ptr;
  49:../../../nano-RK/src/kernel/source/nrk_task.c ****   ptr = _head_node;
 161               	.LM4:
 162 000c E091 0000 		lds r30,_head_node
 163 0010 F091 0000 		lds r31,(_head_node)+1
  50:../../../nano-RK/src/kernel/source/nrk_task.c ****   //nrk_kprintf (PSTR ("nrk_queue: "));
  51:../../../nano-RK/src/kernel/source/nrk_task.c ****   while (ptr != NULL) {
 165               	.LM5:
 166 0014 00C0      		rjmp .L4
 167               	.L5:
  52:../../../nano-RK/src/kernel/source/nrk_task.c ****     //printf ("%d ", ptr->task_ID);
  53:../../../nano-RK/src/kernel/source/nrk_task.c ****     ptr = ptr->Next;
 169               	.LM6:
 170 0016 0380      		ldd __tmp_reg__,Z+3
 171 0018 F481      		ldd r31,Z+4
 172 001a E02D      		mov r30,__tmp_reg__
 173               	.L4:
 175               	.LM7:
 176 001c 3097      		sbiw r30,0
 177 001e 01F4      		brne .L5
 178               	/* epilogue start */
  54:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
  55:../../../nano-RK/src/kernel/source/nrk_task.c ****   //nrk_kprintf (PSTR ("\n\r"));
  56:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 180               	.LM8:
 181 0020 0895      		ret
 186               	.Lscope2:
 188               		.stabd	78,0,0
 191               	.global	nrk_add_to_readyQ
 193               	nrk_add_to_readyQ:
 194               		.stabd	46,0,0
  57:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  58:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  59:../../../nano-RK/src/kernel/source/nrk_task.c **** void nrk_add_to_readyQ (int8_t task_ID)
  60:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 196               	.LM9:
 197               	.LFBB3:
 198 0022 DF92      		push r13
 199 0024 EF92      		push r14
 200 0026 FF92      		push r15
 201 0028 0F93      		push r16
 202 002a 1F93      		push r17
 203 002c CF93      		push r28
 204 002e DF93      		push r29
 205               	/* prologue: function */
 206               	/* frame size = 0 */
  61:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_queue *NextNode;
  62:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_queue *CurNode;
  63:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  64:../../../nano-RK/src/kernel/source/nrk_task.c ****   //printf( "nrk_add_to_readyQ %d\n",task_ID );
  65:../../../nano-RK/src/kernel/source/nrk_task.c ****   // nrk_queue full
  66:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (_free_node == NULL) {
 208               	.LM10:
 209 0030 E091 0000 		lds r30,_free_node
 210 0034 F091 0000 		lds r31,(_free_node)+1
 211 0038 3097      		sbiw r30,0
 212 003a 01F4      		brne .+2
 213 003c 00C0      		rjmp .L19
  67:../../../nano-RK/src/kernel/source/nrk_task.c ****     return;
  68:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
  69:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  70:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  71:../../../nano-RK/src/kernel/source/nrk_task.c ****   NextNode = _head_node;
 215               	.LM11:
 216 003e 6091 0000 		lds r22,_head_node
 217 0042 7091 0000 		lds r23,(_head_node)+1
  72:../../../nano-RK/src/kernel/source/nrk_task.c ****   CurNode = _free_node;
  73:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  74:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (_head_node != NULL) {
 219               	.LM12:
 220 0046 6115      		cp r22,__zero_reg__
 221 0048 7105      		cpc r23,__zero_reg__
 222 004a 01F4      		brne .L10
 223 004c A0E0      		ldi r26,lo8(0)
 224 004e B0E0      		ldi r27,hi8(0)
 225 0050 00C0      		rjmp .L11
 226               	.L10:
 227 0052 DB01      		movw r26,r22
  75:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  76:../../../nano-RK/src/kernel/source/nrk_task.c ****     while (NextNode != NULL) {
  77:../../../nano-RK/src/kernel/source/nrk_task.c ****       if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
  78:../../../nano-RK/src/kernel/source/nrk_task.c ****         if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
 229               	.LM13:
 230 0054 482F      		mov r20,r24
 231 0056 5527      		clr r21
 232 0058 47FD      		sbrc r20,7
 233 005a 5095      		com r21
 234 005c 9A01      		movw r18,r20
 235 005e 15E0      		ldi r17,5
 236 0060 220F      	1:	lsl r18
 237 0062 331F      		rol r19
 238 0064 1A95      		dec r17
 239 0066 01F4      		brne 1b
 240 0068 240F      		add r18,r20
 241 006a 351F      		adc r19,r21
 242 006c 2050      		subi r18,lo8(-(nrk_task_TCB))
 243 006e 3040      		sbci r19,hi8(-(nrk_task_TCB))
 244 0070 8901      		movw r16,r18
 245 0072 065F      		subi r16,lo8(-(10))
 246 0074 1F4F      		sbci r17,hi8(-(10))
  79:../../../nano-RK/src/kernel/source/nrk_task.c ****             nrk_task_TCB[task_ID].task_prio)
  80:../../../nano-RK/src/kernel/source/nrk_task.c ****           break;
  81:../../../nano-RK/src/kernel/source/nrk_task.c ****       if (nrk_task_TCB[task_ID].elevated_prio_flag)
 248               	.LM14:
 249 0076 44E0      		ldi r20,lo8(4)
 250 0078 E42E      		mov r14,r20
 251 007a F12C      		mov r15,__zero_reg__
 252 007c E20E      		add r14,r18
 253 007e F31E      		adc r15,r19
  82:../../../nano-RK/src/kernel/source/nrk_task.c ****         if (nrk_task_TCB[NextNode->task_ID].task_prio <
 255               	.LM15:
 256 0080 255F      		subi r18,lo8(-(11))
 257 0082 3F4F      		sbci r19,hi8(-(11))
 258               	.L14:
 260               	.LM16:
 261 0084 4C91      		ld r20,X
 262 0086 50E0      		ldi r21,lo8(0)
 263 0088 EA01      		movw r28,r20
 264 008a 95E0      		ldi r25,5
 265 008c CC0F      	1:	lsl r28
 266 008e DD1F      		rol r29
 267 0090 9A95      		dec r25
 268 0092 01F4      		brne 1b
 269 0094 C40F      		add r28,r20
 270 0096 D51F      		adc r29,r21
 271 0098 C050      		subi r28,lo8(-(nrk_task_TCB))
 272 009a D040      		sbci r29,hi8(-(nrk_task_TCB))
 273 009c 9C81      		ldd r25,Y+4
 274 009e 9923      		tst r25
 275 00a0 01F0      		breq .L12
 277               	.LM17:
 278 00a2 DB84      		ldd r13,Y+11
 279 00a4 E801      		movw r28,r16
 280 00a6 9881      		ld r25,Y
 281 00a8 D916      		cp r13,r25
 282 00aa 00F0      		brlo .L11
 283               	.L12:
 285               	.LM18:
 286 00ac E701      		movw r28,r14
 287 00ae 9881      		ld r25,Y
 288 00b0 9923      		tst r25
 289 00b2 01F0      		breq .L13
 291               	.LM19:
 292 00b4 EA01      		movw r28,r20
 293 00b6 95E0      		ldi r25,5
 294 00b8 CC0F      	1:	lsl r28
 295 00ba DD1F      		rol r29
 296 00bc 9A95      		dec r25
 297 00be 01F4      		brne 1b
 298 00c0 C40F      		add r28,r20
 299 00c2 D51F      		adc r29,r21
 300 00c4 C050      		subi r28,lo8(-(nrk_task_TCB))
 301 00c6 D040      		sbci r29,hi8(-(nrk_task_TCB))
 302 00c8 DA84      		ldd r13,Y+10
 303 00ca E901      		movw r28,r18
 304 00cc 9881      		ld r25,Y
 305 00ce D916      		cp r13,r25
 306 00d0 00F0      		brlo .L11
 307               	.L13:
  83:../../../nano-RK/src/kernel/source/nrk_task.c ****             nrk_task_TCB[task_ID].task_prio_ceil)
  84:../../../nano-RK/src/kernel/source/nrk_task.c ****           break;
  85:../../../nano-RK/src/kernel/source/nrk_task.c ****       if (nrk_task_TCB[NextNode->task_ID].task_prio <
 309               	.LM20:
 310 00d2 EA01      		movw r28,r20
 311 00d4 95E0      		ldi r25,5
 312 00d6 CC0F      	1:	lsl r28
 313 00d8 DD1F      		rol r29
 314 00da 9A95      		dec r25
 315 00dc 01F4      		brne 1b
 316 00de C40F      		add r28,r20
 317 00e0 D51F      		adc r29,r21
 318 00e2 C050      		subi r28,lo8(-(nrk_task_TCB))
 319 00e4 D040      		sbci r29,hi8(-(nrk_task_TCB))
 320 00e6 4A85      		ldd r20,Y+10
 321 00e8 E801      		movw r28,r16
 322 00ea 9881      		ld r25,Y
 323 00ec 4917      		cp r20,r25
 324 00ee 00F0      		brlo .L11
  86:../../../nano-RK/src/kernel/source/nrk_task.c ****           nrk_task_TCB[task_ID].task_prio)
  87:../../../nano-RK/src/kernel/source/nrk_task.c ****         break;
  88:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  89:../../../nano-RK/src/kernel/source/nrk_task.c ****       NextNode = NextNode->Next;
 326               	.LM21:
 327 00f0 1396      		adiw r26,3
 328 00f2 0D90      		ld __tmp_reg__,X+
 329 00f4 BC91      		ld r27,X
 330 00f6 A02D      		mov r26,__tmp_reg__
 332               	.LM22:
 333 00f8 1097      		sbiw r26,0
 334 00fa 01F4      		brne .L14
 335               	.L11:
  90:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
  91:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  92:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  93:../../../nano-RK/src/kernel/source/nrk_task.c ****     //      while ((NextNode != NULL) && ((nrk_task_TCB[NextNode->task_ID].task_prio >= nrk_task_TC
  94:../../../nano-RK/src/kernel/source/nrk_task.c ****     //              NextNode = NextNode->Next;}
  95:../../../nano-RK/src/kernel/source/nrk_task.c ****     // Stop if nextNode is freenode or next node less prio or (equal and elevated 
  96:../../../nano-RK/src/kernel/source/nrk_task.c ****     // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
  97:../../../nano-RK/src/kernel/source/nrk_task.c ****     // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 
  98:../../../nano-RK/src/kernel/source/nrk_task.c **** 
  99:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 100:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 101:../../../nano-RK/src/kernel/source/nrk_task.c ****   CurNode->task_ID = task_ID;
 337               	.LM23:
 338 00fc 8083      		st Z,r24
 102:../../../nano-RK/src/kernel/source/nrk_task.c ****   _free_node = _free_node->Next;
 340               	.LM24:
 341 00fe C381      		ldd r28,Z+3
 342 0100 D481      		ldd r29,Z+4
 343 0102 D093 0000 		sts (_free_node)+1,r29
 344 0106 C093 0000 		sts _free_node,r28
 103:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 104:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (NextNode == _head_node) {
 346               	.LM25:
 347 010a A617      		cp r26,r22
 348 010c B707      		cpc r27,r23
 349 010e 01F4      		brne .L15
 105:../../../nano-RK/src/kernel/source/nrk_task.c ****     //at start
 106:../../../nano-RK/src/kernel/source/nrk_task.c ****     if (_head_node != NULL) {
 351               	.LM26:
 352 0110 1097      		sbiw r26,0
 353 0112 01F0      		breq .L16
 107:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Next = _head_node;
 355               	.LM27:
 356 0114 B483      		std Z+4,r27
 357 0116 A383      		std Z+3,r26
 108:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Prev = NULL;
 359               	.LM28:
 360 0118 1282      		std Z+2,__zero_reg__
 361 011a 1182      		std Z+1,__zero_reg__
 109:../../../nano-RK/src/kernel/source/nrk_task.c ****       _head_node->Prev = CurNode;
 363               	.LM29:
 364 011c 1296      		adiw r26,1+1
 365 011e FC93      		st X,r31
 366 0120 EE93      		st -X,r30
 367 0122 1197      		sbiw r26,1
 368 0124 00C0      		rjmp .L17
 369               	.L16:
 110:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 111:../../../nano-RK/src/kernel/source/nrk_task.c ****     else {
 112:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Next = NULL;
 371               	.LM30:
 372 0126 1482      		std Z+4,__zero_reg__
 373 0128 1382      		std Z+3,__zero_reg__
 113:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Prev = NULL;
 375               	.LM31:
 376 012a 1282      		std Z+2,__zero_reg__
 377 012c 1182      		std Z+1,__zero_reg__
 114:../../../nano-RK/src/kernel/source/nrk_task.c ****       _free_node->Prev = CurNode;
 379               	.LM32:
 380 012e FA83      		std Y+2,r31
 381 0130 E983      		std Y+1,r30
 382               	.L17:
 115:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 116:../../../nano-RK/src/kernel/source/nrk_task.c ****     _head_node = CurNode;
 384               	.LM33:
 385 0132 F093 0000 		sts (_head_node)+1,r31
 386 0136 E093 0000 		sts _head_node,r30
 387 013a 00C0      		rjmp .L19
 388               	.L15:
 389 013c 1196      		adiw r26,1
 390 013e 8D91      		ld r24,X+
 391 0140 9C91      		ld r25,X
 392 0142 1297      		sbiw r26,1+1
 117:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 118:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 119:../../../nano-RK/src/kernel/source/nrk_task.c ****   else {
 120:../../../nano-RK/src/kernel/source/nrk_task.c ****     if (NextNode != _free_node) {
 394               	.LM34:
 395 0144 AC17      		cp r26,r28
 396 0146 BD07      		cpc r27,r29
 397 0148 01F0      		breq .L18
 121:../../../nano-RK/src/kernel/source/nrk_task.c ****       // Insert  in middle
 122:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 123:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Prev = NextNode->Prev;
 399               	.LM35:
 400 014a 9283      		std Z+2,r25
 401 014c 8183      		std Z+1,r24
 124:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Next = NextNode;
 403               	.LM36:
 404 014e B483      		std Z+4,r27
 405 0150 A383      		std Z+3,r26
 125:../../../nano-RK/src/kernel/source/nrk_task.c ****       (NextNode->Prev)->Next = CurNode;
 407               	.LM37:
 408 0152 1196      		adiw r26,1
 409 0154 CD91      		ld r28,X+
 410 0156 DC91      		ld r29,X
 411 0158 1297      		sbiw r26,1+1
 412 015a FC83      		std Y+4,r31
 413 015c EB83      		std Y+3,r30
 414 015e 00C0      		rjmp .L21
 415               	.L18:
 126:../../../nano-RK/src/kernel/source/nrk_task.c ****       NextNode->Prev = CurNode;
 127:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 128:../../../nano-RK/src/kernel/source/nrk_task.c ****     else {
 129:../../../nano-RK/src/kernel/source/nrk_task.c ****       //insert at end
 130:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Next = NULL;
 417               	.LM38:
 418 0160 1482      		std Z+4,__zero_reg__
 419 0162 1382      		std Z+3,__zero_reg__
 131:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode->Prev = _free_node->Prev;
 421               	.LM39:
 422 0164 9283      		std Z+2,r25
 423 0166 8183      		std Z+1,r24
 424               	.L21:
 132:../../../nano-RK/src/kernel/source/nrk_task.c ****       _free_node->Prev = CurNode;
 426               	.LM40:
 427 0168 1296      		adiw r26,1+1
 428 016a FC93      		st X,r31
 429 016c EE93      		st -X,r30
 430 016e 1197      		sbiw r26,1
 431               	.L19:
 432               	/* epilogue start */
 133:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 134:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 135:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 136:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 137:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 434               	.LM41:
 435 0170 DF91      		pop r29
 436 0172 CF91      		pop r28
 437 0174 1F91      		pop r17
 438 0176 0F91      		pop r16
 439 0178 FF90      		pop r15
 440 017a EF90      		pop r14
 441 017c DF90      		pop r13
 442 017e 0895      		ret
 447               	.Lscope3:
 449               		.stabd	78,0,0
 452               	.global	nrk_rem_from_readyQ
 454               	nrk_rem_from_readyQ:
 455               		.stabd	46,0,0
 138:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 139:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 140:../../../nano-RK/src/kernel/source/nrk_task.c **** void nrk_rem_from_readyQ (int8_t task_ID)
 141:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 457               	.LM42:
 458               	.LFBB4:
 459 0180 CF93      		push r28
 460 0182 DF93      		push r29
 461               	/* prologue: function */
 462               	/* frame size = 0 */
 142:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 143:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_queue *CurNode;
 144:../../../nano-RK/src/kernel/source/nrk_task.c **** //      nrk_queue       *tempNode;
 145:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 146:../../../nano-RK/src/kernel/source/nrk_task.c **** //return;
 147:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 148:../../../nano-RK/src/kernel/source/nrk_task.c ****   /*CurNode = _head_node;
 149:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 150:../../../nano-RK/src/kernel/source/nrk_task.c ****      _head_node = _head_node->Next;
 151:../../../nano-RK/src/kernel/source/nrk_task.c ****      _head_node->Prev = NULL;
 152:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 153:../../../nano-RK/src/kernel/source/nrk_task.c ****      if (_free_node == NULL)
 154:../../../nano-RK/src/kernel/source/nrk_task.c ****      {
 155:../../../nano-RK/src/kernel/source/nrk_task.c ****      tempNode = _head_node;
 156:../../../nano-RK/src/kernel/source/nrk_task.c ****      while (tempNode->Next!=NULL) tempNode=tempNode->Next;
 157:../../../nano-RK/src/kernel/source/nrk_task.c ****      CurNode->Next = NULL;
 158:../../../nano-RK/src/kernel/source/nrk_task.c ****      CurNode->Prev = tempNode;
 159:../../../nano-RK/src/kernel/source/nrk_task.c ****      tempNode->Next = CurNode;
 160:../../../nano-RK/src/kernel/source/nrk_task.c ****      _free_node = CurNode;
 161:../../../nano-RK/src/kernel/source/nrk_task.c ****      }
 162:../../../nano-RK/src/kernel/source/nrk_task.c ****      else
 163:../../../nano-RK/src/kernel/source/nrk_task.c ****      {
 164:../../../nano-RK/src/kernel/source/nrk_task.c ****      CurNode->Next = _free_node;
 165:../../../nano-RK/src/kernel/source/nrk_task.c ****      _free_node->Prev = CurNode;
 166:../../../nano-RK/src/kernel/source/nrk_task.c ****      _free_node = CurNode;
 167:../../../nano-RK/src/kernel/source/nrk_task.c ****      }
 168:../../../nano-RK/src/kernel/source/nrk_task.c ****    */
 169:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 170:../../../nano-RK/src/kernel/source/nrk_task.c **** //      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);
 171:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 172:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (_head_node == NULL)
 464               	.LM43:
 465 0184 E091 0000 		lds r30,_head_node
 466 0188 F091 0000 		lds r31,(_head_node)+1
 467 018c 3097      		sbiw r30,0
 468 018e 01F4      		brne .+2
 469 0190 00C0      		rjmp .L31
 173:../../../nano-RK/src/kernel/source/nrk_task.c ****     return;
 174:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 175:../../../nano-RK/src/kernel/source/nrk_task.c ****   CurNode = _head_node;
 176:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 177:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (_head_node->task_ID == task_ID) {
 471               	.LM44:
 472 0192 482F      		mov r20,r24
 473 0194 5527      		clr r21
 474 0196 47FD      		sbrc r20,7
 475 0198 5095      		com r21
 476 019a 8081      		ld r24,Z
 477 019c 90E0      		ldi r25,lo8(0)
 478 019e 8417      		cp r24,r20
 479 01a0 9507      		cpc r25,r21
 480 01a2 01F4      		brne .L32
 178:../../../nano-RK/src/kernel/source/nrk_task.c ****     //REmove from start
 179:../../../nano-RK/src/kernel/source/nrk_task.c ****     _head_node = _head_node->Next;
 482               	.LM45:
 483 01a4 A381      		ldd r26,Z+3
 484 01a6 B481      		ldd r27,Z+4
 485 01a8 B093 0000 		sts (_head_node)+1,r27
 486 01ac A093 0000 		sts _head_node,r26
 180:../../../nano-RK/src/kernel/source/nrk_task.c ****     _head_node->Prev = NULL;
 488               	.LM46:
 489 01b0 1296      		adiw r26,1+1
 490 01b2 1C92      		st X,__zero_reg__
 491 01b4 1E92      		st -X,__zero_reg__
 492 01b6 1197      		sbiw r26,1
 493 01b8 00C0      		rjmp .L25
 494               	.L26:
 181:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 182:../../../nano-RK/src/kernel/source/nrk_task.c ****   else {
 183:../../../nano-RK/src/kernel/source/nrk_task.c ****     while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 184:../../../nano-RK/src/kernel/source/nrk_task.c ****       CurNode = CurNode->Next;
 496               	.LM47:
 497 01ba E22F      		mov r30,r18
 498 01bc F92F      		mov r31,r25
 500               	.LM48:
 501 01be 3097      		sbiw r30,0
 502 01c0 01F0      		breq .L31
 503               	.L32:
 504 01c2 6081      		ld r22,Z
 505 01c4 70E0      		ldi r23,lo8(0)
 506 01c6 2381      		ldd r18,Z+3
 507 01c8 9481      		ldd r25,Z+4
 508 01ca 6417      		cp r22,r20
 509 01cc 7507      		cpc r23,r21
 510 01ce 01F4      		brne .L26
 511 01d0 00C0      		rjmp .L35
 512               	.L30:
 185:../../../nano-RK/src/kernel/source/nrk_task.c ****     if (CurNode == NULL)
 186:../../../nano-RK/src/kernel/source/nrk_task.c ****       return;
 187:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 188:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 189:../../../nano-RK/src/kernel/source/nrk_task.c ****     (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
 190:../../../nano-RK/src/kernel/source/nrk_task.c ****     if (CurNode->Next != NULL)
 191:../../../nano-RK/src/kernel/source/nrk_task.c ****       (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
 514               	.LM49:
 515 01d2 BA83      		std Y+2,r27
 516 01d4 A983      		std Y+1,r26
 517               	.L25:
 192:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 193:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 194:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 195:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 196:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 197:../../../nano-RK/src/kernel/source/nrk_task.c ****   // Add to free list
 198:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (_free_node == NULL) {
 519               	.LM50:
 520 01d6 A091 0000 		lds r26,_free_node
 521 01da B091 0000 		lds r27,(_free_node)+1
 522 01de 1097      		sbiw r26,0
 523 01e0 01F4      		brne .L28
 199:../../../nano-RK/src/kernel/source/nrk_task.c ****     _free_node = CurNode;
 525               	.LM51:
 526 01e2 F093 0000 		sts (_free_node)+1,r31
 527 01e6 E093 0000 		sts _free_node,r30
 200:../../../nano-RK/src/kernel/source/nrk_task.c ****     _free_node->Next = NULL;
 529               	.LM52:
 530 01ea 1482      		std Z+4,__zero_reg__
 531 01ec 1382      		std Z+3,__zero_reg__
 532 01ee 00C0      		rjmp .L29
 533               	.L28:
 201:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 202:../../../nano-RK/src/kernel/source/nrk_task.c ****   else {
 203:../../../nano-RK/src/kernel/source/nrk_task.c ****     CurNode->Next = _free_node;
 535               	.LM53:
 536 01f0 B483      		std Z+4,r27
 537 01f2 A383      		std Z+3,r26
 204:../../../nano-RK/src/kernel/source/nrk_task.c ****     _free_node->Prev = CurNode;
 539               	.LM54:
 540 01f4 1296      		adiw r26,1+1
 541 01f6 FC93      		st X,r31
 542 01f8 EE93      		st -X,r30
 543 01fa 1197      		sbiw r26,1
 205:../../../nano-RK/src/kernel/source/nrk_task.c ****     _free_node = CurNode;
 545               	.LM55:
 546 01fc F093 0000 		sts (_free_node)+1,r31
 547 0200 E093 0000 		sts _free_node,r30
 548               	.L29:
 206:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 207:../../../nano-RK/src/kernel/source/nrk_task.c ****   _free_node->Prev = NULL;
 550               	.LM56:
 551 0204 E091 0000 		lds r30,_free_node
 552 0208 F091 0000 		lds r31,(_free_node)+1
 553 020c 1282      		std Z+2,__zero_reg__
 554 020e 1182      		std Z+1,__zero_reg__
 555 0210 00C0      		rjmp .L31
 556               	.L35:
 558               	.LM57:
 559 0212 A181      		ldd r26,Z+1
 560 0214 B281      		ldd r27,Z+2
 561 0216 1396      		adiw r26,3
 562 0218 2C93      		st X,r18
 563 021a 1397      		sbiw r26,3
 564 021c 1496      		adiw r26,4
 565 021e 9C93      		st X,r25
 566 0220 1497      		sbiw r26,4
 568               	.LM58:
 569 0222 C381      		ldd r28,Z+3
 570 0224 D481      		ldd r29,Z+4
 571 0226 2097      		sbiw r28,0
 572 0228 01F4      		brne .L30
 573 022a 00C0      		rjmp .L25
 574               	.L31:
 575               	/* epilogue start */
 208:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 577               	.LM59:
 578 022c DF91      		pop r29
 579 022e CF91      		pop r28
 580 0230 0895      		ret
 585               	.Lscope4:
 587               		.stabd	78,0,0
 589               	.global	nrk_get_pid
 591               	nrk_get_pid:
 592               		.stabd	46,0,0
 209:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 210:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 211:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 212:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 213:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 214:../../../nano-RK/src/kernel/source/nrk_task.c **** nrk_status_t nrk_activate_task (nrk_task_type * Task)
 215:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 216:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t rtype;
 217:../../../nano-RK/src/kernel/source/nrk_task.c ****   void *topOfStackPtr;
 218:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 219:../../../nano-RK/src/kernel/source/nrk_task.c ****   topOfStackPtr =
 220:../../../nano-RK/src/kernel/source/nrk_task.c ****     (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
 221:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 222:../../../nano-RK/src/kernel/source/nrk_task.c ****   //printf("activate %d\n",(int)Task.task_ID);
 223:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (Task->FirstActivation == TRUE) {
 224:../../../nano-RK/src/kernel/source/nrk_task.c ****     rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
 225:../../../nano-RK/src/kernel/source/nrk_task.c ****     Task->FirstActivation = FALSE;
 226:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 227:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 228:../../../nano-RK/src/kernel/source/nrk_task.c ****   else {
 229:../../../nano-RK/src/kernel/source/nrk_task.c ****     if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
 230:../../../nano-RK/src/kernel/source/nrk_task.c ****       return NRK_ERROR;
 231:../../../nano-RK/src/kernel/source/nrk_task.c ****     //Re-init some parts of TCB
 232:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 233:../../../nano-RK/src/kernel/source/nrk_task.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
 234:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 235:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 236:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 237:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 238:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 239:../../../nano-RK/src/kernel/source/nrk_task.c ****   //nrk_task_TCB[Task->task_ID].task_state = READY;       
 240:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 241:../../../nano-RK/src/kernel/source/nrk_task.c ****   // Remove from suspended or waiting if extended
 242:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 243:../../../nano-RK/src/kernel/source/nrk_task.c ****   // OSSchedLock();
 244:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 245:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 246:../../../nano-RK/src/kernel/source/nrk_task.c ****   // If Idle Task then Add to ready Q
 247:../../../nano-RK/src/kernel/source/nrk_task.c ****   //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
 248:../../../nano-RK/src/kernel/source/nrk_task.c ****   //nrk_add_to_readyQ(Task->task_ID);
 249:../../../nano-RK/src/kernel/source/nrk_task.c ****   //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
 250:../../../nano-RK/src/kernel/source/nrk_task.c ****   //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
 251:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
 252:../../../nano-RK/src/kernel/source/nrk_task.c ****     nrk_task_TCB[Task->task_ID].task_state = READY;
 253:../../../nano-RK/src/kernel/source/nrk_task.c ****     nrk_add_to_readyQ (Task->task_ID);
 254:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 255:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 256:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 257:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 258:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 259:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 260:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 261:../../../nano-RK/src/kernel/source/nrk_task.c **** nrk_status_t nrk_terminate_task ()
 262:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 263:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 264:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->task_state = FINISHED;
 265:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 266:../../../nano-RK/src/kernel/source/nrk_task.c ****   // HAHA, there is NO next period...
 267:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_wait_until_next_period ();
 268:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 269:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 270:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 271:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_period ()
 272:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 273:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t timer;
 274:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 275:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_stack_check ();
 276:../../../nano-RK/src/kernel/source/nrk_task.c **** // Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
 277:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 278:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->num_periods = 1;
 279:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 280:../../../nano-RK/src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 281:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 282:../../../nano-RK/src/kernel/source/nrk_task.c **** //nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 283:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 284:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 285:../../../nano-RK/src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 286:../../../nano-RK/src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 287:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 288:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 289:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 290:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 291:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 292:../../../nano-RK/src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 293:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 294:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 295:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 296:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_n_periods (uint16_t p)
 297:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 298:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t timer;
 299:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 300:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_stack_check ();
 301:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 302:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (p == 0)
 303:../../../nano-RK/src/kernel/source/nrk_task.c ****     p = 1;
 304:../../../nano-RK/src/kernel/source/nrk_task.c **** // Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
 305:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 306:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 307:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->num_periods = p;
 308:../../../nano-RK/src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 309:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 310:../../../nano-RK/src/kernel/source/nrk_task.c **** //nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 311:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 312:../../../nano-RK/src/kernel/source/nrk_task.c **** // +2 allows for potential time conflict resolution
 313:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 314:../../../nano-RK/src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 315:../../../nano-RK/src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 316:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 317:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 318:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 319:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 320:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 321:../../../nano-RK/src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 322:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 323:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 324:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 325:../../../nano-RK/src/kernel/source/nrk_task.c **** /*
 326:../../../nano-RK/src/kernel/source/nrk_task.c ****  * nrk_wait_ticks()
 327:../../../nano-RK/src/kernel/source/nrk_task.c ****  *
 328:../../../nano-RK/src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 329:../../../nano-RK/src/kernel/source/nrk_task.c ****  * timer ticks after the curret OS tick timer.
 330:../../../nano-RK/src/kernel/source/nrk_task.c ****  *
 331:../../../nano-RK/src/kernel/source/nrk_task.c ****  */
 332:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 333:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_wait_ticks (uint16_t ticks)
 334:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 335:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t timer;
 336:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 337:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 338:../../../nano-RK/src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 339:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = ticks + timer;
 340:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 341:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 342:../../../nano-RK/src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 343:../../../nano-RK/src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 344:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 345:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 346:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 347:../../../nano-RK/src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 348:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 349:../../../nano-RK/src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 350:../../../nano-RK/src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 351:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 352:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 353:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 354:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 355:../../../nano-RK/src/kernel/source/nrk_task.c **** /*
 356:../../../nano-RK/src/kernel/source/nrk_task.c ****  * nrk_wait_until_ticks()
 357:../../../nano-RK/src/kernel/source/nrk_task.c ****  *
 358:../../../nano-RK/src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 359:../../../nano-RK/src/kernel/source/nrk_task.c ****  * timer ticks starting from when the task was swapped in.
 360:../../../nano-RK/src/kernel/source/nrk_task.c ****  * This means that this function can set periodic timing
 361:../../../nano-RK/src/kernel/source/nrk_task.c ****  * taking into account any task processing time.
 362:../../../nano-RK/src/kernel/source/nrk_task.c ****  *
 363:../../../nano-RK/src/kernel/source/nrk_task.c ****  */
 364:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 365:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_ticks (uint16_t ticks)
 366:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 367:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t timer;
 368:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 369:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 370:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = ticks;
 371:../../../nano-RK/src/kernel/source/nrk_task.c ****   // printf( "t %u\r\n",ticks );
 372:../../../nano-RK/src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 373:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 374:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 375:../../../nano-RK/src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 376:../../../nano-RK/src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 377:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 378:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 379:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 380:../../../nano-RK/src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 381:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 382:../../../nano-RK/src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 383:../../../nano-RK/src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 384:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 385:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 386:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 387:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_set_next_wakeup (nrk_time_t t)
 388:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 389:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t timer;
 390:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint16_t nw;
 391:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 392:../../../nano-RK/src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 393:../../../nano-RK/src/kernel/source/nrk_task.c ****   nw = _nrk_time_to_ticks (&t);
 394:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (nw <= TIME_PAD)
 395:../../../nano-RK/src/kernel/source/nrk_task.c ****     return NRK_ERROR;
 396:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = nw + timer;
 397:../../../nano-RK/src/kernel/source/nrk_task.c **** /*	if(timer<(254-TIME_PAD))
 398:../../../nano-RK/src/kernel/source/nrk_task.c **** 		if((timer+TIME_PAD)<=_nrk_get_next_wakeup())
 399:../../../nano-RK/src/kernel/source/nrk_task.c **** 		{
 400:../../../nano-RK/src/kernel/source/nrk_task.c **** 			timer+=TIME_PAD;
 401:../../../nano-RK/src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val=timer;
 402:../../../nano-RK/src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup(timer);
 403:../../../nano-RK/src/kernel/source/nrk_task.c **** 		}
 404:../../../nano-RK/src/kernel/source/nrk_task.c **** */
 405:../../../nano-RK/src/kernel/source/nrk_task.c **** //      nrk_cur_task_TCB->nw_flag=1;
 406:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 407:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 408:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 409:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 410:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 411:../../../nano-RK/src/kernel/source/nrk_task.c **** /*
 412:../../../nano-RK/src/kernel/source/nrk_task.c ****  * nrk_wait_until_nw()
 413:../../../nano-RK/src/kernel/source/nrk_task.c ****  *
 414:../../../nano-RK/src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 415:../../../nano-RK/src/kernel/source/nrk_task.c ****  * timer ticks starting from when the task was swapped in.
 416:../../../nano-RK/src/kernel/source/nrk_task.c ****  * This means that this function can set periodic timing
 417:../../../nano-RK/src/kernel/source/nrk_task.c ****  * taking into account any task processing time.
 418:../../../nano-RK/src/kernel/source/nrk_task.c ****  *
 419:../../../nano-RK/src/kernel/source/nrk_task.c ****  */
 420:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 421:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_nw ()
 422:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 423:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t timer;
 424:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 425:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 426:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->nw_flag = 1;
 427:../../../nano-RK/src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 428:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 429:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 430:../../../nano-RK/src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 431:../../../nano-RK/src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 432:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 433:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 434:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 435:../../../nano-RK/src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 436:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 437:../../../nano-RK/src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 438:../../../nano-RK/src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 439:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 440:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 441:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 442:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 443:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_wait (nrk_time_t t)
 444:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 445:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t timer;
 446:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint16_t nw;
 447:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 448:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_stack_check ();
 449:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 450:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 451:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 452:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->num_periods = 1;
 453:../../../nano-RK/src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 454:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 455:../../../nano-RK/src/kernel/source/nrk_task.c **** //printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
 456:../../../nano-RK/src/kernel/source/nrk_task.c ****   
 457:../../../nano-RK/src/kernel/source/nrk_task.c ****   nw = _nrk_time_to_ticks (&t);
 458:../../../nano-RK/src/kernel/source/nrk_task.c **** // printf( "t2 %u %u\r\n",timer, nw);
 459:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = nw + timer;
 460:../../../nano-RK/src/kernel/source/nrk_task.c **** //printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
 461:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 462:../../../nano-RK/src/kernel/source/nrk_task.c ****   {
 463:../../../nano-RK/src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 464:../../../nano-RK/src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 465:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 466:../../../nano-RK/src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 467:../../../nano-RK/src/kernel/source/nrk_task.c ****     }
 468:../../../nano-RK/src/kernel/source/nrk_task.c ****   } 
 469:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 470:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 471:../../../nano-RK/src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 472:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 473:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 474:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 475:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 476:../../../nano-RK/src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ()
 477:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 478:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 479:../../../nano-RK/src/kernel/source/nrk_task.c ****   //TIMSK = BM (OCIE1A);
 480:../../../nano-RK/src/kernel/source/nrk_task.c ****   do {
 481:../../../nano-RK/src/kernel/source/nrk_task.c ****     nrk_idle ();                // wait for the interrupt to tick...
 482:../../../nano-RK/src/kernel/source/nrk_task.c ****   } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
 483:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 484:../../../nano-RK/src/kernel/source/nrk_task.c ****   //TIMSK = BM (OCIE1A) | BM(OCIE0);
 485:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 486:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 487:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 488:../../../nano-RK/src/kernel/source/nrk_task.c **** int8_t nrk_wait_until (nrk_time_t t)
 489:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 490:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_time_t ct;
 491:../../../nano-RK/src/kernel/source/nrk_task.c ****   int8_t v;
 492:../../../nano-RK/src/kernel/source/nrk_task.c ****   uint8_t c;
 493:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 494:../../../nano-RK/src/kernel/source/nrk_task.c ****   //c = _nrk_os_timer_get ();
 495:../../../nano-RK/src/kernel/source/nrk_task.c ****   //do{
 496:../../../nano-RK/src/kernel/source/nrk_task.c ****   //}while(_nrk_os_timer_get()==c);
 497:../../../nano-RK/src/kernel/source/nrk_task.c ****  
 498:../../../nano-RK/src/kernel/source/nrk_task.c ****   //ttt=c+1; 
 499:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_time_get (&ct);
 500:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 501:../../../nano-RK/src/kernel/source/nrk_task.c ****   v = nrk_time_sub (&t, t, ct);
 502:../../../nano-RK/src/kernel/source/nrk_task.c ****   //nrk_time_compact_nanos(&t);
 503:../../../nano-RK/src/kernel/source/nrk_task.c ****   if (v == NRK_ERROR)
 504:../../../nano-RK/src/kernel/source/nrk_task.c ****   {
 505:../../../nano-RK/src/kernel/source/nrk_task.c ****     return NRK_ERROR;
 506:../../../nano-RK/src/kernel/source/nrk_task.c ****   }
 507:../../../nano-RK/src/kernel/source/nrk_task.c **** //if(t.secs<ct.secs) return 0;
 508:../../../nano-RK/src/kernel/source/nrk_task.c **** //if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;
 509:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 510:../../../nano-RK/src/kernel/source/nrk_task.c **** //t.secs-=ct.secs;
 511:../../../nano-RK/src/kernel/source/nrk_task.c **** //t.nano_secs-=ct.nano_secs;
 512:../../../nano-RK/src/kernel/source/nrk_task.c **** //
 513:../../../nano-RK/src/kernel/source/nrk_task.c ****   nrk_wait (t);
 514:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 515:../../../nano-RK/src/kernel/source/nrk_task.c ****   return NRK_OK;
 516:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 517:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 518:../../../nano-RK/src/kernel/source/nrk_task.c **** 
 519:../../../nano-RK/src/kernel/source/nrk_task.c **** uint8_t nrk_get_pid ()
 520:../../../nano-RK/src/kernel/source/nrk_task.c **** {
 594               	.LM60:
 595               	.LFBB5:
 596               	/* prologue: function */
 597               	/* frame size = 0 */
 599               	.LM61:
 600 0232 E091 0000 		lds r30,nrk_cur_task_TCB
 601 0236 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 521:../../../nano-RK/src/kernel/source/nrk_task.c ****   return nrk_cur_task_TCB->task_ID;
 522:../../../nano-RK/src/kernel/source/nrk_task.c **** }
 603               	.LM62:
 604 023a 8085      		ldd r24,Z+8
 605               	/* epilogue start */
 606 023c 0895      		ret
 608               	.Lscope5:
 610               		.stabd	78,0,0
 612               	.global	_nrk_wait_for_scheduler
 614               	_nrk_wait_for_scheduler:
 615               		.stabd	46,0,0
 617               	.LM63:
 618               	.LFBB6:
 619               	/* prologue: function */
 620               	/* frame size = 0 */
 621               	.L39:
 623               	.LM64:
 624 023e 0E94 0000 		call nrk_idle
 626               	.LM65:
 627 0242 E091 0000 		lds r30,nrk_cur_task_TCB
 628 0246 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 629 024a 8581      		ldd r24,Z+5
 630 024c 8823      		tst r24
 631 024e 01F4      		brne .L39
 632               	/* epilogue start */
 634               	.LM66:
 635 0250 0895      		ret
 637               	.Lscope6:
 639               		.stabd	78,0,0
 642               	.global	nrk_wait
 644               	nrk_wait:
 645               		.stabd	46,0,0
 647               	.LM67:
 648               	.LFBB7:
 649 0252 EF92      		push r14
 650 0254 FF92      		push r15
 651 0256 1F93      		push r17
 652 0258 DF93      		push r29
 653 025a CF93      		push r28
 654 025c CDB7      		in r28,__SP_L__
 655 025e DEB7      		in r29,__SP_H__
 656 0260 2897      		sbiw r28,8
 657 0262 0FB6      		in __tmp_reg__,__SREG__
 658 0264 F894      		cli
 659 0266 DEBF      		out __SP_H__,r29
 660 0268 0FBE      		out __SREG__,__tmp_reg__
 661 026a CDBF      		out __SP_L__,r28
 662               	/* prologue: function */
 663               	/* frame size = 8 */
 664 026c 2983      		std Y+1,r18
 665 026e 3A83      		std Y+2,r19
 666 0270 4B83      		std Y+3,r20
 667 0272 5C83      		std Y+4,r21
 668 0274 6D83      		std Y+5,r22
 669 0276 7E83      		std Y+6,r23
 670 0278 8F83      		std Y+7,r24
 671 027a 9887      		std Y+8,r25
 673               	.LM68:
 674 027c 0E94 0000 		call nrk_stack_check
 676               	.LM69:
 677 0280 0E94 0000 		call nrk_int_disable
 679               	.LM70:
 680 0284 E091 0000 		lds r30,nrk_cur_task_TCB
 681 0288 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 682 028c 81E0      		ldi r24,lo8(1)
 683 028e 8583      		std Z+5,r24
 685               	.LM71:
 686 0290 81E0      		ldi r24,lo8(1)
 687 0292 90E0      		ldi r25,hi8(1)
 688 0294 90A3      		std Z+32,r25
 689 0296 878F      		std Z+31,r24
 691               	.LM72:
 692 0298 0E94 0000 		call _nrk_os_timer_get
 693 029c 182F      		mov r17,r24
 695               	.LM73:
 696 029e CE01      		movw r24,r28
 697 02a0 0196      		adiw r24,1
 698 02a2 0E94 0000 		call _nrk_time_to_ticks
 700               	.LM74:
 701 02a6 E091 0000 		lds r30,nrk_cur_task_TCB
 702 02aa F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 703 02ae E12E      		mov r14,r17
 704 02b0 FF24      		clr r15
 705 02b2 8E0D      		add r24,r14
 706 02b4 9F1D      		adc r25,r15
 707 02b6 968B      		std Z+22,r25
 708 02b8 858B      		std Z+21,r24
 710               	.LM75:
 711 02ba 183F      		cpi r17,lo8(-8)
 712 02bc 00F4      		brsh .L43
 714               	.LM76:
 715 02be 0E94 0000 		call _nrk_get_next_wakeup
 716 02c2 0894      		sec
 717 02c4 E11C      		adc r14,__zero_reg__
 718 02c6 F11C      		adc r15,__zero_reg__
 719 02c8 90E0      		ldi r25,lo8(0)
 720 02ca E816      		cp r14,r24
 721 02cc F906      		cpc r15,r25
 722 02ce 04F4      		brge .L43
 724               	.LM77:
 725 02d0 812F      		mov r24,r17
 726 02d2 8E5F      		subi r24,lo8(-(2))
 728               	.LM78:
 729 02d4 8093 0000 		sts _nrk_prev_timer_val,r24
 731               	.LM79:
 732 02d8 0E94 0000 		call _nrk_set_next_wakeup
 733               	.L43:
 735               	.LM80:
 736 02dc 0E94 0000 		call nrk_int_enable
 738               	.LM81:
 739 02e0 0E94 0000 		call _nrk_wait_for_scheduler
 741               	.LM82:
 742 02e4 81E0      		ldi r24,lo8(1)
 743               	/* epilogue start */
 744 02e6 2896      		adiw r28,8
 745 02e8 0FB6      		in __tmp_reg__,__SREG__
 746 02ea F894      		cli
 747 02ec DEBF      		out __SP_H__,r29
 748 02ee 0FBE      		out __SREG__,__tmp_reg__
 749 02f0 CDBF      		out __SP_L__,r28
 750 02f2 CF91      		pop r28
 751 02f4 DF91      		pop r29
 752 02f6 1F91      		pop r17
 753 02f8 FF90      		pop r15
 754 02fa EF90      		pop r14
 755 02fc 0895      		ret
 760               	.Lscope7:
 762               		.stabd	78,0,0
 765               	.global	nrk_wait_until
 767               	nrk_wait_until:
 768               		.stabd	46,0,0
 770               	.LM83:
 771               	.LFBB8:
 772 02fe 8F92      		push r8
 773 0300 9F92      		push r9
 774 0302 AF92      		push r10
 775 0304 BF92      		push r11
 776 0306 CF92      		push r12
 777 0308 DF92      		push r13
 778 030a EF92      		push r14
 779 030c FF92      		push r15
 780 030e 0F93      		push r16
 781 0310 1F93      		push r17
 782 0312 DF93      		push r29
 783 0314 CF93      		push r28
 784 0316 CDB7      		in r28,__SP_L__
 785 0318 DEB7      		in r29,__SP_H__
 786 031a 6097      		sbiw r28,16
 787 031c 0FB6      		in __tmp_reg__,__SREG__
 788 031e F894      		cli
 789 0320 DEBF      		out __SP_H__,r29
 790 0322 0FBE      		out __SREG__,__tmp_reg__
 791 0324 CDBF      		out __SP_L__,r28
 792               	/* prologue: function */
 793               	/* frame size = 16 */
 794 0326 2987      		std Y+9,r18
 795 0328 3A87      		std Y+10,r19
 796 032a 4B87      		std Y+11,r20
 797 032c 5C87      		std Y+12,r21
 798 032e 6D87      		std Y+13,r22
 799 0330 7E87      		std Y+14,r23
 800 0332 8F87      		std Y+15,r24
 801 0334 988B      		std Y+16,r25
 803               	.LM84:
 804 0336 CE01      		movw r24,r28
 805 0338 0196      		adiw r24,1
 806 033a 0E94 0000 		call nrk_time_get
 808               	.LM85:
 809 033e CE01      		movw r24,r28
 810 0340 0996      		adiw r24,9
 811 0342 0985      		ldd r16,Y+9
 812 0344 1A85      		ldd r17,Y+10
 813 0346 2B85      		ldd r18,Y+11
 814 0348 3C85      		ldd r19,Y+12
 815 034a 4D85      		ldd r20,Y+13
 816 034c 5E85      		ldd r21,Y+14
 817 034e 6F85      		ldd r22,Y+15
 818 0350 7889      		ldd r23,Y+16
 819 0352 8980      		ldd r8,Y+1
 820 0354 9A80      		ldd r9,Y+2
 821 0356 AB80      		ldd r10,Y+3
 822 0358 BC80      		ldd r11,Y+4
 823 035a CD80      		ldd r12,Y+5
 824 035c DE80      		ldd r13,Y+6
 825 035e EF80      		ldd r14,Y+7
 826 0360 F884      		ldd r15,Y+8
 827 0362 0E94 0000 		call nrk_time_sub
 829               	.LM86:
 830 0366 8F3F      		cpi r24,lo8(-1)
 831 0368 01F0      		breq .L47
 833               	.LM87:
 834 036a 2985      		ldd r18,Y+9
 835 036c 3A85      		ldd r19,Y+10
 836 036e 4B85      		ldd r20,Y+11
 837 0370 5C85      		ldd r21,Y+12
 838 0372 6D85      		ldd r22,Y+13
 839 0374 7E85      		ldd r23,Y+14
 840 0376 8F85      		ldd r24,Y+15
 841 0378 9889      		ldd r25,Y+16
 842 037a 0E94 0000 		call nrk_wait
 843 037e 81E0      		ldi r24,lo8(1)
 844               	.L47:
 845               	/* epilogue start */
 847               	.LM88:
 848 0380 6096      		adiw r28,16
 849 0382 0FB6      		in __tmp_reg__,__SREG__
 850 0384 F894      		cli
 851 0386 DEBF      		out __SP_H__,r29
 852 0388 0FBE      		out __SREG__,__tmp_reg__
 853 038a CDBF      		out __SP_L__,r28
 854 038c CF91      		pop r28
 855 038e DF91      		pop r29
 856 0390 1F91      		pop r17
 857 0392 0F91      		pop r16
 858 0394 FF90      		pop r15
 859 0396 EF90      		pop r14
 860 0398 DF90      		pop r13
 861 039a CF90      		pop r12
 862 039c BF90      		pop r11
 863 039e AF90      		pop r10
 864 03a0 9F90      		pop r9
 865 03a2 8F90      		pop r8
 866 03a4 0895      		ret
 871               	.Lscope8:
 873               		.stabd	78,0,0
 875               	.global	nrk_wait_until_nw
 877               	nrk_wait_until_nw:
 878               		.stabd	46,0,0
 880               	.LM89:
 881               	.LFBB9:
 882 03a6 1F93      		push r17
 883               	/* prologue: function */
 884               	/* frame size = 0 */
 886               	.LM90:
 887 03a8 0E94 0000 		call nrk_int_disable
 889               	.LM91:
 890 03ac E091 0000 		lds r30,nrk_cur_task_TCB
 891 03b0 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 892 03b4 81E0      		ldi r24,lo8(1)
 893 03b6 8583      		std Z+5,r24
 895               	.LM92:
 896 03b8 8683      		std Z+6,r24
 898               	.LM93:
 899 03ba 0E94 0000 		call _nrk_os_timer_get
 900 03be 182F      		mov r17,r24
 902               	.LM94:
 903 03c0 883F      		cpi r24,lo8(-8)
 904 03c2 00F4      		brsh .L50
 906               	.LM95:
 907 03c4 0E94 0000 		call _nrk_get_next_wakeup
 908 03c8 212F      		mov r18,r17
 909 03ca 30E0      		ldi r19,lo8(0)
 910 03cc 2F5F      		subi r18,lo8(-(1))
 911 03ce 3F4F      		sbci r19,hi8(-(1))
 912 03d0 90E0      		ldi r25,lo8(0)
 913 03d2 2817      		cp r18,r24
 914 03d4 3907      		cpc r19,r25
 915 03d6 04F4      		brge .L50
 917               	.LM96:
 918 03d8 812F      		mov r24,r17
 919 03da 8E5F      		subi r24,lo8(-(2))
 921               	.LM97:
 922 03dc 8093 0000 		sts _nrk_prev_timer_val,r24
 924               	.LM98:
 925 03e0 0E94 0000 		call _nrk_set_next_wakeup
 926               	.L50:
 928               	.LM99:
 929 03e4 0E94 0000 		call nrk_int_enable
 931               	.LM100:
 932 03e8 0E94 0000 		call _nrk_wait_for_scheduler
 934               	.LM101:
 935 03ec 81E0      		ldi r24,lo8(1)
 936               	/* epilogue start */
 937 03ee 1F91      		pop r17
 938 03f0 0895      		ret
 943               	.Lscope9:
 945               		.stabd	78,0,0
 948               	.global	nrk_set_next_wakeup
 950               	nrk_set_next_wakeup:
 951               		.stabd	46,0,0
 953               	.LM102:
 954               	.LFBB10:
 955 03f2 1F93      		push r17
 956 03f4 DF93      		push r29
 957 03f6 CF93      		push r28
 958 03f8 CDB7      		in r28,__SP_L__
 959 03fa DEB7      		in r29,__SP_H__
 960 03fc 2897      		sbiw r28,8
 961 03fe 0FB6      		in __tmp_reg__,__SREG__
 962 0400 F894      		cli
 963 0402 DEBF      		out __SP_H__,r29
 964 0404 0FBE      		out __SREG__,__tmp_reg__
 965 0406 CDBF      		out __SP_L__,r28
 966               	/* prologue: function */
 967               	/* frame size = 8 */
 968 0408 2983      		std Y+1,r18
 969 040a 3A83      		std Y+2,r19
 970 040c 4B83      		std Y+3,r20
 971 040e 5C83      		std Y+4,r21
 972 0410 6D83      		std Y+5,r22
 973 0412 7E83      		std Y+6,r23
 974 0414 8F83      		std Y+7,r24
 975 0416 9887      		std Y+8,r25
 977               	.LM103:
 978 0418 0E94 0000 		call nrk_int_disable
 980               	.LM104:
 981 041c 0E94 0000 		call _nrk_os_timer_get
 982 0420 182F      		mov r17,r24
 984               	.LM105:
 985 0422 CE01      		movw r24,r28
 986 0424 0196      		adiw r24,1
 987 0426 0E94 0000 		call _nrk_time_to_ticks
 989               	.LM106:
 990 042a 8330      		cpi r24,3
 991 042c 9105      		cpc r25,__zero_reg__
 992 042e 00F4      		brsh .L53
 993 0430 8FEF      		ldi r24,lo8(-1)
 994 0432 00C0      		rjmp .L54
 995               	.L53:
 997               	.LM107:
 998 0434 E091 0000 		lds r30,nrk_cur_task_TCB
 999 0438 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1000 043c 810F      		add r24,r17
 1001 043e 911D      		adc r25,__zero_reg__
 1002 0440 968B      		std Z+22,r25
 1003 0442 858B      		std Z+21,r24
 1005               	.LM108:
 1006 0444 0E94 0000 		call nrk_int_enable
 1007 0448 81E0      		ldi r24,lo8(1)
 1008               	.L54:
 1009               	/* epilogue start */
 1011               	.LM109:
 1012 044a 2896      		adiw r28,8
 1013 044c 0FB6      		in __tmp_reg__,__SREG__
 1014 044e F894      		cli
 1015 0450 DEBF      		out __SP_H__,r29
 1016 0452 0FBE      		out __SREG__,__tmp_reg__
 1017 0454 CDBF      		out __SP_L__,r28
 1018 0456 CF91      		pop r28
 1019 0458 DF91      		pop r29
 1020 045a 1F91      		pop r17
 1021 045c 0895      		ret
 1027               	.Lscope10:
 1029               		.stabd	78,0,0
 1032               	.global	nrk_wait_until_ticks
 1034               	nrk_wait_until_ticks:
 1035               		.stabd	46,0,0
 1037               	.LM110:
 1038               	.LFBB11:
 1039 045e 1F93      		push r17
 1040 0460 CF93      		push r28
 1041 0462 DF93      		push r29
 1042               	/* prologue: function */
 1043               	/* frame size = 0 */
 1044 0464 EC01      		movw r28,r24
 1046               	.LM111:
 1047 0466 0E94 0000 		call nrk_int_disable
 1049               	.LM112:
 1050 046a E091 0000 		lds r30,nrk_cur_task_TCB
 1051 046e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1052 0472 81E0      		ldi r24,lo8(1)
 1053 0474 8583      		std Z+5,r24
 1055               	.LM113:
 1056 0476 D68B      		std Z+22,r29
 1057 0478 C58B      		std Z+21,r28
 1059               	.LM114:
 1060 047a 0E94 0000 		call _nrk_os_timer_get
 1061 047e 182F      		mov r17,r24
 1063               	.LM115:
 1064 0480 883F      		cpi r24,lo8(-8)
 1065 0482 00F4      		brsh .L57
 1067               	.LM116:
 1068 0484 0E94 0000 		call _nrk_get_next_wakeup
 1069 0488 212F      		mov r18,r17
 1070 048a 30E0      		ldi r19,lo8(0)
 1071 048c 2F5F      		subi r18,lo8(-(1))
 1072 048e 3F4F      		sbci r19,hi8(-(1))
 1073 0490 90E0      		ldi r25,lo8(0)
 1074 0492 2817      		cp r18,r24
 1075 0494 3907      		cpc r19,r25
 1076 0496 04F4      		brge .L57
 1078               	.LM117:
 1079 0498 812F      		mov r24,r17
 1080 049a 8E5F      		subi r24,lo8(-(2))
 1082               	.LM118:
 1083 049c 8093 0000 		sts _nrk_prev_timer_val,r24
 1085               	.LM119:
 1086 04a0 0E94 0000 		call _nrk_set_next_wakeup
 1087               	.L57:
 1089               	.LM120:
 1090 04a4 0E94 0000 		call nrk_int_enable
 1092               	.LM121:
 1093 04a8 0E94 0000 		call _nrk_wait_for_scheduler
 1095               	.LM122:
 1096 04ac 81E0      		ldi r24,lo8(1)
 1097               	/* epilogue start */
 1098 04ae DF91      		pop r29
 1099 04b0 CF91      		pop r28
 1100 04b2 1F91      		pop r17
 1101 04b4 0895      		ret
 1106               	.Lscope11:
 1108               		.stabd	78,0,0
 1111               	.global	nrk_wait_ticks
 1113               	nrk_wait_ticks:
 1114               		.stabd	46,0,0
 1116               	.LM123:
 1117               	.LFBB12:
 1118 04b6 EF92      		push r14
 1119 04b8 FF92      		push r15
 1120 04ba 1F93      		push r17
 1121 04bc CF93      		push r28
 1122 04be DF93      		push r29
 1123               	/* prologue: function */
 1124               	/* frame size = 0 */
 1125 04c0 7C01      		movw r14,r24
 1127               	.LM124:
 1128 04c2 0E94 0000 		call nrk_int_disable
 1130               	.LM125:
 1131 04c6 E091 0000 		lds r30,nrk_cur_task_TCB
 1132 04ca F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1133 04ce 81E0      		ldi r24,lo8(1)
 1134 04d0 8583      		std Z+5,r24
 1136               	.LM126:
 1137 04d2 0E94 0000 		call _nrk_os_timer_get
 1138 04d6 182F      		mov r17,r24
 1140               	.LM127:
 1141 04d8 E091 0000 		lds r30,nrk_cur_task_TCB
 1142 04dc F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1143 04e0 C82F      		mov r28,r24
 1144 04e2 D0E0      		ldi r29,lo8(0)
 1145 04e4 EC0E      		add r14,r28
 1146 04e6 FD1E      		adc r15,r29
 1147 04e8 F68A      		std Z+22,r15
 1148 04ea E58A      		std Z+21,r14
 1150               	.LM128:
 1151 04ec 883F      		cpi r24,lo8(-8)
 1152 04ee 00F4      		brsh .L60
 1154               	.LM129:
 1155 04f0 0E94 0000 		call _nrk_get_next_wakeup
 1156 04f4 2196      		adiw r28,1
 1157 04f6 90E0      		ldi r25,lo8(0)
 1158 04f8 C817      		cp r28,r24
 1159 04fa D907      		cpc r29,r25
 1160 04fc 04F4      		brge .L60
 1162               	.LM130:
 1163 04fe 812F      		mov r24,r17
 1164 0500 8E5F      		subi r24,lo8(-(2))
 1166               	.LM131:
 1167 0502 8093 0000 		sts _nrk_prev_timer_val,r24
 1169               	.LM132:
 1170 0506 0E94 0000 		call _nrk_set_next_wakeup
 1171               	.L60:
 1173               	.LM133:
 1174 050a 0E94 0000 		call nrk_int_enable
 1176               	.LM134:
 1177 050e 0E94 0000 		call _nrk_wait_for_scheduler
 1179               	.LM135:
 1180 0512 81E0      		ldi r24,lo8(1)
 1181               	/* epilogue start */
 1182 0514 DF91      		pop r29
 1183 0516 CF91      		pop r28
 1184 0518 1F91      		pop r17
 1185 051a FF90      		pop r15
 1186 051c EF90      		pop r14
 1187 051e 0895      		ret
 1192               	.Lscope12:
 1194               		.stabd	78,0,0
 1197               	.global	nrk_wait_until_next_n_periods
 1199               	nrk_wait_until_next_n_periods:
 1200               		.stabd	46,0,0
 1202               	.LM136:
 1203               	.LFBB13:
 1204 0520 1F93      		push r17
 1205 0522 CF93      		push r28
 1206 0524 DF93      		push r29
 1207               	/* prologue: function */
 1208               	/* frame size = 0 */
 1209 0526 EC01      		movw r28,r24
 1211               	.LM137:
 1212 0528 0E94 0000 		call nrk_stack_check
 1214               	.LM138:
 1215 052c 2097      		sbiw r28,0
 1216 052e 01F4      		brne .L63
 1217 0530 C1E0      		ldi r28,lo8(1)
 1218 0532 D0E0      		ldi r29,hi8(1)
 1219               	.L63:
 1221               	.LM139:
 1222 0534 0E94 0000 		call nrk_int_disable
 1224               	.LM140:
 1225 0538 E091 0000 		lds r30,nrk_cur_task_TCB
 1226 053c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1227 0540 81E0      		ldi r24,lo8(1)
 1228 0542 8583      		std Z+5,r24
 1230               	.LM141:
 1231 0544 D0A3      		std Z+32,r29
 1232 0546 C78F      		std Z+31,r28
 1234               	.LM142:
 1235 0548 0E94 0000 		call _nrk_os_timer_get
 1236 054c 182F      		mov r17,r24
 1238               	.LM143:
 1239 054e 883F      		cpi r24,lo8(-8)
 1240 0550 00F4      		brsh .L64
 1242               	.LM144:
 1243 0552 0E94 0000 		call _nrk_get_next_wakeup
 1244 0556 212F      		mov r18,r17
 1245 0558 30E0      		ldi r19,lo8(0)
 1246 055a 2F5F      		subi r18,lo8(-(1))
 1247 055c 3F4F      		sbci r19,hi8(-(1))
 1248 055e 90E0      		ldi r25,lo8(0)
 1249 0560 2817      		cp r18,r24
 1250 0562 3907      		cpc r19,r25
 1251 0564 04F4      		brge .L64
 1253               	.LM145:
 1254 0566 812F      		mov r24,r17
 1255 0568 8E5F      		subi r24,lo8(-(2))
 1257               	.LM146:
 1258 056a 8093 0000 		sts _nrk_prev_timer_val,r24
 1260               	.LM147:
 1261 056e 0E94 0000 		call _nrk_set_next_wakeup
 1262               	.L64:
 1264               	.LM148:
 1265 0572 0E94 0000 		call nrk_int_enable
 1267               	.LM149:
 1268 0576 0E94 0000 		call _nrk_wait_for_scheduler
 1270               	.LM150:
 1271 057a 81E0      		ldi r24,lo8(1)
 1272               	/* epilogue start */
 1273 057c DF91      		pop r29
 1274 057e CF91      		pop r28
 1275 0580 1F91      		pop r17
 1276 0582 0895      		ret
 1281               	.Lscope13:
 1283               		.stabd	78,0,0
 1285               	.global	nrk_wait_until_next_period
 1287               	nrk_wait_until_next_period:
 1288               		.stabd	46,0,0
 1290               	.LM151:
 1291               	.LFBB14:
 1292 0584 1F93      		push r17
 1293               	/* prologue: function */
 1294               	/* frame size = 0 */
 1296               	.LM152:
 1297 0586 0E94 0000 		call nrk_stack_check
 1299               	.LM153:
 1300 058a 0E94 0000 		call nrk_int_disable
 1302               	.LM154:
 1303 058e E091 0000 		lds r30,nrk_cur_task_TCB
 1304 0592 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1305 0596 81E0      		ldi r24,lo8(1)
 1306 0598 90E0      		ldi r25,hi8(1)
 1307 059a 90A3      		std Z+32,r25
 1308 059c 878F      		std Z+31,r24
 1310               	.LM155:
 1311 059e 81E0      		ldi r24,lo8(1)
 1312 05a0 8583      		std Z+5,r24
 1314               	.LM156:
 1315 05a2 0E94 0000 		call _nrk_os_timer_get
 1316 05a6 182F      		mov r17,r24
 1318               	.LM157:
 1319 05a8 883F      		cpi r24,lo8(-8)
 1320 05aa 00F4      		brsh .L67
 1322               	.LM158:
 1323 05ac 0E94 0000 		call _nrk_get_next_wakeup
 1324 05b0 212F      		mov r18,r17
 1325 05b2 30E0      		ldi r19,lo8(0)
 1326 05b4 2F5F      		subi r18,lo8(-(1))
 1327 05b6 3F4F      		sbci r19,hi8(-(1))
 1328 05b8 90E0      		ldi r25,lo8(0)
 1329 05ba 2817      		cp r18,r24
 1330 05bc 3907      		cpc r19,r25
 1331 05be 04F4      		brge .L67
 1333               	.LM159:
 1334 05c0 812F      		mov r24,r17
 1335 05c2 8E5F      		subi r24,lo8(-(2))
 1337               	.LM160:
 1338 05c4 8093 0000 		sts _nrk_prev_timer_val,r24
 1340               	.LM161:
 1341 05c8 0E94 0000 		call _nrk_set_next_wakeup
 1342               	.L67:
 1344               	.LM162:
 1345 05cc 0E94 0000 		call nrk_int_enable
 1347               	.LM163:
 1348 05d0 0E94 0000 		call _nrk_wait_for_scheduler
 1350               	.LM164:
 1351 05d4 81E0      		ldi r24,lo8(1)
 1352               	/* epilogue start */
 1353 05d6 1F91      		pop r17
 1354 05d8 0895      		ret
 1359               	.Lscope14:
 1361               		.stabd	78,0,0
 1363               	.global	nrk_terminate_task
 1365               	nrk_terminate_task:
 1366               		.stabd	46,0,0
 1368               	.LM165:
 1369               	.LFBB15:
 1370               	/* prologue: function */
 1371               	/* frame size = 0 */
 1373               	.LM166:
 1374 05da E091 0000 		lds r30,nrk_cur_task_TCB
 1375 05de F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1376 05e2 8085      		ldd r24,Z+8
 1377 05e4 0E94 0000 		call nrk_rem_from_readyQ
 1379               	.LM167:
 1380 05e8 E091 0000 		lds r30,nrk_cur_task_TCB
 1381 05ec F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1382 05f0 84E0      		ldi r24,lo8(4)
 1383 05f2 8187      		std Z+9,r24
 1385               	.LM168:
 1386 05f4 0E94 0000 		call nrk_wait_until_next_period
 1388               	.LM169:
 1389 05f8 81E0      		ldi r24,lo8(1)
 1390               	/* epilogue start */
 1391 05fa 0895      		ret
 1393               	.Lscope15:
 1395               		.stabd	78,0,0
 1398               	.global	nrk_activate_task
 1400               	nrk_activate_task:
 1401               		.stabd	46,0,0
 1403               	.LM170:
 1404               	.LFBB16:
 1405 05fc EF92      		push r14
 1406 05fe FF92      		push r15
 1407 0600 0F93      		push r16
 1408 0602 1F93      		push r17
 1409 0604 CF93      		push r28
 1410 0606 DF93      		push r29
 1411               	/* prologue: function */
 1412               	/* frame size = 0 */
 1413 0608 EC01      		movw r28,r24
 1415               	.LM171:
 1416 060a 6981      		ldd r22,Y+1
 1417 060c 7A81      		ldd r23,Y+2
 1418 060e 4B81      		ldd r20,Y+3
 1419 0610 5C81      		ldd r21,Y+4
 1420 0612 8D81      		ldd r24,Y+5
 1421 0614 9E81      		ldd r25,Y+6
 1422 0616 0E94 0000 		call nrk_task_stk_init
 1423 061a BC01      		movw r22,r24
 1425               	.LM172:
 1426 061c 8F81      		ldd r24,Y+7
 1427 061e 8823      		tst r24
 1428 0620 01F0      		breq .L72
 1430               	.LM173:
 1431 0622 4B81      		ldd r20,Y+3
 1432 0624 5C81      		ldd r21,Y+4
 1433 0626 CE01      		movw r24,r28
 1434 0628 20E0      		ldi r18,lo8(0)
 1435 062a 30E0      		ldi r19,hi8(0)
 1436 062c 00E0      		ldi r16,lo8(0)
 1437 062e 10E0      		ldi r17,hi8(0)
 1438 0630 EE24      		clr r14
 1439 0632 FF24      		clr r15
 1440 0634 0E94 0000 		call nrk_TCB_init
 1442               	.LM174:
 1443 0638 1F82      		std Y+7,__zero_reg__
 1444 063a 00C0      		rjmp .L73
 1445               	.L72:
 1447               	.LM175:
 1448 063c 8881      		ld r24,Y
 1449 063e 9927      		clr r25
 1450 0640 87FD      		sbrc r24,7
 1451 0642 9095      		com r25
 1452 0644 FC01      		movw r30,r24
 1453 0646 25E0      		ldi r18,5
 1454 0648 EE0F      	1:	lsl r30
 1455 064a FF1F      		rol r31
 1456 064c 2A95      		dec r18
 1457 064e 01F4      		brne 1b
 1458 0650 E80F      		add r30,r24
 1459 0652 F91F      		adc r31,r25
 1460 0654 E050      		subi r30,lo8(-(nrk_task_TCB))
 1461 0656 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1462 0658 8185      		ldd r24,Z+9
 1463 065a 8330      		cpi r24,lo8(3)
 1464 065c 01F0      		breq .L74
 1465 065e 8FEF      		ldi r24,lo8(-1)
 1466 0660 00C0      		rjmp .L75
 1467               	.L74:
 1469               	.LM176:
 1470 0662 7183      		std Z+1,r23
 1471 0664 6083      		st Z,r22
 1472               	.L73:
 1474               	.LM177:
 1475 0666 8881      		ld r24,Y
 1476 0668 282F      		mov r18,r24
 1477 066a 3327      		clr r19
 1478 066c 27FD      		sbrc r18,7
 1479 066e 3095      		com r19
 1480 0670 F901      		movw r30,r18
 1481 0672 05E0      		ldi r16,5
 1482 0674 EE0F      	1:	lsl r30
 1483 0676 FF1F      		rol r31
 1484 0678 0A95      		dec r16
 1485 067a 01F4      		brne 1b
 1486 067c E20F      		add r30,r18
 1487 067e F31F      		adc r31,r19
 1488 0680 E050      		subi r30,lo8(-(nrk_task_TCB))
 1489 0682 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1490 0684 2589      		ldd r18,Z+21
 1491 0686 3689      		ldd r19,Z+22
 1492 0688 2115      		cp r18,__zero_reg__
 1493 068a 3105      		cpc r19,__zero_reg__
 1494 068c 01F4      		brne .L78
 1496               	.LM178:
 1497 068e 92E0      		ldi r25,lo8(2)
 1498 0690 9187      		std Z+9,r25
 1500               	.LM179:
 1501 0692 0E94 0000 		call nrk_add_to_readyQ
 1502               	.L78:
 1503 0696 81E0      		ldi r24,lo8(1)
 1504               	.L75:
 1505               	/* epilogue start */
 1507               	.LM180:
 1508 0698 DF91      		pop r29
 1509 069a CF91      		pop r28
 1510 069c 1F91      		pop r17
 1511 069e 0F91      		pop r16
 1512 06a0 FF90      		pop r15
 1513 06a2 EF90      		pop r14
 1514 06a4 0895      		ret
 1519               	.Lscope16:
 1521               		.stabd	78,0,0
 1522               		.comm _nrk_signal_list,4,1
 1523               		.comm nrk_idle_task_stk,128,1
 1524               		.comm nrk_kernel_stk_ptr,2,1
 1525               		.comm _nrk_prev_timer_val,1,1
 1526               		.comm _nrk_time_trigger,1,1
 1527               		.comm app_timer0_callback,2,1
 1528               		.comm app_timer0_prescale,1,1
 1529               		.comm _nrk_cpu_state,1,1
 1530               		.comm next_next_wakeup,2,1
 1531               		.comm error_task,1,1
 1532               		.comm error_num,1,1
 1545               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_task.c
     /tmp/ccCprxYg.s:2      *ABS*:0000003f __SREG__
     /tmp/ccCprxYg.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccCprxYg.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccCprxYg.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccCprxYg.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccCprxYg.s:130    .text:00000000 nrk_get_high_ready_task_ID
     /tmp/ccCprxYg.s:153    .text:0000000c nrk_print_readyQ
     /tmp/ccCprxYg.s:193    .text:00000022 nrk_add_to_readyQ
     /tmp/ccCprxYg.s:454    .text:00000180 nrk_rem_from_readyQ
     /tmp/ccCprxYg.s:591    .text:00000232 nrk_get_pid
     /tmp/ccCprxYg.s:614    .text:0000023e _nrk_wait_for_scheduler
     /tmp/ccCprxYg.s:644    .text:00000252 nrk_wait
                            *COM*:00000001 _nrk_prev_timer_val
     /tmp/ccCprxYg.s:767    .text:000002fe nrk_wait_until
     /tmp/ccCprxYg.s:877    .text:000003a6 nrk_wait_until_nw
     /tmp/ccCprxYg.s:950    .text:000003f2 nrk_set_next_wakeup
     /tmp/ccCprxYg.s:1034   .text:0000045e nrk_wait_until_ticks
     /tmp/ccCprxYg.s:1113   .text:000004b6 nrk_wait_ticks
     /tmp/ccCprxYg.s:1199   .text:00000520 nrk_wait_until_next_n_periods
     /tmp/ccCprxYg.s:1287   .text:00000584 nrk_wait_until_next_period
     /tmp/ccCprxYg.s:1365   .text:000005da nrk_terminate_task
     /tmp/ccCprxYg.s:1400   .text:000005fc nrk_activate_task
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_head_node
_free_node
nrk_task_TCB
nrk_cur_task_TCB
nrk_idle
nrk_stack_check
nrk_int_disable
_nrk_os_timer_get
_nrk_time_to_ticks
_nrk_get_next_wakeup
_nrk_set_next_wakeup
nrk_int_enable
nrk_time_get
nrk_time_sub
nrk_task_stk_init
nrk_TCB_init

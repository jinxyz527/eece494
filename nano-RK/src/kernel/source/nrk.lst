   1               		.file	"nrk.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 130               	.global	nrk_int_disable
 132               	nrk_int_disable:
 133               		.stabd	46,0,0
   1:../../../nano-RK/src/kernel/source/nrk.c **** /******************************************************************************
   2:../../../nano-RK/src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../nano-RK/src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../nano-RK/src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../../nano-RK/src/kernel/source/nrk.c **** *
   6:../../../nano-RK/src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../nano-RK/src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../nano-RK/src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../nano-RK/src/kernel/source/nrk.c **** *
  10:../../../nano-RK/src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../nano-RK/src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../nano-RK/src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../nano-RK/src/kernel/source/nrk.c **** *
  14:../../../nano-RK/src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../nano-RK/src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../nano-RK/src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../nano-RK/src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../../nano-RK/src/kernel/source/nrk.c **** *
  19:../../../nano-RK/src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../../nano-RK/src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../nano-RK/src/kernel/source/nrk.c **** *
  22:../../../nano-RK/src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../../nano-RK/src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../../nano-RK/src/kernel/source/nrk.c **** *  Zane Starr
  25:../../../nano-RK/src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../../nano-RK/src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../../nano-RK/src/kernel/source/nrk.c **** 
  28:../../../nano-RK/src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../../nano-RK/src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_sw_wdt.h>
  43:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  44:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  45:../../../nano-RK/src/kernel/source/nrk.c **** #include <nrk_stats.h>
  46:../../../nano-RK/src/kernel/source/nrk.c **** 
  47:../../../nano-RK/src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 135               	.LM0:
 136               	.LFBB1:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
  48:../../../nano-RK/src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 140               	.LM1:
 141               	/* #APP */
 142               	 ;  48 "../../../nano-RK/src/kernel/source/nrk.c" 1
 143 0000 F894      		cli
 144               		
 145               	 ;  0 "" 2
 146               	/* epilogue start */
  49:../../../nano-RK/src/kernel/source/nrk.c **** };
 148               	.LM2:
 149               	/* #NOAPP */
 150 0002 0895      		ret
 152               	.Lscope1:
 154               		.stabd	78,0,0
 156               	.global	nrk_int_enable
 158               	nrk_int_enable:
 159               		.stabd	46,0,0
  50:../../../nano-RK/src/kernel/source/nrk.c **** 
  51:../../../nano-RK/src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 161               	.LM3:
 162               	.LFBB2:
 163               	/* prologue: function */
 164               	/* frame size = 0 */
  52:../../../nano-RK/src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 166               	.LM4:
 167               	/* #APP */
 168               	 ;  52 "../../../nano-RK/src/kernel/source/nrk.c" 1
 169 0004 7894      		sei
 170               		
 171               	 ;  0 "" 2
 172               	/* epilogue start */
  53:../../../nano-RK/src/kernel/source/nrk.c **** };
 174               	.LM5:
 175               	/* #NOAPP */
 176 0006 0895      		ret
 178               	.Lscope2:
 180               		.stabd	78,0,0
 182               	.global	nrk_halt
 184               	nrk_halt:
 185               		.stabd	46,0,0
  54:../../../nano-RK/src/kernel/source/nrk.c **** 
  55:../../../nano-RK/src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  56:../../../nano-RK/src/kernel/source/nrk.c **** 
  57:../../../nano-RK/src/kernel/source/nrk.c **** 
  58:../../../nano-RK/src/kernel/source/nrk.c **** void nrk_halt()
  59:../../../nano-RK/src/kernel/source/nrk.c **** {
 187               	.LM6:
 188               	.LFBB3:
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	.LBB4:
 192               	.LBB5:
 194               	.LM7:
 195               	/* #APP */
 196               	 ;  48 "../../../nano-RK/src/kernel/source/nrk.c" 1
 197 0008 F894      		cli
 198               		
 199               	 ;  0 "" 2
 200               	/* #NOAPP */
 201               	.L6:
 202 000a 00C0      		rjmp .L6
 203               	.LBE5:
 204               	.LBE4:
 206               	.Lscope3:
 208               		.stabd	78,0,0
 210               	.global	nrk_version
 212               	nrk_version:
 213               		.stabd	46,0,0
  60:../../../nano-RK/src/kernel/source/nrk.c **** nrk_int_disable();
  61:../../../nano-RK/src/kernel/source/nrk.c **** while(1);
  62:../../../nano-RK/src/kernel/source/nrk.c **** }
  63:../../../nano-RK/src/kernel/source/nrk.c **** 
  64:../../../nano-RK/src/kernel/source/nrk.c **** /**
  65:../../../nano-RK/src/kernel/source/nrk.c ****  *  nrk_init();
  66:../../../nano-RK/src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  67:../../../nano-RK/src/kernel/source/nrk.c ****  *  - Init global variables
  68:../../../nano-RK/src/kernel/source/nrk.c ****  *  - Init event list
  69:../../../nano-RK/src/kernel/source/nrk.c ****  *  - Create idle task
  70:../../../nano-RK/src/kernel/source/nrk.c ****  */
  71:../../../nano-RK/src/kernel/source/nrk.c **** void nrk_init()
  72:../../../nano-RK/src/kernel/source/nrk.c **** {
  73:../../../nano-RK/src/kernel/source/nrk.c **** 	
  74:../../../nano-RK/src/kernel/source/nrk.c ****     uint8_t i;	
  75:../../../nano-RK/src/kernel/source/nrk.c **** //    unsigned char *stkc;
  76:../../../nano-RK/src/kernel/source/nrk.c **** 	
  77:../../../nano-RK/src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  78:../../../nano-RK/src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
  79:../../../nano-RK/src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
  80:../../../nano-RK/src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  81:../../../nano-RK/src/kernel/source/nrk.c **** #ifndef NRK_SOFT_REBOOT_ON_ERROR
  82:../../../nano-RK/src/kernel/source/nrk.c ****    i=_nrk_startup_error();
  83:../../../nano-RK/src/kernel/source/nrk.c ****    if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  84:../../../nano-RK/src/kernel/source/nrk.c **** #ifndef IGNORE_EXT_RST_ERROR
  85:../../../nano-RK/src/kernel/source/nrk.c ****    if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
  86:../../../nano-RK/src/kernel/source/nrk.c **** #endif
  87:../../../nano-RK/src/kernel/source/nrk.c **** #ifndef IGNORE_BROWN_OUT_ERROR
  88:../../../nano-RK/src/kernel/source/nrk.c ****    if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
  89:../../../nano-RK/src/kernel/source/nrk.c **** #endif
  90:../../../nano-RK/src/kernel/source/nrk.c ****    //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  91:../../../nano-RK/src/kernel/source/nrk.c **** 
  92:../../../nano-RK/src/kernel/source/nrk.c ****    //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  93:../../../nano-RK/src/kernel/source/nrk.c **** #endif
  94:../../../nano-RK/src/kernel/source/nrk.c **** 
  95:../../../nano-RK/src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  96:../../../nano-RK/src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  97:../../../nano-RK/src/kernel/source/nrk.c ****    #endif
  98:../../../nano-RK/src/kernel/source/nrk.c **** 
  99:../../../nano-RK/src/kernel/source/nrk.c **** 
 100:../../../nano-RK/src/kernel/source/nrk.c **** 
 101:../../../nano-RK/src/kernel/source/nrk.c **** 
 102:../../../nano-RK/src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
 103:../../../nano-RK/src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
 104:../../../nano-RK/src/kernel/source/nrk.c ****    while(1)
 105:../../../nano-RK/src/kernel/source/nrk.c **** 	   {
 106:../../../nano-RK/src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
 107:../../../nano-RK/src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
 108:../../../nano-RK/src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
 109:../../../nano-RK/src/kernel/source/nrk.c **** 	   }
 110:../../../nano-RK/src/kernel/source/nrk.c ****    #endif
 111:../../../nano-RK/src/kernel/source/nrk.c ****    #endif
 112:../../../nano-RK/src/kernel/source/nrk.c **** 
 113:../../../nano-RK/src/kernel/source/nrk.c ****    #ifdef NRK_WATCHDOG
 114:../../../nano-RK/src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
 115:../../../nano-RK/src/kernel/source/nrk.c **** 	{
 116:../../../nano-RK/src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 117:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 118:../../../nano-RK/src/kernel/source/nrk.c **** 	}
 119:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 120:../../../nano-RK/src/kernel/source/nrk.c ****     #endif
 121:../../../nano-RK/src/kernel/source/nrk.c ****   
 122:../../../nano-RK/src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 123:../../../nano-RK/src/kernel/source/nrk.c **** /* 
 124:../../../nano-RK/src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 125:../../../nano-RK/src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 126:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 127:../../../nano-RK/src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 128:../../../nano-RK/src/kernel/source/nrk.c ****     #else
 129:../../../nano-RK/src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 130:../../../nano-RK/src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 131:../../../nano-RK/src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 132:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 133:../../../nano-RK/src/kernel/source/nrk.c ****     #endif
 134:../../../nano-RK/src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 135:../../../nano-RK/src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 136:../../../nano-RK/src/kernel/source/nrk.c **** */	
 137:../../../nano-RK/src/kernel/source/nrk.c ****  
 138:../../../nano-RK/src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 139:../../../nano-RK/src/kernel/source/nrk.c **** 
 140:../../../nano-RK/src/kernel/source/nrk.c ****     
 141:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 142:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 143:../../../nano-RK/src/kernel/source/nrk.c ****     
 144:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 145:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 146:../../../nano-RK/src/kernel/source/nrk.c **** 
 147:../../../nano-RK/src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 148:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_stats_reset();
 149:../../../nano-RK/src/kernel/source/nrk.c ****    #endif
 150:../../../nano-RK/src/kernel/source/nrk.c **** 
 151:../../../nano-RK/src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 152:../../../nano-RK/src/kernel/source/nrk.c ****     // Setup the reserve structures
 153:../../../nano-RK/src/kernel/source/nrk.c ****     _nrk_reserve_init();
 154:../../../nano-RK/src/kernel/source/nrk.c ****     #endif
 155:../../../nano-RK/src/kernel/source/nrk.c **** 
 156:../../../nano-RK/src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 157:../../../nano-RK/src/kernel/source/nrk.c **** 
 158:../../../nano-RK/src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 159:../../../nano-RK/src/kernel/source/nrk.c **** {
 160:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 161:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 162:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 163:../../../nano-RK/src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 164:../../../nano-RK/src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 165:../../../nano-RK/src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 166:../../../nano-RK/src/kernel/source/nrk.c ****     
 167:../../../nano-RK/src/kernel/source/nrk.c **** }        
 168:../../../nano-RK/src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 169:../../../nano-RK/src/kernel/source/nrk.c **** 	{
 170:../../../nano-RK/src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 171:../../../nano-RK/src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 172:../../../nano-RK/src/kernel/source/nrk.c ****         }
 173:../../../nano-RK/src/kernel/source/nrk.c ****   
 174:../../../nano-RK/src/kernel/source/nrk.c ****        
 175:../../../nano-RK/src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 176:../../../nano-RK/src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 177:../../../nano-RK/src/kernel/source/nrk.c **** 	{
 178:../../../nano-RK/src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 179:../../../nano-RK/src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 180:../../../nano-RK/src/kernel/source/nrk.c **** 	}
 181:../../../nano-RK/src/kernel/source/nrk.c **** 	
 182:../../../nano-RK/src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 183:../../../nano-RK/src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 184:../../../nano-RK/src/kernel/source/nrk.c **** 	_head_node = NULL;
 185:../../../nano-RK/src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 186:../../../nano-RK/src/kernel/source/nrk.c **** 	
 187:../../../nano-RK/src/kernel/source/nrk.c **** 	
 188:../../../nano-RK/src/kernel/source/nrk.c **** 	
 189:../../../nano-RK/src/kernel/source/nrk.c **** 
 190:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 191:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 192:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 193:../../../nano-RK/src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 194:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 195:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.period.secs = 0;
 196:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.period.nano_secs = 0;
 197:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.secs = 0;
 198:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.nano_secs = 0;
 199:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 200:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 201:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 202:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 203:../../../nano-RK/src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 204:../../../nano-RK/src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 205:../../../nano-RK/src/kernel/source/nrk.c **** 	
 206:../../../nano-RK/src/kernel/source/nrk.c **** }
 207:../../../nano-RK/src/kernel/source/nrk.c **** 
 208:../../../nano-RK/src/kernel/source/nrk.c **** 
 209:../../../nano-RK/src/kernel/source/nrk.c **** 
 210:../../../nano-RK/src/kernel/source/nrk.c **** 
 211:../../../nano-RK/src/kernel/source/nrk.c **** 
 212:../../../nano-RK/src/kernel/source/nrk.c **** 
 213:../../../nano-RK/src/kernel/source/nrk.c **** 
 214:../../../nano-RK/src/kernel/source/nrk.c **** 
 215:../../../nano-RK/src/kernel/source/nrk.c **** void nrk_start (void)
 216:../../../nano-RK/src/kernel/source/nrk.c **** {
 217:../../../nano-RK/src/kernel/source/nrk.c **** 	int8_t task_ID;
 218:../../../nano-RK/src/kernel/source/nrk.c **** 	uint8_t i,j;
 219:../../../nano-RK/src/kernel/source/nrk.c **** //	NRK_STK *x;
 220:../../../nano-RK/src/kernel/source/nrk.c **** //	unsigned char *stkc;
 221:../../../nano-RK/src/kernel/source/nrk.c **** 
 222:../../../nano-RK/src/kernel/source/nrk.c **** 	/*
 223:../../../nano-RK/src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 224:../../../nano-RK/src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 225:../../../nano-RK/src/kernel/source/nrk.c **** 	*/
 226:../../../nano-RK/src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 227:../../../nano-RK/src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 228:../../../nano-RK/src/kernel/source/nrk.c ****     {
 229:../../../nano-RK/src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 230:../../../nano-RK/src/kernel/source/nrk.c **** 	// only check activated tasks
 231:../../../nano-RK/src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 232:../../../nano-RK/src/kernel/source/nrk.c **** 	{
 233:../../../nano-RK/src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 234:../../../nano-RK/src/kernel/source/nrk.c **** 		{
 235:../../../nano-RK/src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 236:../../../nano-RK/src/kernel/source/nrk.c **** 			{
 237:../../../nano-RK/src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 238:../../../nano-RK/src/kernel/source/nrk.c **** 
 239:../../../nano-RK/src/kernel/source/nrk.c **** 			}
 240:../../../nano-RK/src/kernel/source/nrk.c **** 		}
 241:../../../nano-RK/src/kernel/source/nrk.c **** 	}
 242:../../../nano-RK/src/kernel/source/nrk.c **** 
 243:../../../nano-RK/src/kernel/source/nrk.c ****     }
 244:../../../nano-RK/src/kernel/source/nrk.c **** 
 245:../../../nano-RK/src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 246:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 247:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 248:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 249:../../../nano-RK/src/kernel/source/nrk.c **** 		
 250:../../../nano-RK/src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 251:../../../nano-RK/src/kernel/source/nrk.c **** 
 252:../../../nano-RK/src/kernel/source/nrk.c ****     /*
 253:../../../nano-RK/src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 254:../../../nano-RK/src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 255:../../../nano-RK/src/kernel/source/nrk.c ****     #else
 256:../../../nano-RK/src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 257:../../../nano-RK/src/kernel/source/nrk.c ****     #endif
 258:../../../nano-RK/src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 259:../../../nano-RK/src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 260:../../../nano-RK/src/kernel/source/nrk.c ****     
 261:../../../nano-RK/src/kernel/source/nrk.c ****     //TODO: this way on msp
 262:../../../nano-RK/src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 263:../../../nano-RK/src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 264:../../../nano-RK/src/kernel/source/nrk.c **** */
 265:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_target_start();
 266:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 267:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 268:../../../nano-RK/src/kernel/source/nrk.c **** 
 269:../../../nano-RK/src/kernel/source/nrk.c ****     // you should never get here    
 270:../../../nano-RK/src/kernel/source/nrk.c ****     while(1);
 271:../../../nano-RK/src/kernel/source/nrk.c **** }
 272:../../../nano-RK/src/kernel/source/nrk.c **** 
 273:../../../nano-RK/src/kernel/source/nrk.c **** 
 274:../../../nano-RK/src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 275:../../../nano-RK/src/kernel/source/nrk.c **** {
 276:../../../nano-RK/src/kernel/source/nrk.c **** 	
 277:../../../nano-RK/src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 278:../../../nano-RK/src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 279:../../../nano-RK/src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 280:../../../nano-RK/src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 281:../../../nano-RK/src/kernel/source/nrk.c **** 
 282:../../../nano-RK/src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 283:../../../nano-RK/src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 284:../../../nano-RK/src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 285:../../../nano-RK/src/kernel/source/nrk.c ****     //initialize member of TCB structure
 286:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 287:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 288:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 289:../../../nano-RK/src/kernel/source/nrk.c ****     
 290:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 291:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 292:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
 293:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
 294:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 295:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
 296:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 297:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 298:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 299:../../../nano-RK/src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 300:../../../nano-RK/src/kernel/source/nrk.c ****  
 301:../../../nano-RK/src/kernel/source/nrk.c **** 	
 302:../../../nano-RK/src/kernel/source/nrk.c **** 	         
 303:../../../nano-RK/src/kernel/source/nrk.c **** 
 304:../../../nano-RK/src/kernel/source/nrk.c **** 			
 305:../../../nano-RK/src/kernel/source/nrk.c ****     return NRK_OK;
 306:../../../nano-RK/src/kernel/source/nrk.c **** 
 307:../../../nano-RK/src/kernel/source/nrk.c **** }
 308:../../../nano-RK/src/kernel/source/nrk.c **** 
 309:../../../nano-RK/src/kernel/source/nrk.c **** 
 310:../../../nano-RK/src/kernel/source/nrk.c **** /*
 311:../../../nano-RK/src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 312:../../../nano-RK/src/kernel/source/nrk.c ****  *
 313:../../../nano-RK/src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 314:../../../nano-RK/src/kernel/source/nrk.c ****  * It calls the scheduler.
 315:../../../nano-RK/src/kernel/source/nrk.c ****  */
 316:../../../nano-RK/src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 317:../../../nano-RK/src/kernel/source/nrk.c **** {
 318:../../../nano-RK/src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 319:../../../nano-RK/src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 320:../../../nano-RK/src/kernel/source/nrk.c **** 
 321:../../../nano-RK/src/kernel/source/nrk.c **** 	_nrk_scheduler();
 322:../../../nano-RK/src/kernel/source/nrk.c **** 
 323:../../../nano-RK/src/kernel/source/nrk.c ****   	return;
 324:../../../nano-RK/src/kernel/source/nrk.c **** }
 325:../../../nano-RK/src/kernel/source/nrk.c **** 
 326:../../../nano-RK/src/kernel/source/nrk.c **** 
 327:../../../nano-RK/src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 328:../../../nano-RK/src/kernel/source/nrk.c **** {
 215               	.LM8:
 216               	.LFBB4:
 217               	/* prologue: function */
 218               	/* frame size = 0 */
 329:../../../nano-RK/src/kernel/source/nrk.c ****     return (NRK_VERSION);
 330:../../../nano-RK/src/kernel/source/nrk.c **** }
 220               	.LM9:
 221 000c 85E6      		ldi r24,lo8(101)
 222 000e 90E0      		ldi r25,hi8(101)
 223               	/* epilogue start */
 224 0010 0895      		ret
 226               	.Lscope4:
 228               		.stabd	78,0,0
 230               	.global	_nrk_timer_tick
 232               	_nrk_timer_tick:
 233               		.stabd	46,0,0
 235               	.LM10:
 236               	.LFBB5:
 237               	/* prologue: function */
 238               	/* frame size = 0 */
 240               	.LM11:
 241 0012 0E94 0000 		call _nrk_scheduler
 242               	/* epilogue start */
 244               	.LM12:
 245 0016 0895      		ret
 247               	.Lscope5:
 249               		.stabd	78,0,0
 257               	.global	nrk_TCB_init
 259               	nrk_TCB_init:
 260               		.stabd	46,0,0
 262               	.LM13:
 263               	.LFBB6:
 264 0018 CF92      		push r12
 265 001a DF92      		push r13
 266 001c EF92      		push r14
 267 001e FF92      		push r15
 268 0020 0F93      		push r16
 269 0022 1F93      		push r17
 270 0024 CF93      		push r28
 271 0026 DF93      		push r29
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274 0028 EC01      		movw r28,r24
 275 002a 8B01      		movw r16,r22
 276 002c 7A01      		movw r14,r20
 278               	.LM14:
 279 002e 8985      		ldd r24,Y+9
 280 0030 8230      		cpi r24,lo8(2)
 281 0032 01F0      		breq .L14
 283               	.LM15:
 284 0034 8091 0000 		lds r24,nrk_task_init_cnt
 285 0038 8883      		st Y,r24
 286 003a 00C0      		rjmp .L15
 287               	.L14:
 289               	.LM16:
 290 003c 1882      		st Y,__zero_reg__
 291               	.L15:
 293               	.LM17:
 294 003e 8091 0000 		lds r24,nrk_task_init_cnt
 295 0042 8330      		cpi r24,lo8(3)
 296 0044 00F0      		brlo .L16
 297 0046 87E0      		ldi r24,lo8(7)
 298 0048 60E0      		ldi r22,lo8(0)
 299 004a 0E94 0000 		call nrk_kernel_error_add
 300               	.L16:
 302               	.LM18:
 303 004e 8985      		ldd r24,Y+9
 304 0050 8230      		cpi r24,lo8(2)
 305 0052 01F0      		breq .L17
 306 0054 8091 0000 		lds r24,nrk_task_init_cnt
 307 0058 8F5F      		subi r24,lo8(-(1))
 308 005a 8093 0000 		sts nrk_task_init_cnt,r24
 309               	.L17:
 311               	.LM19:
 312 005e 8091 0000 		lds r24,nrk_task_init_cnt
 313 0062 8823      		tst r24
 314 0064 01F4      		brne .L18
 315 0066 81E0      		ldi r24,lo8(1)
 316 0068 8093 0000 		sts nrk_task_init_cnt,r24
 317               	.L18:
 319               	.LM20:
 320 006c 8881      		ld r24,Y
 321 006e 282F      		mov r18,r24
 322 0070 3327      		clr r19
 323 0072 27FD      		sbrc r18,7
 324 0074 3095      		com r19
 325 0076 6901      		movw r12,r18
 326 0078 55E0      		ldi r21,5
 327 007a CC0C      	1:	lsl r12
 328 007c DD1C      		rol r13
 329 007e 5A95      		dec r21
 330 0080 01F4      		brne 1b
 331 0082 C20E      		add r12,r18
 332 0084 D31E      		adc r13,r19
 333 0086 20E0      		ldi r18,lo8(nrk_task_TCB)
 334 0088 30E0      		ldi r19,hi8(nrk_task_TCB)
 335 008a C20E      		add r12,r18
 336 008c D31E      		adc r13,r19
 337 008e F601      		movw r30,r12
 338 0090 1183      		std Z+1,r17
 339 0092 0083      		st Z,r16
 341               	.LM21:
 342 0094 9885      		ldd r25,Y+8
 343 0096 9287      		std Z+10,r25
 345               	.LM22:
 346 0098 93E0      		ldi r25,lo8(3)
 347 009a 9187      		std Z+9,r25
 349               	.LM23:
 350 009c 8087      		std Z+8,r24
 352               	.LM24:
 353 009e 1582      		std Z+5,__zero_reg__
 355               	.LM25:
 356 00a0 CE01      		movw r24,r28
 357 00a2 0B96      		adiw r24,11
 358 00a4 0E94 0000 		call _nrk_time_to_ticks
 359 00a8 F601      		movw r30,r12
 360 00aa 948F      		std Z+28,r25
 361 00ac 838F      		std Z+27,r24
 363               	.LM26:
 364 00ae 0881      		ld r16,Y
 365 00b0 1127      		clr r17
 366 00b2 07FD      		sbrc r16,7
 367 00b4 1095      		com r17
 368 00b6 CE01      		movw r24,r28
 369 00b8 4B96      		adiw r24,27
 370 00ba 0E94 0000 		call _nrk_time_to_ticks
 371 00be F801      		movw r30,r16
 372 00c0 45E0      		ldi r20,5
 373 00c2 EE0F      	1:	lsl r30
 374 00c4 FF1F      		rol r31
 375 00c6 4A95      		dec r20
 376 00c8 01F4      		brne 1b
 377 00ca E00F      		add r30,r16
 378 00cc F11F      		adc r31,r17
 379 00ce E050      		subi r30,lo8(-(nrk_task_TCB))
 380 00d0 F040      		sbci r31,hi8(-(nrk_task_TCB))
 381 00d2 968B      		std Z+22,r25
 382 00d4 858B      		std Z+21,r24
 384               	.LM27:
 385 00d6 8881      		ld r24,Y
 386 00d8 9927      		clr r25
 387 00da 87FD      		sbrc r24,7
 388 00dc 9095      		com r25
 389 00de 8C01      		movw r16,r24
 390 00e0 35E0      		ldi r19,5
 391 00e2 000F      	1:	lsl r16
 392 00e4 111F      		rol r17
 393 00e6 3A95      		dec r19
 394 00e8 01F4      		brne 1b
 395 00ea 080F      		add r16,r24
 396 00ec 191F      		adc r17,r25
 397 00ee 0050      		subi r16,lo8(-(nrk_task_TCB))
 398 00f0 1040      		sbci r17,hi8(-(nrk_task_TCB))
 399 00f2 F801      		movw r30,r16
 400 00f4 8589      		ldd r24,Z+21
 401 00f6 9689      		ldd r25,Z+22
 402 00f8 238D      		ldd r18,Z+27
 403 00fa 348D      		ldd r19,Z+28
 404 00fc 820F      		add r24,r18
 405 00fe 931F      		adc r25,r19
 406 0100 908F      		std Z+24,r25
 407 0102 878B      		std Z+23,r24
 409               	.LM28:
 410 0104 CE01      		movw r24,r28
 411 0106 4396      		adiw r24,19
 412 0108 0E94 0000 		call _nrk_time_to_ticks
 413 010c F801      		movw r30,r16
 414 010e 968F      		std Z+30,r25
 415 0110 858F      		std Z+29,r24
 417               	.LM29:
 418 0112 8881      		ld r24,Y
 419 0114 9927      		clr r25
 420 0116 87FD      		sbrc r24,7
 421 0118 9095      		com r25
 422 011a FC01      		movw r30,r24
 423 011c 25E0      		ldi r18,5
 424 011e EE0F      	1:	lsl r30
 425 0120 FF1F      		rol r31
 426 0122 2A95      		dec r18
 427 0124 01F4      		brne 1b
 428 0126 E80F      		add r30,r24
 429 0128 F91F      		adc r31,r25
 430 012a E050      		subi r30,lo8(-(nrk_task_TCB))
 431 012c F040      		sbci r31,hi8(-(nrk_task_TCB))
 432 012e 858D      		ldd r24,Z+29
 433 0130 968D      		ldd r25,Z+30
 434 0132 928F      		std Z+26,r25
 435 0134 818F      		std Z+25,r24
 437               	.LM30:
 438 0136 81E0      		ldi r24,lo8(1)
 439 0138 90E0      		ldi r25,hi8(1)
 440 013a 90A3      		std Z+32,r25
 441 013c 878F      		std Z+31,r24
 443               	.LM31:
 444 013e F382      		std Z+3,r15
 445 0140 E282      		std Z+2,r14
 447               	.LM32:
 448 0142 81E0      		ldi r24,lo8(1)
 449 0144 8487      		std Z+12,r24
 450               	/* epilogue start */
 452               	.LM33:
 453 0146 DF91      		pop r29
 454 0148 CF91      		pop r28
 455 014a 1F91      		pop r17
 456 014c 0F91      		pop r16
 457 014e FF90      		pop r15
 458 0150 EF90      		pop r14
 459 0152 DF90      		pop r13
 460 0154 CF90      		pop r12
 461 0156 0895      		ret
 463               	.Lscope6:
 465               		.stabd	78,0,0
 467               	.global	nrk_start
 469               	nrk_start:
 470               		.stabd	46,0,0
 472               	.LM34:
 473               	.LFBB7:
 474 0158 DF92      		push r13
 475 015a EF92      		push r14
 476 015c FF92      		push r15
 477 015e 0F93      		push r16
 478 0160 1F93      		push r17
 479 0162 CF93      		push r28
 480 0164 DF93      		push r29
 481               	/* prologue: function */
 482               	/* frame size = 0 */
 484               	.LM35:
 485 0166 C0E0      		ldi r28,lo8(nrk_task_TCB+8)
 486 0168 D0E0      		ldi r29,hi8(nrk_task_TCB+8)
 487 016a 10E0      		ldi r17,lo8(0)
 488               	.L24:
 490               	.LM36:
 491 016c D880      		ld r13,Y
 493               	.LM37:
 494 016e 8FEF      		ldi r24,lo8(-1)
 495 0170 D816      		cp r13,r24
 496 0172 01F0      		breq .L21
 497 0174 70E0      		ldi r23,lo8(nrk_task_TCB+8)
 498 0176 E72E      		mov r14,r23
 499 0178 70E0      		ldi r23,hi8(nrk_task_TCB+8)
 500 017a F72E      		mov r15,r23
 501 017c 00E0      		ldi r16,lo8(0)
 502               	.L23:
 504               	.LM38:
 505 017e 1017      		cp r17,r16
 506 0180 01F0      		breq .L22
 507 0182 F701      		movw r30,r14
 508 0184 8081      		ld r24,Z
 509 0186 D816      		cp r13,r24
 510 0188 01F4      		brne .L22
 512               	.LM39:
 513 018a 85E0      		ldi r24,lo8(5)
 514 018c 6D2D      		mov r22,r13
 515 018e 0E94 0000 		call nrk_kernel_error_add
 516               	.L22:
 518               	.LM40:
 519 0192 0F5F      		subi r16,lo8(-(1))
 520 0194 81E2      		ldi r24,lo8(33)
 521 0196 90E0      		ldi r25,hi8(33)
 522 0198 E80E      		add r14,r24
 523 019a F91E      		adc r15,r25
 524 019c 0330      		cpi r16,lo8(3)
 525 019e 01F4      		brne .L23
 526               	.L21:
 528               	.LM41:
 529 01a0 1F5F      		subi r17,lo8(-(1))
 530 01a2 A196      		adiw r28,33
 531 01a4 1330      		cpi r17,lo8(3)
 532 01a6 01F4      		brne .L24
 534               	.LM42:
 535 01a8 0E94 0000 		call nrk_get_high_ready_task_ID
 537               	.LM43:
 538 01ac 282F      		mov r18,r24
 539 01ae 3327      		clr r19
 540 01b0 27FD      		sbrc r18,7
 541 01b2 3095      		com r19
 542 01b4 F901      		movw r30,r18
 543 01b6 65E0      		ldi r22,5
 544 01b8 EE0F      	1:	lsl r30
 545 01ba FF1F      		rol r31
 546 01bc 6A95      		dec r22
 547 01be 01F4      		brne 1b
 548 01c0 E20F      		add r30,r18
 549 01c2 F31F      		adc r31,r19
 550 01c4 E050      		subi r30,lo8(-(nrk_task_TCB))
 551 01c6 F040      		sbci r31,hi8(-(nrk_task_TCB))
 552 01c8 2285      		ldd r18,Z+10
 553 01ca 2093 0000 		sts nrk_high_ready_prio,r18
 555               	.LM44:
 556 01ce 91E2      		ldi r25,lo8(33)
 557 01d0 8902      		muls r24,r25
 558 01d2 C001      		movw r24,r0
 559 01d4 1124      		clr r1
 560 01d6 8050      		subi r24,lo8(-(nrk_task_TCB))
 561 01d8 9040      		sbci r25,hi8(-(nrk_task_TCB))
 562 01da 9093 0000 		sts (nrk_cur_task_TCB)+1,r25
 563 01de 8093 0000 		sts nrk_cur_task_TCB,r24
 564 01e2 9093 0000 		sts (nrk_high_ready_TCB)+1,r25
 565 01e6 8093 0000 		sts nrk_high_ready_TCB,r24
 567               	.LM45:
 568 01ea 2093 0000 		sts nrk_cur_task_prio,r18
 570               	.LM46:
 571 01ee 0E94 0000 		call nrk_target_start
 573               	.LM47:
 574 01f2 0E94 0000 		call nrk_stack_pointer_init
 576               	.LM48:
 577 01f6 0E94 0000 		call nrk_start_high_ready_task
 578               	.L25:
 579 01fa 00C0      		rjmp .L25
 586               	.Lscope7:
 588               		.stabd	78,0,0
 590               	.global	nrk_init
 592               	nrk_init:
 593               		.stabd	46,0,0
 595               	.LM49:
 596               	.LFBB8:
 597 01fc 0F93      		push r16
 598 01fe 1F93      		push r17
 599 0200 DF93      		push r29
 600 0202 CF93      		push r28
 601 0204 CDB7      		in r28,__SP_L__
 602 0206 DEB7      		in r29,__SP_H__
 603 0208 A397      		sbiw r28,35
 604 020a 0FB6      		in __tmp_reg__,__SREG__
 605 020c F894      		cli
 606 020e DEBF      		out __SP_H__,r29
 607 0210 0FBE      		out __SREG__,__tmp_reg__
 608 0212 CDBF      		out __SP_L__,r28
 609               	/* prologue: function */
 610               	/* frame size = 35 */
 612               	.LM50:
 613 0214 0E94 0000 		call nrk_signal_create
 614 0218 8093 0000 		sts nrk_wakeup_signal,r24
 616               	.LM51:
 617 021c 8F3F      		cpi r24,lo8(-1)
 618 021e 01F4      		brne .L30
 619 0220 8EE0      		ldi r24,lo8(14)
 620 0222 60E0      		ldi r22,lo8(0)
 621 0224 0E94 0000 		call nrk_kernel_error_add
 622               	.L30:
 624               	.LM52:
 625 0228 0E94 0000 		call _nrk_startup_error
 627               	.LM53:
 628 022c 80FF      		sbrs r24,0
 629 022e 00C0      		rjmp .L31
 630 0230 86E0      		ldi r24,lo8(6)
 631 0232 60E0      		ldi r22,lo8(0)
 632 0234 0E94 0000 		call nrk_kernel_error_add
 633               	.L31:
 635               	.LM54:
 636 0238 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 638               	.LM55:
 639 023c 1092 0000 		sts (nrk_cur_task_TCB)+1,__zero_reg__
 640 0240 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 642               	.LM56:
 643 0244 1092 0000 		sts (nrk_high_ready_TCB)+1,__zero_reg__
 644 0248 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 646               	.LM57:
 647 024c 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 649               	.LM58:
 650 0250 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 652               	.LM59:
 653 0254 8FEF      		ldi r24,lo8(-1)
 654 0256 8093 0000 		sts nrk_sem_list,r24
 656               	.LM60:
 657 025a 8093 0000 		sts nrk_sem_list+2,r24
 659               	.LM61:
 660 025e 8093 0000 		sts nrk_sem_list+1,r24
 662               	.LM62:
 663 0262 93E6      		ldi r25,lo8(99)
 664 0264 9093 0000 		sts nrk_task_TCB+10,r25
 666               	.LM63:
 667 0268 8093 0000 		sts nrk_task_TCB+8,r24
 669               	.LM64:
 670 026c 9093 0000 		sts nrk_task_TCB+43,r25
 672               	.LM65:
 673 0270 8093 0000 		sts nrk_task_TCB+41,r24
 675               	.LM66:
 676 0274 9093 0000 		sts nrk_task_TCB+76,r25
 678               	.LM67:
 679 0278 8093 0000 		sts nrk_task_TCB+74,r24
 680 027c E0E0      		ldi r30,lo8(_nrk_readyQ)
 681 027e F0E0      		ldi r31,hi8(_nrk_readyQ)
 682               	.L32:
 684               	.LM68:
 685 0280 CF01      		movw r24,r30
 686 0282 0596      		adiw r24,5
 688               	.LM69:
 689 0284 9483      		std Z+4,r25
 690 0286 8383      		std Z+3,r24
 692               	.LM70:
 693 0288 F783      		std Z+7,r31
 694 028a E683      		std Z+6,r30
 695 028c FC01      		movw r30,r24
 697               	.LM71:
 698 028e 80E0      		ldi r24,hi8(_nrk_readyQ+15)
 699 0290 E030      		cpi r30,lo8(_nrk_readyQ+15)
 700 0292 F807      		cpc r31,r24
 701 0294 01F4      		brne .L32
 703               	.LM72:
 704 0296 1092 0000 		sts (_nrk_readyQ+1)+1,__zero_reg__
 705 029a 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 707               	.LM73:
 708 029e 1092 0000 		sts (_nrk_readyQ+18)+1,__zero_reg__
 709 02a2 1092 0000 		sts _nrk_readyQ+18,__zero_reg__
 711               	.LM74:
 712 02a6 1092 0000 		sts (_head_node)+1,__zero_reg__
 713 02aa 1092 0000 		sts _head_node,__zero_reg__
 715               	.LM75:
 716 02ae 3F97      		sbiw r30,15
 717 02b0 F093 0000 		sts (_free_node)+1,r31
 718 02b4 E093 0000 		sts _free_node,r30
 720               	.LM76:
 721 02b8 8E01      		movw r16,r28
 722 02ba 0F5F      		subi r16,lo8(-(1))
 723 02bc 1F4F      		sbci r17,hi8(-(1))
 724 02be C801      		movw r24,r16
 725 02c0 60E0      		ldi r22,lo8(gs(nrk_idle_task))
 726 02c2 70E0      		ldi r23,hi8(gs(nrk_idle_task))
 727 02c4 0E94 0000 		call nrk_task_set_entry_function
 729               	.LM77:
 730 02c8 C801      		movw r24,r16
 731 02ca 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 732 02cc 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 733 02ce 40E8      		ldi r20,lo8(128)
 734 02d0 50E0      		ldi r21,hi8(128)
 735 02d2 0E94 0000 		call nrk_task_set_stk
 737               	.LM78:
 738 02d6 85E5      		ldi r24,lo8(85)
 739 02d8 8093 0000 		sts nrk_idle_task_stk,r24
 741               	.LM79:
 742 02dc 1986      		std Y+9,__zero_reg__
 744               	.LM80:
 745 02de 1C86      		std Y+12,__zero_reg__
 746 02e0 1D86      		std Y+13,__zero_reg__
 747 02e2 1E86      		std Y+14,__zero_reg__
 748 02e4 1F86      		std Y+15,__zero_reg__
 750               	.LM81:
 751 02e6 188A      		std Y+16,__zero_reg__
 752 02e8 198A      		std Y+17,__zero_reg__
 753 02ea 1A8A      		std Y+18,__zero_reg__
 754 02ec 1B8A      		std Y+19,__zero_reg__
 756               	.LM82:
 757 02ee 1C8A      		std Y+20,__zero_reg__
 758 02f0 1D8A      		std Y+21,__zero_reg__
 759 02f2 1E8A      		std Y+22,__zero_reg__
 760 02f4 1F8A      		std Y+23,__zero_reg__
 762               	.LM83:
 763 02f6 188E      		std Y+24,__zero_reg__
 764 02f8 198E      		std Y+25,__zero_reg__
 765 02fa 1A8E      		std Y+26,__zero_reg__
 766 02fc 1B8E      		std Y+27,__zero_reg__
 768               	.LM84:
 769 02fe 1C8E      		std Y+28,__zero_reg__
 770 0300 1D8E      		std Y+29,__zero_reg__
 771 0302 1E8E      		std Y+30,__zero_reg__
 772 0304 1F8E      		std Y+31,__zero_reg__
 774               	.LM85:
 775 0306 18A2      		std Y+32,__zero_reg__
 776 0308 19A2      		std Y+33,__zero_reg__
 777 030a 1AA2      		std Y+34,__zero_reg__
 778 030c 1BA2      		std Y+35,__zero_reg__
 780               	.LM86:
 781 030e 81E0      		ldi r24,lo8(1)
 782 0310 8887      		std Y+8,r24
 784               	.LM87:
 785 0312 92E0      		ldi r25,lo8(2)
 786 0314 9A87      		std Y+10,r25
 788               	.LM88:
 789 0316 8B87      		std Y+11,r24
 791               	.LM89:
 792 0318 C801      		movw r24,r16
 793 031a 0E94 0000 		call nrk_activate_task
 794               	/* epilogue start */
 796               	.LM90:
 797 031e A396      		adiw r28,35
 798 0320 0FB6      		in __tmp_reg__,__SREG__
 799 0322 F894      		cli
 800 0324 DEBF      		out __SP_H__,r29
 801 0326 0FBE      		out __SREG__,__tmp_reg__
 802 0328 CDBF      		out __SP_L__,r28
 803 032a CF91      		pop r28
 804 032c DF91      		pop r29
 805 032e 1F91      		pop r17
 806 0330 0F91      		pop r16
 807 0332 0895      		ret
 812               	.Lscope8:
 814               		.stabd	78,0,0
 815               		.comm _nrk_signal_list,4,1
 816               		.comm nrk_idle_task_stk,128,1
 817               		.comm nrk_kernel_stk_ptr,2,1
 818               		.comm nrk_task_TCB,99,1
 819               		.comm nrk_wakeup_signal,1,1
 820               		.comm _nrk_readyQ,20,1
 821               		.comm _free_node,2,1
 822               		.comm _head_node,2,1
 823               		.comm nrk_cur_task_prio,1,1
 824               		.comm nrk_cur_task_TCB,2,1
 825               		.comm nrk_high_ready_prio,1,1
 826               		.comm nrk_high_ready_TCB,2,1
 827               		.comm _nrk_resource_cnt,1,1
 828               		.comm nrk_system_time,8,1
 829               		.comm nrk_sem_list,3,1
 830               		.comm _nrk_cpu_state,1,1
 831               		.comm next_next_wakeup,2,1
 832               		.comm error_task,1,1
 833               		.comm error_num,1,1
 834               		.comm nrk_task_init_cnt,1,1
 856               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 nrk.c
     /tmp/ccyvT8N5.s:2      *ABS*:0000003f __SREG__
     /tmp/ccyvT8N5.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccyvT8N5.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccyvT8N5.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccyvT8N5.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccyvT8N5.s:132    .text:00000000 nrk_int_disable
     /tmp/ccyvT8N5.s:158    .text:00000004 nrk_int_enable
     /tmp/ccyvT8N5.s:184    .text:00000008 nrk_halt
     /tmp/ccyvT8N5.s:212    .text:0000000c nrk_version
     /tmp/ccyvT8N5.s:232    .text:00000012 _nrk_timer_tick
     /tmp/ccyvT8N5.s:259    .text:00000018 nrk_TCB_init
                            *COM*:00000001 nrk_task_init_cnt
                            *COM*:00000063 nrk_task_TCB
     /tmp/ccyvT8N5.s:469    .text:00000158 nrk_start
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
     /tmp/ccyvT8N5.s:592    .text:000001fc nrk_init
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000003 nrk_sem_list
                            *COM*:00000014 _nrk_readyQ
                            *COM*:00000002 _head_node
                            *COM*:00000002 _free_node
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_scheduler
nrk_kernel_error_add
_nrk_time_to_ticks
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
nrk_signal_create
_nrk_startup_error
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00005828  000058bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a6  008001b4  008001b4  00005970  2**0
                  ALLOC
  3 .stab         0000f5ac  00000000  00000000  00005970  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006259  00000000  00000000  00014f1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>
       4:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__vector_1>
       8:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
       c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      10:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      14:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      18:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      1c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      20:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      24:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <__vector_9>
      28:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      2c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      30:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      34:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      38:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      3c:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__vector_15>
      40:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__vector_15>
      44:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      48:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      4c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      50:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      54:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      58:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      5c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      60:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      64:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      68:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      6c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      70:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      74:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      78:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      7c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      80:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      84:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      88:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__bad_interrupt>
      8c:	69 17       	cp	r22, r25
      8e:	6f 17       	cp	r22, r31
      90:	72 17       	cp	r23, r18
      92:	75 17       	cp	r23, r21
      94:	78 17       	cp	r23, r24
      96:	7b 17       	cp	r23, r27
      98:	81 17       	cp	r24, r17
      9a:	7e 17       	cp	r23, r30
      9c:	84 17       	cp	r24, r20
      9e:	87 17       	cp	r24, r23
      a0:	8a 17       	cp	r24, r26
      a2:	93 17       	cp	r25, r19
      a4:	96 17       	cp	r25, r22
      a6:	99 17       	cp	r25, r25
      a8:	9c 17       	cp	r25, r28
      aa:	90 17       	cp	r25, r16
      ac:	66 17       	cp	r22, r22
      ae:	6c 17       	cp	r22, r28
      b0:	9f 17       	cp	r25, r31
      b2:	a2 17       	cp	r26, r18
      b4:	8d 17       	cp	r24, r29

000000b6 <__c.2505>:
      b6:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
      c6:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

000000d2 <__c.2451>:
      d2:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
      e2:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
      f2:	0d 0a 00                                            ...

000000f5 <__c.2449>:
      f5:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     105:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     115:	74 0d 0a 00                                         t...

00000119 <__c.2349>:
     119:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     129:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     139:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000145 <__c.2347>:
     145:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     155:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     165:	61 69 6c 65 64 0d 0a 00                             ailed...

0000016d <__c.2345>:
     16d:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     17d:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     18d:	61 69 6c 65 64 0d 0a 00                             ailed...

00000195 <__c.2127>:
     195:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000019c <__c.2124>:
     19c:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001ab <__c.2121>:
     1ab:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001bc <__c.2118>:
     1bc:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1cc:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001d7 <__c.2115>:
     1d7:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1e7:	20 53 69 67 6e 61 6c 00                              Signal.

000001ef <__c.2112>:
     1ef:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     1ff:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000020f <__c.2109>:
     20f:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     21f:	72 6f 72 00                                         ror.

00000223 <__c.2106>:
     223:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000234 <__c.2103>:
     234:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     244:	61 72 74 00                                         art.

00000248 <__c.2100>:
     248:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000257 <__c.2097>:
     257:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     267:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000272 <__c.2094>:
     272:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000027e <__c.2091>:
     27e:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     28e:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     29e:	20 6f 6b 3f 00                                       ok?.

000002a3 <__c.2088>:
     2a3:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2b3:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002c1 <__c.2085>:
     2c1:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2d1:	72 74 00                                            rt.

000002d4 <__c.2082>:
     2d4:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2e4:	49 44 00                                            ID.

000002e7 <__c.2079>:
     2e7:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2f7:	20 57 61 6b 65 75 70 00                              Wakeup.

000002ff <__c.2076>:
     2ff:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     30f:	6c 61 74 65 64 00                                   lated.

00000315 <__c.2073>:
     315:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     325:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000330 <__c.2070>:
     330:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     340:	69 6e 74 65 72 00                                   inter.

00000346 <__c.2067>:
     346:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     356:	6c 6f 77 00                                         low.

0000035a <__c.2063>:
     35a:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     36a:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     37a:	6e 6f 75 67 68 21 00                                nough!.

00000381 <__c.2060>:
     381:	29 3a 20 00                                         ): .

00000385 <__c.2058>:
     385:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000391 <__c.1976>:
     391:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003a0 <__c.1774>:
     3a0:	45 46 47 65 66 67 00                                EFGefg.

000003a7 <__c.1768>:
     3a7:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000003b8 <__ctors_end>:
     3b8:	11 24       	eor	r1, r1
     3ba:	1f be       	out	0x3f, r1	; 63
     3bc:	cf ef       	ldi	r28, 0xFF	; 255
     3be:	d0 e1       	ldi	r29, 0x10	; 16
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	cd bf       	out	0x3d, r28	; 61

000003c4 <__do_copy_data>:
     3c4:	11 e0       	ldi	r17, 0x01	; 1
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	b1 e0       	ldi	r27, 0x01	; 1
     3ca:	e8 e2       	ldi	r30, 0x28	; 40
     3cc:	f8 e5       	ldi	r31, 0x58	; 88
     3ce:	00 e0       	ldi	r16, 0x00	; 0
     3d0:	0b bf       	out	0x3b, r16	; 59
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__do_copy_data+0x14>
     3d4:	07 90       	elpm	r0, Z+
     3d6:	0d 92       	st	X+, r0
     3d8:	a4 3b       	cpi	r26, 0xB4	; 180
     3da:	b1 07       	cpc	r27, r17
     3dc:	d9 f7       	brne	.-10     	; 0x3d4 <__do_copy_data+0x10>

000003de <__do_clear_bss>:
     3de:	15 e0       	ldi	r17, 0x05	; 5
     3e0:	a4 eb       	ldi	r26, 0xB4	; 180
     3e2:	b1 e0       	ldi	r27, 0x01	; 1
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <.do_clear_bss_start>

000003e6 <.do_clear_bss_loop>:
     3e6:	1d 92       	st	X+, r1

000003e8 <.do_clear_bss_start>:
     3e8:	aa 35       	cpi	r26, 0x5A	; 90
     3ea:	b1 07       	cpc	r27, r17
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <.do_clear_bss_loop>
     3ee:	0e 94 a2 02 	call	0x544	; 0x544 <main>
     3f2:	0c 94 12 2c 	jmp	0x5824	; 0x5824 <_exit>

000003f6 <__bad_interrupt>:
     3f6:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <__vector_default>

000003fa <nrk_create_taskset>:
  }
}
#endif

void nrk_create_taskset ()
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
  RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
  RX_TASK.offset.secs = 0;
  RX_TASK.offset.nano_secs = 0;
  nrk_activate_task (&RX_TASK);
#else
  TX_TASK.task = tx_task;
     3fe:	8e e3       	ldi	r24, 0x3E	; 62
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	90 93 ed 03 	sts	0x03ED, r25
     406:	80 93 ec 03 	sts	0x03EC, r24
  nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE);
     40a:	c7 ee       	ldi	r28, 0xE7	; 231
     40c:	d3 e0       	ldi	r29, 0x03	; 3
     40e:	ce 01       	movw	r24, r28
     410:	6b e6       	ldi	r22, 0x6B	; 107
     412:	72 e0       	ldi	r23, 0x02	; 2
     414:	40 e8       	ldi	r20, 0x80	; 128
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <nrk_task_set_stk>
  TX_TASK.prio = 2;
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	88 87       	std	Y+8, r24	; 0x08
  TX_TASK.FirstActivation = TRUE;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	8f 83       	std	Y+7, r24	; 0x07
  TX_TASK.Type = BASIC_TASK;
     424:	89 87       	std	Y+9, r24	; 0x09
  TX_TASK.SchType = PREEMPTIVE;
     426:	8a 87       	std	Y+10, r24	; 0x0a
  TX_TASK.period.secs = 1;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	a0 e0       	ldi	r26, 0x00	; 0
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	8b 87       	std	Y+11, r24	; 0x0b
     432:	9c 87       	std	Y+12, r25	; 0x0c
     434:	ad 87       	std	Y+13, r26	; 0x0d
     436:	be 87       	std	Y+14, r27	; 0x0e
  TX_TASK.period.nano_secs = 0;
     438:	1f 86       	std	Y+15, r1	; 0x0f
     43a:	18 8a       	std	Y+16, r1	; 0x10
     43c:	19 8a       	std	Y+17, r1	; 0x11
     43e:	1a 8a       	std	Y+18, r1	; 0x12
  TX_TASK.cpu_reserve.secs = 1;
     440:	8b 8b       	std	Y+19, r24	; 0x13
     442:	9c 8b       	std	Y+20, r25	; 0x14
     444:	ad 8b       	std	Y+21, r26	; 0x15
     446:	be 8b       	std	Y+22, r27	; 0x16
  TX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	95 e6       	ldi	r25, 0x65	; 101
     44c:	ad ec       	ldi	r26, 0xCD	; 205
     44e:	bd e1       	ldi	r27, 0x1D	; 29
     450:	8f 8b       	std	Y+23, r24	; 0x17
     452:	98 8f       	std	Y+24, r25	; 0x18
     454:	a9 8f       	std	Y+25, r26	; 0x19
     456:	ba 8f       	std	Y+26, r27	; 0x1a
  TX_TASK.offset.secs = 0;
     458:	1b 8e       	std	Y+27, r1	; 0x1b
     45a:	1c 8e       	std	Y+28, r1	; 0x1c
     45c:	1d 8e       	std	Y+29, r1	; 0x1d
     45e:	1e 8e       	std	Y+30, r1	; 0x1e
  TX_TASK.offset.nano_secs = 0;
     460:	1f 8e       	std	Y+31, r1	; 0x1f
     462:	18 a2       	std	Y+32, r1	; 0x20
     464:	19 a2       	std	Y+33, r1	; 0x21
     466:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TX_TASK);
     468:	ce 01       	movw	r24, r28
     46a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <nrk_activate_task>
#endif


  printf ("Create done\r\n");
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 e7 29 	call	0x53ce	; 0x53ce <puts>
}
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <tx_task>:
#else

uint8_t ctr_cnt[4];

void tx_task()
{
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
  uint8_t j, i,val,len,cnt = 0;
  
  printf( "tx_task PID=%d\r\n",nrk_get_pid());
     486:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <nrk_get_pid>
     48a:	00 d0       	rcall	.+0      	; 0x48c <tx_task+0x10>
     48c:	00 d0       	rcall	.+0      	; 0x48e <tx_task+0x12>
     48e:	ed b7       	in	r30, 0x3d	; 61
     490:	fe b7       	in	r31, 0x3e	; 62
     492:	31 96       	adiw	r30, 0x01	; 1
     494:	2d e0       	ldi	r18, 0x0D	; 13
     496:	31 e0       	ldi	r19, 0x01	; 1
     498:	ad b7       	in	r26, 0x3d	; 61
     49a:	be b7       	in	r27, 0x3e	; 62
     49c:	12 96       	adiw	r26, 0x02	; 2
     49e:	3c 93       	st	X, r19
     4a0:	2e 93       	st	-X, r18
     4a2:	11 97       	sbiw	r26, 0x01	; 1
     4a4:	82 83       	std	Z+2, r24	; 0x02
     4a6:	13 82       	std	Z+3, r1	; 0x03
     4a8:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
  
  bmac_init(25);
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	89 e1       	ldi	r24, 0x19	; 25
     4b6:	0e 94 1a 06 	call	0xc34	; 0xc34 <bmac_init>
  while(!bmac_started()) nrk_wait_until_next_period();
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <tx_task+0x44>
     4bc:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <nrk_wait_until_next_period>
     4c0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <bmac_started>
     4c4:	88 23       	and	r24, r24
     4c6:	d1 f3       	breq	.-12     	; 0x4bc <tx_task+0x40>
     4c8:	10 e0       	ldi	r17, 0x00	; 0

  while(1)
  {
        nrk_led_set(GREEN_LED); 
        sprintf( tx_buf, "%d",cnt++ );
     4ca:	c3 e7       	ldi	r28, 0x73	; 115
     4cc:	d3 e0       	ldi	r29, 0x03	; 3
     4ce:	8e e1       	ldi	r24, 0x1E	; 30
     4d0:	e8 2e       	mov	r14, r24
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	f8 2e       	mov	r15, r24
  bmac_init(25);
  while(!bmac_started()) nrk_wait_until_next_period();

  while(1)
  {
        nrk_led_set(GREEN_LED); 
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <nrk_led_set>
        sprintf( tx_buf, "%d",cnt++ );
     4de:	81 2f       	mov	r24, r17
     4e0:	1f 5f       	subi	r17, 0xFF	; 255
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <tx_task+0x68>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <tx_task+0x6a>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <tx_task+0x6c>
     4e8:	ed b7       	in	r30, 0x3d	; 61
     4ea:	fe b7       	in	r31, 0x3e	; 62
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	ad b7       	in	r26, 0x3d	; 61
     4f0:	be b7       	in	r27, 0x3e	; 62
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	dc 93       	st	X, r29
     4f6:	ce 93       	st	-X, r28
     4f8:	11 97       	sbiw	r26, 0x01	; 1
     4fa:	f3 82       	std	Z+3, r15	; 0x03
     4fc:	e2 82       	std	Z+2, r14	; 0x02
     4fe:	84 83       	std	Z+4, r24	; 0x04
     500:	15 82       	std	Z+5, r1	; 0x05
     502:	0e 94 22 2a 	call	0x5444	; 0x5444 <sprintf>
        val = bmac_tx_pkt(tx_buf, strlen(tx_buf));
     506:	fe 01       	movw	r30, r28
     508:	01 90       	ld	r0, Z+
     50a:	00 20       	and	r0, r0
     50c:	e9 f7       	brne	.-6      	; 0x508 <tx_task+0x8c>
     50e:	bf 01       	movw	r22, r30
     510:	61 50       	subi	r22, 0x01	; 1
     512:	70 40       	sbci	r23, 0x00	; 0
     514:	63 57       	subi	r22, 0x73	; 115
     516:	73 40       	sbci	r23, 0x03	; 3
     518:	8d b7       	in	r24, 0x3d	; 61
     51a:	9e b7       	in	r25, 0x3e	; 62
     51c:	06 96       	adiw	r24, 0x06	; 6
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	9e bf       	out	0x3e, r25	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	8d bf       	out	0x3d, r24	; 61
     528:	ce 01       	movw	r24, r28
     52a:	0e 94 6f 05 	call	0xade	; 0xade <bmac_tx_pkt>
        nrk_led_clr(GREEN_LED); 
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
        printf( "TX task sent data!\r\n" );
     536:	81 e2       	ldi	r24, 0x21	; 33
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 e7 29 	call	0x53ce	; 0x53ce <puts>
        nrk_wait_until_next_period();
     53e:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <nrk_wait_until_next_period>
     542:	c9 cf       	rjmp	.-110    	; 0x4d6 <tx_task+0x5a>

00000544 <main>:
uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
    nrk_setup_ports ();
     544:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <nrk_setup_ports>
    nrk_setup_uart (UART_BAUDRATE_115K2);
     548:	87 e0       	ldi	r24, 0x07	; 7
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 b0 13 	call	0x2760	; 0x2760 <nrk_setup_uart>

    nrk_init ();
     550:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <nrk_init>
    nrk_led_clr(ORANGE_LED);
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    nrk_led_clr(GREEN_LED);
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    nrk_led_clr(RED_LED);
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    nrk_led_clr(BLUE_LED);
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>

    nrk_time_set (0, 0);
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <nrk_time_set>

    bmac_task_config ();
     588:	0e 94 81 03 	call	0x702	; 0x702 <bmac_task_config>
    nrk_create_taskset ();
     58c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <nrk_create_taskset>
    nrk_start ();
     590:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <nrk_start>

    return 0;
}
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 95       	ret

0000059a <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
    // Any code here gets called the instant a packet is received from the interrupt   
    return pRRI;
}
     59a:	08 95       	ret

0000059c <bmac_tx_reserve_set>:
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
else return NRK_ERROR;
#else
return NRK_ERROR;
#endif
}
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	08 95       	ret

000005a0 <bmac_tx_reserve_get>:
  return nrk_reserve_get(tx_reserve);
else return 0;
#else
return 0;
#endif
}
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	08 95       	ret

000005a6 <bmac_addr_decode_dest_mac>:
return NRK_OK;
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
     5a6:	90 93 ee 02 	sts	0x02EE, r25
     5aa:	80 93 ed 02 	sts	0x02ED, r24
return NRK_OK;
}
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	08 95       	ret

000005b2 <bmac_set_cca_active>:
return NRK_OK;
}

void bmac_set_cca_active(uint8_t active)
{
cca_active=active;
     5b2:	80 93 69 02 	sts	0x0269, r24
}
     5b6:	08 95       	ret

000005b8 <bmac_rx_pkt_set_buffer>:
else return NRK_OK;
}

int8_t bmac_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{
if(buf==NULL) return NRK_ERROR;
     5b8:	00 97       	sbiw	r24, 0x00	; 0
     5ba:	11 f4       	brne	.+4      	; 0x5c0 <bmac_rx_pkt_set_buffer+0x8>
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	08 95       	ret
    bmac_rfRxInfo.pPayload = buf;
     5c0:	90 93 10 04 	sts	0x0410, r25
     5c4:	80 93 0f 04 	sts	0x040F, r24
    bmac_rfRxInfo.max_length = size;
     5c8:	60 93 0e 04 	sts	0x040E, r22
    rx_buf_empty=1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 5c 02 	sts	0x025C, r24
return NRK_OK;
}
     5d2:	08 95       	ret

000005d4 <bmac_tx_pkt_nonblocking>:
    return NRK_OK;
}

int8_t bmac_tx_pkt_nonblocking(uint8_t *buf, uint8_t len)
{
  if(tx_data_ready==1) return NRK_ERROR;
     5d4:	20 91 5b 02 	lds	r18, 0x025B
     5d8:	21 30       	cpi	r18, 0x01	; 1
     5da:	11 f4       	brne	.+4      	; 0x5e0 <bmac_tx_pkt_nonblocking+0xc>
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	08 95       	ret
  tx_data_ready=1;
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	20 93 5b 02 	sts	0x025B, r18
  bmac_rfTxInfo.pPayload=buf;
     5e6:	90 93 f1 02 	sts	0x02F1, r25
     5ea:	80 93 f0 02 	sts	0x02F0, r24
  bmac_rfTxInfo.length=len;
     5ee:	60 93 ef 02 	sts	0x02EF, r22
     5f2:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
     5f4:	08 95       	ret

000005f6 <bmac_rx_pkt_get>:
return NRK_ERROR;
}


uint8_t *bmac_rx_pkt_get(uint8_t *len, int8_t *rssi)
{
     5f6:	fc 01       	movw	r30, r24
     5f8:	db 01       	movw	r26, r22

  if(bmac_rx_pkt_ready()==0) 
     5fa:	80 91 5c 02 	lds	r24, 0x025C
     5fe:	88 23       	and	r24, r24
     600:	29 f0       	breq	.+10     	; 0x60c <bmac_rx_pkt_get+0x16>
	{
	*len=0;
     602:	10 82       	st	Z, r1
	*rssi=0;
     604:	1c 92       	st	X, r1
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
	return NULL;
     60a:	0a c0       	rjmp	.+20     	; 0x620 <bmac_rx_pkt_get+0x2a>
	}
  *len=bmac_rfRxInfo.length;
     60c:	80 91 0d 04 	lds	r24, 0x040D
     610:	80 83       	st	Z, r24
  *rssi=bmac_rfRxInfo.rssi;
     612:	80 91 12 04 	lds	r24, 0x0412
     616:	8c 93       	st	X, r24
  return bmac_rfRxInfo.pPayload;
     618:	20 91 0f 04 	lds	r18, 0x040F
     61c:	30 91 10 04 	lds	r19, 0x0410
}
     620:	c9 01       	movw	r24, r18
     622:	08 95       	ret

00000624 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready(void)
{
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 91 5c 02 	lds	r25, 0x025C
     62a:	99 23       	and	r25, r25
     62c:	09 f4       	brne	.+2      	; 0x630 <bmac_rx_pkt_ready+0xc>
     62e:	81 e0       	ldi	r24, 0x01	; 1
return (!rx_buf_empty);
}
     630:	08 95       	ret

00000632 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release(void)
{
    rx_buf_empty=1;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	80 93 5c 02 	sts	0x025C, r24
return NRK_OK;
}
     638:	08 95       	ret

0000063a <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate(nrk_time_t period)
{
     63a:	df 93       	push	r29
     63c:	cf 93       	push	r28
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	28 97       	sbiw	r28, 0x08	; 8
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	29 83       	std	Y+1, r18	; 0x01
     650:	3a 83       	std	Y+2, r19	; 0x02
     652:	4b 83       	std	Y+3, r20	; 0x03
     654:	5c 83       	std	Y+4, r21	; 0x04
     656:	6d 83       	std	Y+5, r22	; 0x05
     658:	7e 83       	std	Y+6, r23	; 0x06
     65a:	8f 83       	std	Y+7, r24	; 0x07
     65c:	98 87       	std	Y+8, r25	; 0x08
     65e:	29 81       	ldd	r18, Y+1	; 0x01
     660:	3a 81       	ldd	r19, Y+2	; 0x02
     662:	4b 81       	ldd	r20, Y+3	; 0x03
     664:	5c 81       	ldd	r21, Y+4	; 0x04
     666:	8d 81       	ldd	r24, Y+5	; 0x05
     668:	9e 81       	ldd	r25, Y+6	; 0x06
     66a:	af 81       	ldd	r26, Y+7	; 0x07
     66c:	b8 85       	ldd	r27, Y+8	; 0x08
if(period.secs==0 && period.nano_secs < BMAC_MIN_CHECK_RATE_MS*NANOS_PER_MS)
     66e:	21 15       	cp	r18, r1
     670:	31 05       	cpc	r19, r1
     672:	41 05       	cpc	r20, r1
     674:	51 05       	cpc	r21, r1
     676:	51 f4       	brne	.+20     	; 0x68c <bmac_set_rx_check_rate+0x52>
     678:	80 30       	cpi	r24, 0x00	; 0
     67a:	6d e2       	ldi	r22, 0x2D	; 45
     67c:	96 07       	cpc	r25, r22
     67e:	61 e3       	ldi	r22, 0x31	; 49
     680:	a6 07       	cpc	r26, r22
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	b6 07       	cpc	r27, r22
     686:	10 f4       	brcc	.+4      	; 0x68c <bmac_set_rx_check_rate+0x52>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	11 c0       	rjmp	.+34     	; 0x6ae <bmac_set_rx_check_rate+0x74>
	return NRK_ERROR;
_bmac_check_period.secs=period.secs;
     68c:	20 93 61 02 	sts	0x0261, r18
     690:	30 93 62 02 	sts	0x0262, r19
     694:	40 93 63 02 	sts	0x0263, r20
     698:	50 93 64 02 	sts	0x0264, r21
_bmac_check_period.nano_secs=period.nano_secs;
     69c:	80 93 65 02 	sts	0x0265, r24
     6a0:	90 93 66 02 	sts	0x0266, r25
     6a4:	a0 93 67 02 	sts	0x0267, r26
     6a8:	b0 93 68 02 	sts	0x0268, r27
     6ac:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
     6ae:	28 96       	adiw	r28, 0x08	; 8
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	08 95       	ret

000006c0 <bmac_started>:

int8_t bmac_started()
{
return bmac_running;
}
     6c0:	80 91 5d 02 	lds	r24, 0x025D
     6c4:	08 95       	ret

000006c6 <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get()
{
  return rx_failure_cnt;
}
     6c6:	80 91 57 02 	lds	r24, 0x0257
     6ca:	90 91 58 02 	lds	r25, 0x0258
     6ce:	08 95       	ret

000006d0 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset()
{
  rx_failure_cnt=0;
     6d0:	10 92 57 02 	sts	0x0257, r1
     6d4:	10 92 58 02 	sts	0x0258, r1
     6d8:	10 92 59 02 	sts	0x0259, r1
     6dc:	10 92 5a 02 	sts	0x025A, r1
return NRK_OK;
}
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	08 95       	ret

000006e4 <_b_pow>:
nrk_event_signal (bmac_tx_pkt_done_signal);
return NRK_OK;
}

uint8_t _b_pow(uint8_t in)
{
     6e4:	98 2f       	mov	r25, r24
uint8_t i;
uint8_t result;
if(in<=1) return 1;
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	10 f4       	brcc	.+4      	; 0x6ee <_b_pow+0xa>
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	08 95       	ret
if(in>7) in=6; // cap it at 128 
     6ee:	88 30       	cpi	r24, 0x08	; 8
     6f0:	08 f0       	brcs	.+2      	; 0x6f4 <_b_pow+0x10>
     6f2:	96 e0       	ldi	r25, 0x06	; 6
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	81 e0       	ldi	r24, 0x01	; 1
result=1;
for(i=0; i<in; i++ )
  result=result*2;
     6f8:	88 0f       	add	r24, r24
uint8_t i;
uint8_t result;
if(in<=1) return 1;
if(in>7) in=6; // cap it at 128 
result=1;
for(i=0; i<in; i++ )
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	29 17       	cp	r18, r25
     6fe:	e0 f3       	brcs	.-8      	; 0x6f8 <_b_pow+0x14>
  result=result*2;
return result;
}
     700:	08 95       	ret

00000702 <bmac_task_config>:


void bmac_task_config ()
{
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
    nrk_task_set_entry_function( &bmac_task, bmac_nw_task);
     706:	c4 eb       	ldi	r28, 0xB4	; 180
     708:	d1 e0       	ldi	r29, 0x01	; 1
     70a:	ce 01       	movw	r24, r28
     70c:	62 e0       	ldi	r22, 0x02	; 2
     70e:	75 e0       	ldi	r23, 0x05	; 5
     710:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <nrk_task_set_entry_function>
    nrk_task_set_stk( &bmac_task, bmac_task_stack, BMAC_STACKSIZE);
     714:	ce 01       	movw	r24, r28
     716:	67 ed       	ldi	r22, 0xD7	; 215
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	40 e8       	ldi	r20, 0x80	; 128
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <nrk_task_set_stk>
    bmac_task.prio = BMAC_TASK_PRIORITY;
     722:	84 e1       	ldi	r24, 0x14	; 20
     724:	80 93 bc 01 	sts	0x01BC, r24
    bmac_task.FirstActivation = TRUE;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 bb 01 	sts	0x01BB, r24
    bmac_task.Type = BASIC_TASK;
     72e:	80 93 bd 01 	sts	0x01BD, r24
    bmac_task.SchType = PREEMPTIVE;
     732:	80 93 be 01 	sts	0x01BE, r24
    bmac_task.period.secs = 0;
     736:	10 92 bf 01 	sts	0x01BF, r1
     73a:	10 92 c0 01 	sts	0x01C0, r1
     73e:	10 92 c1 01 	sts	0x01C1, r1
     742:	10 92 c2 01 	sts	0x01C2, r1
    bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	9d e2       	ldi	r25, 0x2D	; 45
     74a:	a1 e3       	ldi	r26, 0x31	; 49
     74c:	b1 e0       	ldi	r27, 0x01	; 1
     74e:	80 93 c3 01 	sts	0x01C3, r24
     752:	90 93 c4 01 	sts	0x01C4, r25
     756:	a0 93 c5 01 	sts	0x01C5, r26
     75a:	b0 93 c6 01 	sts	0x01C6, r27
    bmac_task.cpu_reserve.secs = 5;      // bmac reserve , 0 to disable
     75e:	85 e0       	ldi	r24, 0x05	; 5
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a0 e0       	ldi	r26, 0x00	; 0
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	80 93 c7 01 	sts	0x01C7, r24
     76a:	90 93 c8 01 	sts	0x01C8, r25
     76e:	a0 93 c9 01 	sts	0x01C9, r26
     772:	b0 93 ca 01 	sts	0x01CA, r27
    bmac_task.cpu_reserve.nano_secs = 0;
     776:	10 92 cb 01 	sts	0x01CB, r1
     77a:	10 92 cc 01 	sts	0x01CC, r1
     77e:	10 92 cd 01 	sts	0x01CD, r1
     782:	10 92 ce 01 	sts	0x01CE, r1
    bmac_task.offset.secs = 0;
     786:	10 92 cf 01 	sts	0x01CF, r1
     78a:	10 92 d0 01 	sts	0x01D0, r1
     78e:	10 92 d1 01 	sts	0x01D1, r1
     792:	10 92 d2 01 	sts	0x01D2, r1
    bmac_task.offset.nano_secs = 0;
     796:	10 92 d3 01 	sts	0x01D3, r1
     79a:	10 92 d4 01 	sts	0x01D4, r1
     79e:	10 92 d5 01 	sts	0x01D5, r1
     7a2:	10 92 d6 01 	sts	0x01D6, r1
    #ifdef DEBUG
    printf( "bmac activate\r\n" );
    #endif 
    nrk_activate_task (&bmac_task);
     7a6:	ce 01       	movw	r24, r28
     7a8:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <nrk_activate_task>
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <_bmac_channel_check>:
{
return bmac_running;
}

int8_t _bmac_channel_check()
{
     7b2:	df 93       	push	r29
     7b4:	cf 93       	push	r28
     7b6:	0f 92       	push	r0
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
int8_t val;
rf_polling_rx_on();
     7bc:	0e 94 13 08 	call	0x1026	; 0x1026 <rf_polling_rx_on>
nrk_spin_wait_us(250);
     7c0:	8a ef       	ldi	r24, 0xFA	; 250
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
val=CCA_IS_1;
     7c8:	20 b3       	in	r18, 0x10	; 16
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	86 e0       	ldi	r24, 0x06	; 6
     7ce:	36 95       	lsr	r19
     7d0:	27 95       	ror	r18
     7d2:	8a 95       	dec	r24
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <_bmac_channel_check+0x1c>
if(val) rf_rx_off(); 
     7d6:	82 2f       	mov	r24, r18
     7d8:	81 70       	andi	r24, 0x01	; 1
     7da:	20 ff       	sbrs	r18, 0
     7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <_bmac_channel_check+0x34>
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	0e 94 25 08 	call	0x104a	; 0x104a <rf_rx_off>
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
return val;

}
     7e6:	0f 90       	pop	r0
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <_bmac_tx>:
  rx_failure_cnt=0;
return NRK_OK;
}

int8_t _bmac_tx()
{
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
uint16_t b;

#ifdef DEBUG
nrk_kprintf( PSTR("_bmac_tx()\r\n"));
#endif
if(cca_active)
     7f6:	80 91 69 02 	lds	r24, 0x0269
     7fa:	88 23       	and	r24, r24
     7fc:	09 f4       	brne	.+2      	; 0x800 <_bmac_tx+0x12>
     7fe:	45 c0       	rjmp	.+138    	; 0x88a <_bmac_tx+0x9c>
{

// Add random time here to stop nodes from synchronizing with eachother
b=_nrk_time_to_ticks(&_bmac_check_period);
     800:	81 e6       	ldi	r24, 0x61	; 97
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_nrk_time_to_ticks>
     808:	8c 01       	movw	r16, r24
b=b/((rand()%10)+1);
     80a:	0e 94 42 29 	call	0x5284	; 0x5284 <rand>
//printf( "waiting %d\r\n",b );
nrk_wait_until_ticks(b);
     80e:	6a e0       	ldi	r22, 0x0A	; 10
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 b3 28 	call	0x5166	; 0x5166 <__divmodhi4>
     816:	bc 01       	movw	r22, r24
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	c8 01       	movw	r24, r16
     81e:	0e 94 9f 28 	call	0x513e	; 0x513e <__udivmodhi4>
     822:	cb 01       	movw	r24, r22
     824:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <nrk_wait_until_ticks>
     828:	11 e0       	ldi	r17, 0x01	; 1
//nrk_wait_ticks(b);

	backoff_count=1;
	do{
	v=_bmac_channel_check();
     82a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_bmac_channel_check>
     82e:	08 2f       	mov	r16, r24
	rf_rx_off(); 
     830:	0e 94 25 08 	call	0x104a	; 0x104a <rf_rx_off>
	if(v==1) break;
     834:	01 30       	cpi	r16, 0x01	; 1
     836:	49 f1       	breq	.+82     	; 0x88a <_bmac_tx+0x9c>
	// Channel is busy
	backoff=rand()%(_b_pow(backoff_count));
     838:	0e 94 42 29 	call	0x5284	; 0x5284 <rand>
     83c:	ec 01       	movw	r28, r24
     83e:	81 2f       	mov	r24, r17
     840:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_b_pow>
     844:	68 2f       	mov	r22, r24
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
     846:	ce 01       	movw	r24, r28
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	0e 94 b3 28 	call	0x5166	; 0x5166 <__divmodhi4>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <nrk_wait_until_next_n_periods>
	backoff_count++;
	if(backoff_count>6) backoff_count=6; // cap it at 64	
	b=_nrk_time_to_ticks(&_bmac_check_period);
     854:	81 e6       	ldi	r24, 0x61	; 97
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_nrk_time_to_ticks>
     85c:	ec 01       	movw	r28, r24
	b=b/((rand()%10)+1);
     85e:	0e 94 42 29 	call	0x5284	; 0x5284 <rand>
//	printf( "waiting %d\r\n",b );
	nrk_wait_until_ticks(b);
     862:	6a e0       	ldi	r22, 0x0A	; 10
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 b3 28 	call	0x5166	; 0x5166 <__divmodhi4>
     86a:	bc 01       	movw	r22, r24
     86c:	6f 5f       	subi	r22, 0xFF	; 255
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	0e 94 9f 28 	call	0x513e	; 0x513e <__udivmodhi4>
     876:	cb 01       	movw	r24, r22
     878:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <nrk_wait_until_ticks>
//	nrk_wait_ticks(b);

	} while(v==0);
     87c:	00 23       	and	r16, r16
     87e:	29 f4       	brne	.+10     	; 0x88a <_bmac_tx+0x9c>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
	backoff_count++;
     880:	1f 5f       	subi	r17, 0xFF	; 255
     882:	17 30       	cpi	r17, 0x07	; 7
     884:	90 f2       	brcs	.-92     	; 0x82a <_bmac_tx+0x3c>
     886:	16 e0       	ldi	r17, 0x06	; 6
     888:	d0 cf       	rjmp	.-96     	; 0x82a <_bmac_tx+0x3c>
//	nrk_wait_ticks(b);

	} while(v==0);
}

	rf_test_mode();
     88a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <rf_test_mode>
	rf_carrier_on(); 
     88e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <rf_carrier_on>
	nrk_wait(_bmac_check_period);
     892:	20 91 61 02 	lds	r18, 0x0261
     896:	30 91 62 02 	lds	r19, 0x0262
     89a:	40 91 63 02 	lds	r20, 0x0263
     89e:	50 91 64 02 	lds	r21, 0x0264
     8a2:	60 91 65 02 	lds	r22, 0x0265
     8a6:	70 91 66 02 	lds	r23, 0x0266
     8aa:	80 91 67 02 	lds	r24, 0x0267
     8ae:	90 91 68 02 	lds	r25, 0x0268
     8b2:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <nrk_wait>
	//nrk_wait_until_next_period();
	rf_carrier_off(); 
     8b6:	0e 94 04 0b 	call	0x1608	; 0x1608 <rf_carrier_off>
	rf_data_mode();
     8ba:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <rf_data_mode>
	// send packet
	rf_rx_off();
     8be:	0e 94 25 08 	call	0x104a	; 0x104a <rf_rx_off>
	pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
     8c2:	8d ee       	ldi	r24, 0xED	; 237
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <rf_tx_packet>
     8ca:	80 93 5e 02 	sts	0x025E, r24
	rf_rx_off(); 	
     8ce:	0e 94 25 08 	call	0x104a	; 0x104a <rf_rx_off>
tx_data_ready=0;
     8d2:	10 92 5b 02 	sts	0x025B, r1
nrk_event_signal (bmac_tx_pkt_done_signal);
     8d6:	80 91 94 04 	lds	r24, 0x0494
     8da:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <nrk_event_signal>
return NRK_OK;
}
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	08 95       	ret

000008ea <_bmac_rx>:
return val;

}

int8_t _bmac_rx()
{
     8ea:	1f 93       	push	r17
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	0f 92       	push	r0
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
int8_t n;
uint8_t cnt;

	rf_set_rx (&bmac_rfRxInfo, g_chan);
     8f6:	8a e0       	ldi	r24, 0x0A	; 10
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	60 91 5f 02 	lds	r22, 0x025F
     8fe:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <rf_set_rx>
        rf_polling_rx_on ();
     902:	0e 94 13 08 	call	0x1026	; 0x1026 <rf_polling_rx_on>
     906:	10 e0       	ldi	r17, 0x00	; 0
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
     908:	26 c0       	rjmp	.+76     	; 0x956 <_bmac_rx+0x6c>
	{
	cnt++;
     90a:	1f 5f       	subi	r17, 0xFF	; 255
	nrk_wait(_bmac_check_period);
     90c:	20 91 61 02 	lds	r18, 0x0261
     910:	30 91 62 02 	lds	r19, 0x0262
     914:	40 91 63 02 	lds	r20, 0x0263
     918:	50 91 64 02 	lds	r21, 0x0264
     91c:	60 91 65 02 	lds	r22, 0x0265
     920:	70 91 66 02 	lds	r23, 0x0266
     924:	80 91 67 02 	lds	r24, 0x0267
     928:	90 91 68 02 	lds	r25, 0x0268
     92c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <nrk_wait>
	if(cnt>2) { 
     930:	13 30       	cpi	r17, 0x03	; 3
     932:	89 f4       	brne	.+34     	; 0x956 <_bmac_rx+0x6c>
			#ifdef DEBUG
			printf( "rx timeout 1 %d\r\n",cnt );
			#endif
			if(rx_failure_cnt<65535) rx_failure_cnt++;
     934:	80 91 57 02 	lds	r24, 0x0257
     938:	90 91 58 02 	lds	r25, 0x0258
     93c:	a0 91 59 02 	lds	r26, 0x0259
     940:	b0 91 5a 02 	lds	r27, 0x025A
     944:	8f 3f       	cpi	r24, 0xFF	; 255
     946:	2f ef       	ldi	r18, 0xFF	; 255
     948:	92 07       	cpc	r25, r18
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	a2 07       	cpc	r26, r18
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	b2 07       	cpc	r27, r18
     952:	a8 f0       	brcs	.+42     	; 0x97e <_bmac_rx+0x94>
     954:	1f c0       	rjmp	.+62     	; 0x994 <_bmac_rx+0xaa>
uint8_t cnt;

	rf_set_rx (&bmac_rfRxInfo, g_chan);
        rf_polling_rx_on ();
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
     956:	0e 94 39 08 	call	0x1072	; 0x1072 <rf_rx_check_fifop>
     95a:	88 23       	and	r24, r24
     95c:	b1 f2       	breq	.-84     	; 0x90a <_bmac_rx+0x20>
     95e:	1d c0       	rjmp	.+58     	; 0x99a <_bmac_rx+0xb0>
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
                cnt++;
     960:	1f 5f       	subi	r17, 0xFF	; 255
                nrk_spin_wait_us(100);
     962:	84 e6       	ldi	r24, 0x64	; 100
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
                if (cnt > 50) { 
     96a:	13 33       	cpi	r17, 0x33	; 51
     96c:	b9 f4       	brne	.+46     	; 0x99c <_bmac_rx+0xb2>
			#ifdef DEBUG
			printf( "rx timeout 2\r\n" ); 
			#endif
			rx_failure_cnt++;
     96e:	80 91 57 02 	lds	r24, 0x0257
     972:	90 91 58 02 	lds	r25, 0x0258
     976:	a0 91 59 02 	lds	r26, 0x0259
     97a:	b0 91 5a 02 	lds	r27, 0x025A
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	a1 1d       	adc	r26, r1
     982:	b1 1d       	adc	r27, r1
     984:	80 93 57 02 	sts	0x0257, r24
     988:	90 93 58 02 	sts	0x0258, r25
     98c:	a0 93 59 02 	sts	0x0259, r26
     990:	b0 93 5a 02 	sts	0x025A, r27
			rf_rx_off(); 
     994:	0e 94 25 08 	call	0x104a	; 0x104a <rf_rx_off>
     998:	21 c0       	rjmp	.+66     	; 0x9dc <_bmac_rx+0xf2>
			return 0;
     99a:	10 e0       	ldi	r17, 0x00	; 0
	}
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
     99c:	0e 94 4b 08 	call	0x1096	; 0x1096 <rf_polling_rx_packet>
     9a0:	88 23       	and	r24, r24
     9a2:	f1 f2       	breq	.-68     	; 0x960 <_bmac_rx+0x76>
			rf_rx_off(); 
			return 0;
			}        
                }
        }
        rf_rx_off();
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	0e 94 25 08 	call	0x104a	; 0x104a <rf_rx_off>
        if (n == 1) {
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <_bmac_rx+0xcc>
                // CRC and checksum passed
    		rx_buf_empty=0;
     9b0:	10 92 5c 02 	sts	0x025C, r1
                printf( "BMAC: SNR= %d [",bmac_rfRxInfo.rssi );
                for(uint8_t i=0; i<bmac_rfRxInfo.length; i++ )
                        printf( "%c", bmac_rfRxInfo.pPayload[i]);
                printf( "]\r\n" );
		#endif
		return 1;
     9b4:	14 c0       	rjmp	.+40     	; 0x9de <_bmac_rx+0xf4>
        } else 
	{
	#ifdef DEBUG 
	printf( "CRC failed!\r\n" );
	#endif 
	rx_failure_cnt++;
     9b6:	80 91 57 02 	lds	r24, 0x0257
     9ba:	90 91 58 02 	lds	r25, 0x0258
     9be:	a0 91 59 02 	lds	r26, 0x0259
     9c2:	b0 91 5a 02 	lds	r27, 0x025A
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	a1 1d       	adc	r26, r1
     9ca:	b1 1d       	adc	r27, r1
     9cc:	80 93 57 02 	sts	0x0257, r24
     9d0:	90 93 58 02 	sts	0x0258, r25
     9d4:	a0 93 59 02 	sts	0x0259, r26
     9d8:	b0 93 5a 02 	sts	0x025A, r27
     9dc:	80 e0       	ldi	r24, 0x00	; 0
	return 0; 
	}
rx_failure_cnt++;
return 0;
}
     9de:	0f 90       	pop	r0
     9e0:	cf 91       	pop	r28
     9e2:	df 91       	pop	r29
     9e4:	1f 91       	pop	r17
     9e6:	08 95       	ret

000009e8 <bmac_get_tx_done_signal>:
return(bmac_rx_pkt_signal);
}

nrk_sig_t bmac_get_tx_done_signal()
{
   nrk_signal_register(bmac_tx_pkt_done_signal); 
     9e8:	80 91 94 04 	lds	r24, 0x0494
     9ec:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <nrk_signal_register>
return(bmac_tx_pkt_done_signal);
}
     9f0:	80 91 94 04 	lds	r24, 0x0494
     9f4:	08 95       	ret

000009f6 <bmac_get_rx_pkt_signal>:
return NRK_OK;
}

nrk_sig_t bmac_get_rx_pkt_signal()
{
   nrk_signal_register(bmac_rx_pkt_signal); 
     9f6:	80 91 f8 02 	lds	r24, 0x02F8
     9fa:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <nrk_signal_register>
return(bmac_rx_pkt_signal);
}
     9fe:	80 91 f8 02 	lds	r24, 0x02F8
     a02:	08 95       	ret

00000a04 <bmac_nw_task>:
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
{
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
int8_t v;
int8_t e;
uint8_t backoff;
nrk_sig_mask_t event;

while(bmac_started()==0) nrk_wait_until_next_period();
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <bmac_nw_task+0xe>
     a0e:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <nrk_wait_until_next_period>
     a12:	80 91 5d 02 	lds	r24, 0x025D
     a16:	88 23       	and	r24, r24
     a18:	d1 f3       	breq	.-12     	; 0xa0e <bmac_nw_task+0xa>

//register the signal after bmac_init has been called
v=nrk_signal_register(bmac_enable_signal); 
     a1a:	80 91 ec 02 	lds	r24, 0x02EC
     a1e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <nrk_signal_register>
if(v==NRK_ERROR) nrk_kprintf( PSTR("Failed to register signal\r\n"));
     a22:	8f 3f       	cpi	r24, 0xFF	; 255
     a24:	21 f4       	brne	.+8      	; 0xa2e <bmac_nw_task+0x2a>
     a26:	86 eb       	ldi	r24, 0xB6	; 182
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>
	//} while(rx_buf_empty!=1);
	} else {
		event=0;
		do {
		v=nrk_signal_register(bmac_enable_signal); 
    		event=nrk_event_wait (SIG(bmac_enable_signal));
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	e9 2e       	mov	r14, r25
     a32:	f1 2c       	mov	r15, r1
     a34:	01 2d       	mov	r16, r1
     a36:	11 2d       	mov	r17, r1
    #ifdef NRK_SW_WDT
	#ifdef BMAC_SW_WDT_ID
	nrk_sw_wdt_update(BMAC_SW_WDT_ID);
	#endif
    #endif
	if(is_enabled ) { 
     a38:	80 91 60 02 	lds	r24, 0x0260
     a3c:	88 23       	and	r24, r24
     a3e:	59 f1       	breq	.+86     	; 0xa96 <bmac_nw_task+0x92>
	v=1;
	if(rx_buf_empty==1) v=_bmac_channel_check();
     a40:	80 91 5c 02 	lds	r24, 0x025C
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	41 f4       	brne	.+16     	; 0xa58 <bmac_nw_task+0x54>
     a48:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_bmac_channel_check>
	// If the buffer is full, signal the receiving task again.
	else e=nrk_event_signal (bmac_rx_pkt_signal);
	// bmac_channel check turns on radio, don't turn off if
	// data is coming.
		if(v==0)
     a4c:	88 23       	and	r24, r24
     a4e:	41 f4       	brne	.+16     	; 0xa60 <bmac_nw_task+0x5c>
			{
			if(_bmac_rx()==1)
     a50:	0e 94 75 04 	call	0x8ea	; 0x8ea <_bmac_rx>
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	21 f4       	brne	.+8      	; 0xa60 <bmac_nw_task+0x5c>
			  {
				e=nrk_event_signal (bmac_rx_pkt_signal);
     a58:	80 91 f8 02 	lds	r24, 0x02F8
     a5c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <nrk_event_signal>
				//	printf( "errno: %u \r\n",nrk_errno_get() );
				//}
			  }
			  //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));
			} 
		if(/*rx_buf_empty==1 &&*/ tx_data_ready==1)
     a60:	80 91 5b 02 	lds	r24, 0x025B
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	21 f4       	brne	.+8      	; 0xa70 <bmac_nw_task+0x6c>
			{
				rf_rx_off(); 
     a68:	0e 94 25 08 	call	0x104a	; 0x104a <rf_rx_off>
				_bmac_tx();
     a6c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_bmac_tx>
			}
	//do {
		nrk_wait(_bmac_check_period); 
     a70:	20 91 61 02 	lds	r18, 0x0261
     a74:	30 91 62 02 	lds	r19, 0x0262
     a78:	40 91 63 02 	lds	r20, 0x0263
     a7c:	50 91 64 02 	lds	r21, 0x0264
     a80:	60 91 65 02 	lds	r22, 0x0265
     a84:	70 91 66 02 	lds	r23, 0x0266
     a88:	80 91 67 02 	lds	r24, 0x0267
     a8c:	90 91 68 02 	lds	r25, 0x0268
     a90:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <nrk_wait>
     a94:	d1 cf       	rjmp	.-94     	; 0xa38 <bmac_nw_task+0x34>
	//	if(rx_buf_empty!=1)  nrk_event_signal (bmac_rx_pkt_signal);
	//} while(rx_buf_empty!=1);
	} else {
		event=0;
		do {
		v=nrk_signal_register(bmac_enable_signal); 
     a96:	80 91 ec 02 	lds	r24, 0x02EC
     a9a:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <nrk_signal_register>
    		event=nrk_event_wait (SIG(bmac_enable_signal));
     a9e:	c8 01       	movw	r24, r16
     aa0:	b7 01       	movw	r22, r14
     aa2:	00 90 ec 02 	lds	r0, 0x02EC
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <bmac_nw_task+0xac>
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	88 1f       	adc	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <bmac_nw_task+0xa4>
     ab4:	0e 94 2a 1c 	call	0x3854	; 0x3854 <nrk_event_wait>
		} while((event & SIG(bmac_enable_signal))==0);
     ab8:	00 90 ec 02 	lds	r0, 0x02EC
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <bmac_nw_task+0xc2>
     abe:	96 95       	lsr	r25
     ac0:	87 95       	ror	r24
     ac2:	77 95       	ror	r23
     ac4:	67 95       	ror	r22
     ac6:	0a 94       	dec	r0
     ac8:	d2 f7       	brpl	.-12     	; 0xabe <bmac_nw_task+0xba>
     aca:	61 70       	andi	r22, 0x01	; 1
     acc:	70 70       	andi	r23, 0x00	; 0
     ace:	80 70       	andi	r24, 0x00	; 0
     ad0:	90 70       	andi	r25, 0x00	; 0
     ad2:	61 15       	cp	r22, r1
     ad4:	71 05       	cpc	r23, r1
     ad6:	81 05       	cpc	r24, r1
     ad8:	91 05       	cpc	r25, r1
     ada:	e9 f2       	breq	.-70     	; 0xa96 <bmac_nw_task+0x92>
     adc:	ad cf       	rjmp	.-166    	; 0xa38 <bmac_nw_task+0x34>

00000ade <bmac_tx_pkt>:
return(bmac_tx_pkt_done_signal);
}


int8_t bmac_tx_pkt(uint8_t *buf, uint8_t len)
{
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	0f 92       	push	r0
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	7c 01       	movw	r14, r24
uint32_t mask;
if(tx_data_ready==1) return NRK_ERROR;
     af2:	80 91 5b 02 	lds	r24, 0x025B
     af6:	81 30       	cpi	r24, 0x01	; 1
     af8:	09 f4       	brne	.+2      	; 0xafc <bmac_tx_pkt+0x1e>
     afa:	46 c0       	rjmp	.+140    	; 0xb88 <bmac_tx_pkt+0xaa>
	if( nrk_reserve_consume(tx_reserve)==NRK_ERROR ) { 
		return NRK_ERROR;
		}
	}
#endif
nrk_signal_register(bmac_tx_pkt_done_signal); 
     afc:	80 91 94 04 	lds	r24, 0x0494
     b00:	69 83       	std	Y+1, r22	; 0x01
     b02:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <nrk_signal_register>
tx_data_ready=1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	80 93 5b 02 	sts	0x025B, r24
bmac_rfTxInfo.pPayload=buf;
     b0c:	f0 92 f1 02 	sts	0x02F1, r15
     b10:	e0 92 f0 02 	sts	0x02F0, r14
bmac_rfTxInfo.length=len;
     b14:	69 81       	ldd	r22, Y+1	; 0x01
     b16:	60 93 ef 02 	sts	0x02EF, r22
#ifdef DEBUG
nrk_kprintf( PSTR("Waiting for tx done signal\r\n"));
#endif
mask=nrk_event_wait (SIG(bmac_tx_pkt_done_signal));
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	00 90 94 04 	lds	r0, 0x0494
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <bmac_tx_pkt+0x52>
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	0a 94       	dec	r0
     b32:	d2 f7       	brpl	.-12     	; 0xb28 <bmac_tx_pkt+0x4a>
     b34:	0e 94 2a 1c 	call	0x3854	; 0x3854 <nrk_event_wait>
     b38:	7b 01       	movw	r14, r22
     b3a:	8c 01       	movw	r16, r24
if(mask==0) nrk_kprintf( PSTR("BMAC TX: Error calling event wait\r\n"));
     b3c:	61 15       	cp	r22, r1
     b3e:	71 05       	cpc	r23, r1
     b40:	81 05       	cpc	r24, r1
     b42:	91 05       	cpc	r25, r1
     b44:	21 f4       	brne	.+8      	; 0xb4e <bmac_tx_pkt+0x70>
     b46:	85 ef       	ldi	r24, 0xF5	; 245
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>
if((mask&SIG(bmac_tx_pkt_done_signal))==0) nrk_kprintf( PSTR("BMAC TX: Woke up on wrong signal\r\n"));
     b4e:	d8 01       	movw	r26, r16
     b50:	c7 01       	movw	r24, r14
     b52:	00 90 94 04 	lds	r0, 0x0494
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <bmac_tx_pkt+0x82>
     b58:	b6 95       	lsr	r27
     b5a:	a7 95       	ror	r26
     b5c:	97 95       	ror	r25
     b5e:	87 95       	ror	r24
     b60:	0a 94       	dec	r0
     b62:	d2 f7       	brpl	.-12     	; 0xb58 <bmac_tx_pkt+0x7a>
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	a0 70       	andi	r26, 0x00	; 0
     b6a:	b0 70       	andi	r27, 0x00	; 0
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	a1 05       	cpc	r26, r1
     b70:	b1 05       	cpc	r27, r1
     b72:	21 f4       	brne	.+8      	; 0xb7c <bmac_tx_pkt+0x9e>
     b74:	82 ed       	ldi	r24, 0xD2	; 210
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>
if(pkt_got_ack) return NRK_OK;
     b7c:	80 91 5e 02 	lds	r24, 0x025E
     b80:	88 23       	and	r24, r24
     b82:	11 f0       	breq	.+4      	; 0xb88 <bmac_tx_pkt+0xaa>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <bmac_tx_pkt+0xac>
     b88:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_ERROR;
}
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	08 95       	ret

00000b9a <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt()
{
nrk_sig_mask_t event;

if(bmac_rx_pkt_ready()==1) return NRK_OK;
     b9a:	80 91 5c 02 	lds	r24, 0x025C
     b9e:	88 23       	and	r24, r24
     ba0:	39 f1       	breq	.+78     	; 0xbf0 <bmac_wait_until_rx_pkt+0x56>

    nrk_signal_register(bmac_rx_pkt_signal); 
     ba2:	80 91 f8 02 	lds	r24, 0x02F8
     ba6:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <nrk_signal_register>
    event=nrk_event_wait (SIG(bmac_rx_pkt_signal));
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	00 90 f8 02 	lds	r0, 0x02F8
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <bmac_wait_until_rx_pkt+0x26>
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	88 1f       	adc	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	0a 94       	dec	r0
     bc2:	d2 f7       	brpl	.-12     	; 0xbb8 <bmac_wait_until_rx_pkt+0x1e>
     bc4:	0e 94 2a 1c 	call	0x3854	; 0x3854 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
if((event & SIG(bmac_rx_pkt_signal)) == 0 ) return NRK_ERROR;
     bc8:	00 90 f8 02 	lds	r0, 0x02F8
     bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <bmac_wait_until_rx_pkt+0x3c>
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	77 95       	ror	r23
     bd4:	67 95       	ror	r22
     bd6:	0a 94       	dec	r0
     bd8:	d2 f7       	brpl	.-12     	; 0xbce <bmac_wait_until_rx_pkt+0x34>
     bda:	61 70       	andi	r22, 0x01	; 1
     bdc:	70 70       	andi	r23, 0x00	; 0
     bde:	80 70       	andi	r24, 0x00	; 0
     be0:	90 70       	andi	r25, 0x00	; 0
     be2:	61 15       	cp	r22, r1
     be4:	71 05       	cpc	r23, r1
     be6:	81 05       	cpc	r24, r1
     be8:	91 05       	cpc	r25, r1
     bea:	11 f4       	brne	.+4      	; 0xbf0 <bmac_wait_until_rx_pkt+0x56>
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	08 95       	ret
     bf0:	81 e0       	ldi	r24, 0x01	; 1
else return NRK_OK;
}
     bf2:	08 95       	ret

00000bf4 <bmac_enable>:
  rf_power_down();
}

void bmac_enable()
{
  is_enabled=1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 60 02 	sts	0x0260, r24
  rf_power_up();
     bfa:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     bfe:	80 91 ec 02 	lds	r24, 0x02EC
     c02:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <nrk_event_signal>
}
     c06:	08 95       	ret

00000c08 <bmac_disable>:
return NRK_OK;
}

void bmac_disable()
{
  is_enabled=0;
     c08:	10 92 60 02 	sts	0x0260, r1
  rf_power_down();
     c0c:	0e 94 10 07 	call	0xe20	; 0xe20 <rf_power_down>
}
     c10:	08 95       	ret

00000c12 <bmac_set_channel>:
  rf_set_cca_thresh(thresh); 
return NRK_OK;
}

int8_t bmac_set_channel(uint8_t chan)
{
     c12:	68 2f       	mov	r22, r24
if(chan>26) return NRK_ERROR;
     c14:	8b 31       	cpi	r24, 0x1B	; 27
     c16:	10 f0       	brcs	.+4      	; 0xc1c <bmac_set_channel+0xa>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	08 95       	ret
g_chan=chan;
     c1c:	80 93 5f 02 	sts	0x025F, r24
rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     c20:	8a e0       	ldi	r24, 0x0A	; 10
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	4f ef       	ldi	r20, 0xFF	; 255
     c26:	5f ef       	ldi	r21, 0xFF	; 255
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <rf_init>
     c30:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
     c32:	08 95       	ret

00000c34 <bmac_init>:
    rx_buf_empty=1;
return NRK_OK;
}

int8_t bmac_init (uint8_t chan)
{
     c34:	1f 93       	push	r17
     c36:	18 2f       	mov	r17, r24
    bmac_running=0;
     c38:	10 92 5d 02 	sts	0x025D, r1
    tx_reserve=-1;
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	80 93 6a 02 	sts	0x026A, r24
    cca_active=true;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 69 02 	sts	0x0269, r24
    rx_failure_cnt=0;
     c48:	10 92 57 02 	sts	0x0257, r1
     c4c:	10 92 58 02 	sts	0x0258, r1
     c50:	10 92 59 02 	sts	0x0259, r1
     c54:	10 92 5a 02 	sts	0x025A, r1
	#endif
    #endif



    _bmac_check_period.secs=0;
     c58:	10 92 61 02 	sts	0x0261, r1
     c5c:	10 92 62 02 	sts	0x0262, r1
     c60:	10 92 63 02 	sts	0x0263, r1
     c64:	10 92 64 02 	sts	0x0264, r1
    _bmac_check_period.nano_secs=BMAC_DEFAULT_CHECK_RATE_MS*NANOS_PER_MS;
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	91 ee       	ldi	r25, 0xE1	; 225
     c6c:	a5 ef       	ldi	r26, 0xF5	; 245
     c6e:	b5 e0       	ldi	r27, 0x05	; 5
     c70:	80 93 65 02 	sts	0x0265, r24
     c74:	90 93 66 02 	sts	0x0266, r25
     c78:	a0 93 67 02 	sts	0x0267, r26
     c7c:	b0 93 68 02 	sts	0x0268, r27
    bmac_rx_pkt_signal=nrk_signal_create();
     c80:	0e 94 66 19 	call	0x32cc	; 0x32cc <nrk_signal_create>
     c84:	80 93 f8 02 	sts	0x02F8, r24
    if(bmac_rx_pkt_signal==NRK_ERROR)
     c88:	8f 3f       	cpi	r24, 0xFF	; 255
     c8a:	19 f4       	brne	.+6      	; 0xc92 <bmac_init+0x5e>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating rx signal failed\r\n"));
     c8c:	8d e6       	ldi	r24, 0x6D	; 109
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <bmac_init+0x6e>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
    bmac_tx_pkt_done_signal=nrk_signal_create();
     c92:	0e 94 66 19 	call	0x32cc	; 0x32cc <nrk_signal_create>
     c96:	80 93 94 04 	sts	0x0494, r24
    if(bmac_tx_pkt_done_signal==NRK_ERROR)
     c9a:	8f 3f       	cpi	r24, 0xFF	; 255
     c9c:	71 f4       	brne	.+28     	; 0xcba <bmac_init+0x86>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating tx signal failed\r\n"));
     c9e:	85 e4       	ldi	r24, 0x45	; 69
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     ca6:	e0 91 30 05 	lds	r30, 0x0530
     caa:	f0 91 31 05 	lds	r31, 0x0531
     cae:	8e e0       	ldi	r24, 0x0E	; 14
     cb0:	60 85       	ldd	r22, Z+8	; 0x08
     cb2:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
     cb8:	50 c0       	rjmp	.+160    	; 0xd5a <bmac_init+0x126>
	}
    bmac_enable_signal=nrk_signal_create();
     cba:	0e 94 66 19 	call	0x32cc	; 0x32cc <nrk_signal_create>
     cbe:	80 93 ec 02 	sts	0x02EC, r24
    if(bmac_enable_signal==NRK_ERROR)
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	19 f4       	brne	.+6      	; 0xccc <bmac_init+0x98>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating enable signal failed\r\n"));
     cc6:	89 e1       	ldi	r24, 0x19	; 25
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	eb cf       	rjmp	.-42     	; 0xca2 <bmac_init+0x6e>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}

     
    tx_data_ready=0;
     ccc:	10 92 5b 02 	sts	0x025B, r1
    // Set the one main rx buffer
    rx_buf_empty=0;
     cd0:	10 92 5c 02 	sts	0x025C, r1
    bmac_rfRxInfo.pPayload = NULL;
     cd4:	10 92 10 04 	sts	0x0410, r1
     cd8:	10 92 0f 04 	sts	0x040F, r1
    bmac_rfRxInfo.max_length = 0;
     cdc:	10 92 0e 04 	sts	0x040E, r1

    // Setup the cc2420 chip
    rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     ce0:	8a e0       	ldi	r24, 0x0A	; 10
     ce2:	94 e0       	ldi	r25, 0x04	; 4
     ce4:	61 2f       	mov	r22, r17
     ce6:	4f ef       	ldi	r20, 0xFF	; 255
     ce8:	5f ef       	ldi	r21, 0xFF	; 255
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <rf_init>
    g_chan=chan;
     cf2:	10 93 5f 02 	sts	0x025F, r17
 
    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
     cf6:	c0 98       	cbi	0x18, 0	; 24
     cf8:	83 e1       	ldi	r24, 0x13	; 19
     cfa:	8f b9       	out	0x0f, r24	; 15
     cfc:	77 9b       	sbis	0x0e, 7	; 14
     cfe:	fe cf       	rjmp	.-4      	; 0xcfc <bmac_init+0xc8>
     d00:	85 ee       	ldi	r24, 0xE5	; 229
     d02:	8f b9       	out	0x0f, r24	; 15
     d04:	77 9b       	sbis	0x0e, 7	; 14
     d06:	fe cf       	rjmp	.-4      	; 0xd04 <bmac_init+0xd0>
     d08:	80 e8       	ldi	r24, 0x80	; 128
     d0a:	8f b9       	out	0x0f, r24	; 15
     d0c:	77 9b       	sbis	0x0e, 7	; 14
     d0e:	fe cf       	rjmp	.-4      	; 0xd0c <bmac_init+0xd8>
     d10:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
     d12:	c0 98       	cbi	0x18, 0	; 24
     d14:	85 e1       	ldi	r24, 0x15	; 21
     d16:	8f b9       	out	0x0f, r24	; 15
     d18:	77 9b       	sbis	0x0e, 7	; 14
     d1a:	fe cf       	rjmp	.-4      	; 0xd18 <bmac_init+0xe4>
     d1c:	80 e8       	ldi	r24, 0x80	; 128
     d1e:	8f b9       	out	0x0f, r24	; 15
     d20:	77 9b       	sbis	0x0e, 7	; 14
     d22:	fe cf       	rjmp	.-4      	; 0xd20 <bmac_init+0xec>
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	8f b9       	out	0x0f, r24	; 15
     d28:	77 9b       	sbis	0x0e, 7	; 14
     d2a:	fe cf       	rjmp	.-4      	; 0xd28 <bmac_init+0xf4>
     d2c:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
     d2e:	c0 98       	cbi	0x18, 0	; 24
     d30:	87 e1       	ldi	r24, 0x17	; 23
     d32:	8f b9       	out	0x0f, r24	; 15
     d34:	77 9b       	sbis	0x0e, 7	; 14
     d36:	fe cf       	rjmp	.-4      	; 0xd34 <bmac_init+0x100>
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	8f b9       	out	0x0f, r24	; 15
     d3c:	77 9b       	sbis	0x0e, 7	; 14
     d3e:	fe cf       	rjmp	.-4      	; 0xd3c <bmac_init+0x108>
     d40:	86 e5       	ldi	r24, 0x56	; 86
     d42:	8f b9       	out	0x0f, r24	; 15
     d44:	77 9b       	sbis	0x0e, 7	; 14
     d46:	fe cf       	rjmp	.-4      	; 0xd44 <bmac_init+0x110>
     d48:	c0 9a       	sbi	0x18, 0	; 24
    // default cca thresh of -45
    //rf_set_cca_thresh(-45); 
    rf_set_cca_thresh(-45); 
     d4a:	83 ed       	ldi	r24, 0xD3	; 211
     d4c:	0e 94 42 0a 	call	0x1484	; 0x1484 <rf_set_cca_thresh>
    bmac_running=1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 5d 02 	sts	0x025D, r24
    is_enabled=1;
     d56:	80 93 60 02 	sts	0x0260, r24
    return NRK_OK;
}
     d5a:	1f 91       	pop	r17
     d5c:	08 95       	ret

00000d5e <bmac_set_cca_thresh>:
cca_active=active;
}

int8_t bmac_set_cca_thresh(int8_t thresh)
{
  rf_set_cca_thresh(thresh); 
     d5e:	0e 94 42 0a 	call	0x1484	; 0x1484 <rf_set_cca_thresh>
return NRK_OK;
}
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	08 95       	ret

00000d66 <bmac_set_rf_power>:
}


int8_t bmac_set_rf_power(uint8_t power)
{
if(power>31) return NRK_ERROR;
     d66:	80 32       	cpi	r24, 0x20	; 32
     d68:	10 f0       	brcs	.+4      	; 0xd6e <bmac_set_rf_power+0x8>
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	08 95       	ret
rf_tx_power(power);
     d6e:	0e 94 92 07 	call	0xf24	; 0xf24 <rf_tx_power>
     d72:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
     d74:	08 95       	ret

00000d76 <bmac_encryption_disable>:
  return NRK_OK;
}

int8_t bmac_encryption_disable()
{
  rf_security_disable();
     d76:	0e 94 7c 07 	call	0xef8	; 0xef8 <rf_security_disable>
  return NRK_OK;
}
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	08 95       	ret

00000d7e <bmac_encryption_enable>:
  return NRK_OK;
}

int8_t bmac_encryption_enable()
{
  rf_security_enable();
     d7e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <rf_security_enable>
  return NRK_OK;
}
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	08 95       	ret

00000d86 <bmac_encryption_set_key>:
return rf_security_last_pkt_status();
}

int8_t bmac_encryption_set_key(uint8_t *key, uint8_t len)
{
  if(len!=16) return NRK_ERROR;
     d86:	60 31       	cpi	r22, 0x10	; 16
     d88:	11 f0       	breq	.+4      	; 0xd8e <bmac_encryption_set_key+0x8>
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	08 95       	ret
  rf_security_set_key(key);
     d8e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <rf_security_set_key>
     d92:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_OK;
}
     d94:	08 95       	ret

00000d96 <bmac_rx_pkt_is_encrypted>:
return NRK_OK;
}

int8_t bmac_rx_pkt_is_encrypted()
{
return rf_security_last_pkt_status();
     d96:	0e 94 1f 07 	call	0xe3e	; 0xe3e <rf_security_last_pkt_status>
}
     d9a:	08 95       	ret

00000d9c <bmac_addr_decode_set_my_mac>:
return NRK_OK;
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
rf_addr_decode_set_my_mac(my_mac);
     d9c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <rf_addr_decode_set_my_mac>
return NRK_OK;
}
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	08 95       	ret

00000da4 <bmac_addr_decode_enable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_enable() 
{
rf_addr_decode_enable();
     da4:	0e 94 a4 07 	call	0xf48	; 0xf48 <rf_addr_decode_enable>
return NRK_OK;
}
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	08 95       	ret

00000dac <bmac_addr_decode_disable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_disable() 
{
rf_addr_decode_disable();
     dac:	0e 94 ba 07 	call	0xf74	; 0xf74 <rf_addr_decode_disable>
return NRK_OK;
}
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	08 95       	ret

00000db4 <bmac_auto_ack_enable>:
return NRK_OK;
}

int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
     db4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <rf_auto_ack_enable>
return NRK_OK;
}
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	08 95       	ret

00000dbc <bmac_auto_ack_disable>:
}


int8_t  bmac_auto_ack_disable() 
{
rf_auto_ack_disable();
     dbc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <rf_auto_ack_disable>
return NRK_OK;
}
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	08 95       	ret

00000dc4 <bmac_encryption_set_ctr_counter>:
    return pRRI;
}

int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
{
if(len!=4 ) return NRK_ERROR;
     dc4:	64 30       	cpi	r22, 0x04	; 4
     dc6:	11 f0       	breq	.+4      	; 0xdcc <bmac_encryption_set_ctr_counter+0x8>
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	08 95       	ret
rf_security_set_ctr_counter(counter);
     dcc:	0e 94 22 07 	call	0xe44	; 0xe44 <rf_security_set_ctr_counter>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
   return NRK_OK;
}
     dd2:	08 95       	ret

00000dd4 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9c 01       	movw	r18, r24
     dd8:	2b 50       	subi	r18, 0x0B	; 11
     dda:	30 40       	sbci	r19, 0x00	; 0
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	86 5a       	subi	r24, 0xA6	; 166
     de6:	9e 4b       	sbci	r25, 0xBE	; 190
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     de8:	82 0f       	add	r24, r18
     dea:	93 1f       	adc	r25, r19
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     dec:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     dee:	c0 98       	cbi	0x18, 0	; 24
     df0:	28 e1       	ldi	r18, 0x18	; 24
     df2:	2f b9       	out	0x0f, r18	; 15
     df4:	77 9b       	sbis	0x0e, 7	; 14
     df6:	fe cf       	rjmp	.-4      	; 0xdf4 <halRfSetChannel+0x20>
     df8:	9f b9       	out	0x0f, r25	; 15
     dfa:	77 9b       	sbis	0x0e, 7	; 14
     dfc:	fe cf       	rjmp	.-4      	; 0xdfa <halRfSetChannel+0x26>
     dfe:	8f b9       	out	0x0f, r24	; 15
     e00:	77 9b       	sbis	0x0e, 7	; 14
     e02:	fe cf       	rjmp	.-4      	; 0xe00 <halRfSetChannel+0x2c>
     e04:	c0 9a       	sbi	0x18, 0	; 24
	ENABLE_GLOBAL_INT();
     e06:	78 94       	sei

} // rfSetChannel
     e08:	08 95       	ret

00000e0a <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
     e0a:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
     e0c:	c0 98       	cbi	0x18, 0	; 24
     e0e:	1f b8       	out	0x0f, r1	; 15
     e10:	77 9b       	sbis	0x0e, 7	; 14
     e12:	fe cf       	rjmp	.-4      	; 0xe10 <halRfWaitForCrystalOscillator+0x6>
     e14:	8f b1       	in	r24, 0x0f	; 15
     e16:	c0 9a       	sbi	0x18, 0	; 24
	    ENABLE_GLOBAL_INT();
     e18:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
     e1a:	86 ff       	sbrs	r24, 6
     e1c:	f6 cf       	rjmp	.-20     	; 0xe0a <halRfWaitForCrystalOscillator>

} // halRfWaitForCrystalOscillator
     e1e:	08 95       	ret

00000e20 <rf_power_down>:
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

void rf_power_down()
{
    DISABLE_GLOBAL_INT();
     e20:	f8 94       	cli
    FASTSPI_STROBE(CC2420_SXOSCOFF);
     e22:	c0 98       	cbi	0x18, 0	; 24
     e24:	87 e0       	ldi	r24, 0x07	; 7
     e26:	8f b9       	out	0x0f, r24	; 15
     e28:	77 9b       	sbis	0x0e, 7	; 14
     e2a:	fe cf       	rjmp	.-4      	; 0xe28 <rf_power_down+0x8>
     e2c:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
     e2e:	c0 98       	cbi	0x18, 0	; 24
     e30:	86 e0       	ldi	r24, 0x06	; 6
     e32:	8f b9       	out	0x0f, r24	; 15
     e34:	77 9b       	sbis	0x0e, 7	; 14
     e36:	fe cf       	rjmp	.-4      	; 0xe34 <rf_power_down+0x14>
     e38:	c0 9a       	sbi	0x18, 0	; 24
    ENABLE_GLOBAL_INT();
     e3a:	78 94       	sei
}
     e3c:	08 95       	ret

00000e3e <rf_security_last_pkt_status>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
     e3e:	80 91 af 04 	lds	r24, 0x04AF
     e42:	08 95       	ret

00000e44 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     e44:	fc 01       	movw	r30, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
     e46:	c0 98       	cbi	0x18, 0	; 24
     e48:	89 ec       	ldi	r24, 0xC9	; 201
     e4a:	8f b9       	out	0x0f, r24	; 15
     e4c:	77 9b       	sbis	0x0e, 7	; 14
     e4e:	fe cf       	rjmp	.-4      	; 0xe4c <rf_security_set_ctr_counter+0x8>
     e50:	80 e8       	ldi	r24, 0x80	; 128
     e52:	8f b9       	out	0x0f, r24	; 15
     e54:	77 9b       	sbis	0x0e, 7	; 14
     e56:	fe cf       	rjmp	.-4      	; 0xe54 <rf_security_set_ctr_counter+0x10>
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	81 50       	subi	r24, 0x01	; 1
     e5c:	df 01       	movw	r26, r30
     e5e:	a8 0f       	add	r26, r24
     e60:	b1 1d       	adc	r27, r1
     e62:	9c 91       	ld	r25, X
     e64:	9f b9       	out	0x0f, r25	; 15
     e66:	77 9b       	sbis	0x0e, 7	; 14
     e68:	fe cf       	rjmp	.-4      	; 0xe66 <rf_security_set_ctr_counter+0x22>
     e6a:	88 23       	and	r24, r24
     e6c:	b1 f7       	brne	.-20     	; 0xe5a <rf_security_set_ctr_counter+0x16>
     e6e:	c0 9a       	sbi	0x18, 0	; 24
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
     e70:	c0 98       	cbi	0x18, 0	; 24
     e72:	8b ec       	ldi	r24, 0xCB	; 203
     e74:	8f b9       	out	0x0f, r24	; 15
     e76:	77 9b       	sbis	0x0e, 7	; 14
     e78:	fe cf       	rjmp	.-4      	; 0xe76 <rf_security_set_ctr_counter+0x32>
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	8f b9       	out	0x0f, r24	; 15
     e7e:	77 9b       	sbis	0x0e, 7	; 14
     e80:	fe cf       	rjmp	.-4      	; 0xe7e <rf_security_set_ctr_counter+0x3a>
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	df 01       	movw	r26, r30
     e88:	a8 0f       	add	r26, r24
     e8a:	b1 1d       	adc	r27, r1
     e8c:	12 96       	adiw	r26, 0x02	; 2
     e8e:	9c 91       	ld	r25, X
     e90:	12 97       	sbiw	r26, 0x02	; 2
     e92:	9f b9       	out	0x0f, r25	; 15
     e94:	77 9b       	sbis	0x0e, 7	; 14
     e96:	fe cf       	rjmp	.-4      	; 0xe94 <rf_security_set_ctr_counter+0x50>
     e98:	88 23       	and	r24, r24
     e9a:	a1 f7       	brne	.-24     	; 0xe84 <rf_security_set_ctr_counter+0x40>
     e9c:	c0 9a       	sbi	0x18, 0	; 24
tx_ctr[0]=counter[0];
     e9e:	80 81       	ld	r24, Z
     ea0:	80 93 b0 04 	sts	0x04B0, r24
tx_ctr[1]=counter[1];
     ea4:	81 81       	ldd	r24, Z+1	; 0x01
     ea6:	80 93 b1 04 	sts	0x04B1, r24
tx_ctr[2]=counter[2];
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	80 93 b2 04 	sts	0x04B2, r24
tx_ctr[3]=counter[3];
     eb0:	83 81       	ldd	r24, Z+3	; 0x03
     eb2:	80 93 b3 04 	sts	0x04B3, r24
}
     eb6:	08 95       	ret

00000eb8 <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
     eb8:	c0 98       	cbi	0x18, 0	; 24
     eba:	89 e1       	ldi	r24, 0x19	; 25
     ebc:	8f b9       	out	0x0f, r24	; 15
     ebe:	77 9b       	sbis	0x0e, 7	; 14
     ec0:	fe cf       	rjmp	.-4      	; 0xebe <rf_security_enable+0x6>
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	8f b9       	out	0x0f, r24	; 15
     ec6:	77 9b       	sbis	0x0e, 7	; 14
     ec8:	fe cf       	rjmp	.-4      	; 0xec6 <rf_security_enable+0xe>
     eca:	86 e0       	ldi	r24, 0x06	; 6
     ecc:	8f b9       	out	0x0f, r24	; 15
     ece:	77 9b       	sbis	0x0e, 7	; 14
     ed0:	fe cf       	rjmp	.-4      	; 0xece <rf_security_enable+0x16>
     ed2:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
     ed4:	c0 98       	cbi	0x18, 0	; 24
     ed6:	8a e1       	ldi	r24, 0x1A	; 26
     ed8:	8f b9       	out	0x0f, r24	; 15
     eda:	77 9b       	sbis	0x0e, 7	; 14
     edc:	fe cf       	rjmp	.-4      	; 0xeda <rf_security_enable+0x22>
     ede:	8e e0       	ldi	r24, 0x0E	; 14
     ee0:	8f b9       	out	0x0f, r24	; 15
     ee2:	77 9b       	sbis	0x0e, 7	; 14
     ee4:	fe cf       	rjmp	.-4      	; 0xee2 <rf_security_enable+0x2a>
     ee6:	8e e0       	ldi	r24, 0x0E	; 14
     ee8:	8f b9       	out	0x0f, r24	; 15
     eea:	77 9b       	sbis	0x0e, 7	; 14
     eec:	fe cf       	rjmp	.-4      	; 0xeea <rf_security_enable+0x32>
     eee:	c0 9a       	sbi	0x18, 0	; 24

security_enable=1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 a0 04 	sts	0x04A0, r24
}
     ef6:	08 95       	ret

00000ef8 <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
     ef8:	c0 98       	cbi	0x18, 0	; 24
     efa:	89 e1       	ldi	r24, 0x19	; 25
     efc:	8f b9       	out	0x0f, r24	; 15
     efe:	77 9b       	sbis	0x0e, 7	; 14
     f00:	fe cf       	rjmp	.-4      	; 0xefe <rf_security_disable+0x6>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	8f b9       	out	0x0f, r24	; 15
     f06:	77 9b       	sbis	0x0e, 7	; 14
     f08:	fe cf       	rjmp	.-4      	; 0xf06 <rf_security_disable+0xe>
     f0a:	84 ec       	ldi	r24, 0xC4	; 196
     f0c:	8f b9       	out	0x0f, r24	; 15
     f0e:	77 9b       	sbis	0x0e, 7	; 14
     f10:	fe cf       	rjmp	.-4      	; 0xf0e <rf_security_disable+0x16>
     f12:	c0 9a       	sbi	0x18, 0	; 24
  security_enable=0;
     f14:	10 92 a0 04 	sts	0x04A0, r1
}
     f18:	08 95       	ret

00000f1a <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     f1a:	80 91 9e 04 	lds	r24, 0x049E
     f1e:	90 91 9f 04 	lds	r25, 0x049F
     f22:	08 95       	ret

00000f24 <rf_tx_power>:
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	8f 71       	andi	r24, 0x1F	; 31
     f28:	90 70       	andi	r25, 0x00	; 0
     f2a:	80 6e       	ori	r24, 0xE0	; 224
     f2c:	90 6a       	ori	r25, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
     f2e:	c0 98       	cbi	0x18, 0	; 24
     f30:	25 e1       	ldi	r18, 0x15	; 21
     f32:	2f b9       	out	0x0f, r18	; 15
     f34:	77 9b       	sbis	0x0e, 7	; 14
     f36:	fe cf       	rjmp	.-4      	; 0xf34 <rf_tx_power+0x10>
     f38:	9f b9       	out	0x0f, r25	; 15
     f3a:	77 9b       	sbis	0x0e, 7	; 14
     f3c:	fe cf       	rjmp	.-4      	; 0xf3a <rf_tx_power+0x16>
     f3e:	8f b9       	out	0x0f, r24	; 15
     f40:	77 9b       	sbis	0x0e, 7	; 14
     f42:	fe cf       	rjmp	.-4      	; 0xf40 <rf_tx_power+0x1c>
     f44:	c0 9a       	sbi	0x18, 0	; 24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
     f46:	08 95       	ret

00000f48 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
     f48:	80 91 a1 04 	lds	r24, 0x04A1
     f4c:	90 91 a2 04 	lds	r25, 0x04A2
     f50:	98 60       	ori	r25, 0x08	; 8
     f52:	90 93 a2 04 	sts	0x04A2, r25
     f56:	80 93 a1 04 	sts	0x04A1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     f5a:	c0 98       	cbi	0x18, 0	; 24
     f5c:	21 e1       	ldi	r18, 0x11	; 17
     f5e:	2f b9       	out	0x0f, r18	; 15
     f60:	77 9b       	sbis	0x0e, 7	; 14
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <rf_addr_decode_enable+0x18>
     f64:	9f b9       	out	0x0f, r25	; 15
     f66:	77 9b       	sbis	0x0e, 7	; 14
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <rf_addr_decode_enable+0x1e>
     f6a:	8f b9       	out	0x0f, r24	; 15
     f6c:	77 9b       	sbis	0x0e, 7	; 14
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <rf_addr_decode_enable+0x24>
     f70:	c0 9a       	sbi	0x18, 0	; 24
}
     f72:	08 95       	ret

00000f74 <rf_addr_decode_disable>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
     f74:	80 91 a1 04 	lds	r24, 0x04A1
     f78:	90 91 a2 04 	lds	r25, 0x04A2
     f7c:	97 7f       	andi	r25, 0xF7	; 247
     f7e:	90 93 a2 04 	sts	0x04A2, r25
     f82:	80 93 a1 04 	sts	0x04A1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     f86:	c0 98       	cbi	0x18, 0	; 24
     f88:	21 e1       	ldi	r18, 0x11	; 17
     f8a:	2f b9       	out	0x0f, r18	; 15
     f8c:	77 9b       	sbis	0x0e, 7	; 14
     f8e:	fe cf       	rjmp	.-4      	; 0xf8c <rf_addr_decode_disable+0x18>
     f90:	9f b9       	out	0x0f, r25	; 15
     f92:	77 9b       	sbis	0x0e, 7	; 14
     f94:	fe cf       	rjmp	.-4      	; 0xf92 <rf_addr_decode_disable+0x1e>
     f96:	8f b9       	out	0x0f, r24	; 15
     f98:	77 9b       	sbis	0x0e, 7	; 14
     f9a:	fe cf       	rjmp	.-4      	; 0xf98 <rf_addr_decode_disable+0x24>
     f9c:	c0 9a       	sbi	0x18, 0	; 24
}
     f9e:	08 95       	ret

00000fa0 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 ae 04 	sts	0x04AE, r24
    mdmctrl0 |= 0x0010;
     fa6:	80 91 a1 04 	lds	r24, 0x04A1
     faa:	90 91 a2 04 	lds	r25, 0x04A2
     fae:	80 61       	ori	r24, 0x10	; 16
     fb0:	90 93 a2 04 	sts	0x04A2, r25
     fb4:	80 93 a1 04 	sts	0x04A1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
     fb8:	c0 98       	cbi	0x18, 0	; 24
     fba:	21 e1       	ldi	r18, 0x11	; 17
     fbc:	2f b9       	out	0x0f, r18	; 15
     fbe:	77 9b       	sbis	0x0e, 7	; 14
     fc0:	fe cf       	rjmp	.-4      	; 0xfbe <rf_auto_ack_enable+0x1e>
     fc2:	9f b9       	out	0x0f, r25	; 15
     fc4:	77 9b       	sbis	0x0e, 7	; 14
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <rf_auto_ack_enable+0x24>
     fc8:	8f b9       	out	0x0f, r24	; 15
     fca:	77 9b       	sbis	0x0e, 7	; 14
     fcc:	fe cf       	rjmp	.-4      	; 0xfca <rf_auto_ack_enable+0x2a>
     fce:	c0 9a       	sbi	0x18, 0	; 24
}
     fd0:	08 95       	ret

00000fd2 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
     fd2:	10 92 ae 04 	sts	0x04AE, r1
    mdmctrl0 &= (~0x0010);
     fd6:	80 91 a1 04 	lds	r24, 0x04A1
     fda:	90 91 a2 04 	lds	r25, 0x04A2
     fde:	8f 7e       	andi	r24, 0xEF	; 239
     fe0:	90 93 a2 04 	sts	0x04A2, r25
     fe4:	80 93 a1 04 	sts	0x04A1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
     fe8:	c0 98       	cbi	0x18, 0	; 24
     fea:	21 e1       	ldi	r18, 0x11	; 17
     fec:	2f b9       	out	0x0f, r18	; 15
     fee:	77 9b       	sbis	0x0e, 7	; 14
     ff0:	fe cf       	rjmp	.-4      	; 0xfee <rf_auto_ack_disable+0x1c>
     ff2:	9f b9       	out	0x0f, r25	; 15
     ff4:	77 9b       	sbis	0x0e, 7	; 14
     ff6:	fe cf       	rjmp	.-4      	; 0xff4 <rf_auto_ack_disable+0x22>
     ff8:	8f b9       	out	0x0f, r24	; 15
     ffa:	77 9b       	sbis	0x0e, 7	; 14
     ffc:	fe cf       	rjmp	.-4      	; 0xffa <rf_auto_ack_disable+0x28>
     ffe:	c0 9a       	sbi	0x18, 0	; 24
}
    1000:	08 95       	ret

00001002 <rf_rx_on>:
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	80 93 ab 04 	sts	0x04AB, r24

#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SRXON);
    1008:	c0 98       	cbi	0x18, 0	; 24
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	8f b9       	out	0x0f, r24	; 15
    100e:	77 9b       	sbis	0x0e, 7	; 14
    1010:	fe cf       	rjmp	.-4      	; 0x100e <rf_rx_on+0xc>
    1012:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1014:	c0 98       	cbi	0x18, 0	; 24
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	8f b9       	out	0x0f, r24	; 15
    101a:	77 9b       	sbis	0x0e, 7	; 14
    101c:	fe cf       	rjmp	.-4      	; 0x101a <rf_rx_on+0x18>
    101e:	c0 9a       	sbi	0x18, 0	; 24
	rx_ready=0;
    1020:	10 92 b4 04 	sts	0x04B4, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 
    1024:	08 95       	ret

00001026 <rf_polling_rx_on>:

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 ab 04 	sts	0x04AB, r24
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SRXON);
    102c:	c0 98       	cbi	0x18, 0	; 24
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	8f b9       	out	0x0f, r24	; 15
    1032:	77 9b       	sbis	0x0e, 7	; 14
    1034:	fe cf       	rjmp	.-4      	; 0x1032 <rf_polling_rx_on+0xc>
    1036:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1038:	c0 98       	cbi	0x18, 0	; 24
    103a:	88 e0       	ldi	r24, 0x08	; 8
    103c:	8f b9       	out	0x0f, r24	; 15
    103e:	77 9b       	sbis	0x0e, 7	; 14
    1040:	fe cf       	rjmp	.-4      	; 0x103e <rf_polling_rx_on+0x18>
    1042:	c0 9a       	sbi	0x18, 0	; 24
	rx_ready=0;
    1044:	10 92 b4 04 	sts	0x04B4, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
} // rf_rx_on() 
    1048:	08 95       	ret

0000104a <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    104a:	10 92 ab 04 	sts	0x04AB, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    104e:	c0 98       	cbi	0x18, 0	; 24
    1050:	86 e0       	ldi	r24, 0x06	; 6
    1052:	8f b9       	out	0x0f, r24	; 15
    1054:	77 9b       	sbis	0x0e, 7	; 14
    1056:	fe cf       	rjmp	.-4      	; 0x1054 <rf_rx_off+0xa>
    1058:	c0 9a       	sbi	0x18, 0	; 24
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
	rx_ready=0;
    105a:	10 92 b4 04 	sts	0x04B4, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 
    105e:	08 95       	ret

00001060 <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    1060:	80 b3       	in	r24, 0x10	; 16
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	24 e0       	ldi	r18, 0x04	; 4
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	2a 95       	dec	r18
    106c:	e1 f7       	brne	.-8      	; 0x1066 <rf_busy+0x6>
}
    106e:	81 70       	andi	r24, 0x01	; 1
    1070:	08 95       	ret

00001072 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    1072:	81 b1       	in	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	36 e0       	ldi	r19, 0x06	; 6
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	3a 95       	dec	r19
    107e:	e1 f7       	brne	.-8      	; 0x1078 <rf_rx_check_fifop+0x6>
}
    1080:	81 70       	andi	r24, 0x01	; 1
    1082:	08 95       	ret

00001084 <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    1084:	80 b3       	in	r24, 0x10	; 16
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	44 e0       	ldi	r20, 0x04	; 4
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	4a 95       	dec	r20
    1090:	e1 f7       	brne	.-8      	; 0x108a <rf_rx_check_sfd+0x6>
}
    1092:	81 70       	andi	r24, 0x01	; 1
    1094:	08 95       	ret

00001096 <rf_polling_rx_packet>:
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <rf_polling_rx_packet+0x6>
    109c:	00 d0       	rcall	.+0      	; 0x109e <rf_polling_rx_packet+0x8>
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

    if(FIFOP_IS_1 )
    10a4:	0e 99       	sbic	0x01, 6	; 1
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <rf_polling_rx_packet+0x16>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	ce c1       	rjmp	.+924    	; 0x1448 <__stack+0x349>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    10ac:	10 92 af 04 	sts	0x04AF, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    10b0:	0e 9b       	sbis	0x01, 6	; 1
    10b2:	1a c0       	rjmp	.+52     	; 0x10e8 <rf_polling_rx_packet+0x52>
    10b4:	b7 99       	sbic	0x16, 7	; 22
    10b6:	18 c0       	rjmp	.+48     	; 0x10e8 <rf_polling_rx_packet+0x52>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    10b8:	c0 98       	cbi	0x18, 0	; 24
    10ba:	8f e7       	ldi	r24, 0x7F	; 127
    10bc:	8f b9       	out	0x0f, r24	; 15
    10be:	77 9b       	sbis	0x0e, 7	; 14
    10c0:	fe cf       	rjmp	.-4      	; 0x10be <rf_polling_rx_packet+0x28>
    10c2:	1f b8       	out	0x0f, r1	; 15
    10c4:	77 9b       	sbis	0x0e, 7	; 14
    10c6:	fe cf       	rjmp	.-4      	; 0x10c4 <rf_polling_rx_packet+0x2e>
    10c8:	8f b1       	in	r24, 0x0f	; 15
    10ca:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    10cc:	c0 98       	cbi	0x18, 0	; 24
    10ce:	88 e0       	ldi	r24, 0x08	; 8
    10d0:	8f b9       	out	0x0f, r24	; 15
    10d2:	77 9b       	sbis	0x0e, 7	; 14
    10d4:	fe cf       	rjmp	.-4      	; 0x10d2 <rf_polling_rx_packet+0x3c>
    10d6:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    10d8:	c0 98       	cbi	0x18, 0	; 24
    10da:	88 e0       	ldi	r24, 0x08	; 8
    10dc:	8f b9       	out	0x0f, r24	; 15
    10de:	77 9b       	sbis	0x0e, 7	; 14
    10e0:	fe cf       	rjmp	.-4      	; 0x10de <rf_polling_rx_packet+0x48>
    10e2:	c0 9a       	sbi	0x18, 0	; 24
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	    return -1;
    10e6:	b0 c1       	rjmp	.+864    	; 0x1448 <__stack+0x349>
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    10e8:	c0 98       	cbi	0x18, 0	; 24
    10ea:	8f e7       	ldi	r24, 0x7F	; 127
    10ec:	8f b9       	out	0x0f, r24	; 15
    10ee:	77 9b       	sbis	0x0e, 7	; 14
    10f0:	fe cf       	rjmp	.-4      	; 0x10ee <rf_polling_rx_packet+0x58>
    10f2:	1f b8       	out	0x0f, r1	; 15
    10f4:	77 9b       	sbis	0x0e, 7	; 14
    10f6:	fe cf       	rjmp	.-4      	; 0x10f4 <rf_polling_rx_packet+0x5e>
    10f8:	8f b1       	in	r24, 0x0f	; 15
    10fa:	c0 9a       	sbi	0x18, 0	; 24
	length &= RF_LENGTH_MASK; // Ignore MSB
    10fc:	8f 77       	andi	r24, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length<=0){  
    10fe:	c1 f4       	brne	.+48     	; 0x1130 <__stack+0x31>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    1100:	c0 98       	cbi	0x18, 0	; 24
    1102:	8f e7       	ldi	r24, 0x7F	; 127
    1104:	8f b9       	out	0x0f, r24	; 15
    1106:	77 9b       	sbis	0x0e, 7	; 14
    1108:	fe cf       	rjmp	.-4      	; 0x1106 <__stack+0x7>
    110a:	1f b8       	out	0x0f, r1	; 15
    110c:	77 9b       	sbis	0x0e, 7	; 14
    110e:	fe cf       	rjmp	.-4      	; 0x110c <__stack+0xd>
    1110:	8f b1       	in	r24, 0x0f	; 15
    1112:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1114:	c0 98       	cbi	0x18, 0	; 24
    1116:	88 e0       	ldi	r24, 0x08	; 8
    1118:	8f b9       	out	0x0f, r24	; 15
    111a:	77 9b       	sbis	0x0e, 7	; 14
    111c:	fe cf       	rjmp	.-4      	; 0x111a <__stack+0x1b>
    111e:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1120:	c0 98       	cbi	0x18, 0	; 24
    1122:	88 e0       	ldi	r24, 0x08	; 8
    1124:	8f b9       	out	0x0f, r24	; 15
    1126:	77 9b       	sbis	0x0e, 7	; 14
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <__stack+0x27>
    112a:	c0 9a       	sbi	0x18, 0	; 24
    112c:	8e ef       	ldi	r24, 0xFE	; 254
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -2;
    112e:	8c c1       	rjmp	.+792    	; 0x1448 <__stack+0x349>
	}
    if (length < (RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD)/*RF_ACK_PACKET_SIZE*/ || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    1130:	8c 30       	cpi	r24, 0x0C	; 12
    1132:	8c f0       	brlt	.+34     	; 0x1156 <__stack+0x57>
    1134:	e0 91 a3 04 	lds	r30, 0x04A3
    1138:	f0 91 a4 04 	lds	r31, 0x04A4
    113c:	28 2f       	mov	r18, r24
    113e:	33 27       	eor	r19, r19
    1140:	27 fd       	sbrc	r18, 7
    1142:	30 95       	com	r19
    1144:	2b 50       	subi	r18, 0x0B	; 11
    1146:	30 40       	sbci	r19, 0x00	; 0
    1148:	44 81       	ldd	r20, Z+4	; 0x04
    114a:	55 27       	eor	r21, r21
    114c:	47 fd       	sbrc	r20, 7
    114e:	50 95       	com	r21
    1150:	42 17       	cp	r20, r18
    1152:	53 07       	cpc	r21, r19
    1154:	7c f5       	brge	.+94     	; 0x11b4 <__stack+0xb5>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    1156:	c0 98       	cbi	0x18, 0	; 24
    1158:	9f e7       	ldi	r25, 0x7F	; 127
    115a:	9f b9       	out	0x0f, r25	; 15
    115c:	77 9b       	sbis	0x0e, 7	; 14
    115e:	fe cf       	rjmp	.-4      	; 0x115c <__stack+0x5d>
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	28 2f       	mov	r18, r24
    1164:	33 27       	eor	r19, r19
    1166:	27 fd       	sbrc	r18, 7
    1168:	30 95       	com	r19
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__stack+0x75>
    116c:	1f b8       	out	0x0f, r1	; 15
    116e:	77 9b       	sbis	0x0e, 7	; 14
    1170:	fe cf       	rjmp	.-4      	; 0x116e <__stack+0x6f>
    1172:	9f 5f       	subi	r25, 0xFF	; 255
    1174:	49 2f       	mov	r20, r25
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	42 17       	cp	r20, r18
    117a:	53 07       	cpc	r21, r19
    117c:	14 f4       	brge	.+4      	; 0x1182 <__stack+0x83>
    117e:	b7 99       	sbic	0x16, 7	; 22
    1180:	f5 cf       	rjmp	.-22     	; 0x116c <__stack+0x6d>
    1182:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    1184:	c0 98       	cbi	0x18, 0	; 24
    1186:	8f e7       	ldi	r24, 0x7F	; 127
    1188:	8f b9       	out	0x0f, r24	; 15
    118a:	77 9b       	sbis	0x0e, 7	; 14
    118c:	fe cf       	rjmp	.-4      	; 0x118a <__stack+0x8b>
    118e:	1f b8       	out	0x0f, r1	; 15
    1190:	77 9b       	sbis	0x0e, 7	; 14
    1192:	fe cf       	rjmp	.-4      	; 0x1190 <__stack+0x91>
    1194:	8f b1       	in	r24, 0x0f	; 15
    1196:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1198:	c0 98       	cbi	0x18, 0	; 24
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	8f b9       	out	0x0f, r24	; 15
    119e:	77 9b       	sbis	0x0e, 7	; 14
    11a0:	fe cf       	rjmp	.-4      	; 0x119e <__stack+0x9f>
    11a2:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    11a4:	c0 98       	cbi	0x18, 0	; 24
    11a6:	88 e0       	ldi	r24, 0x08	; 8
    11a8:	8f b9       	out	0x0f, r24	; 15
    11aa:	77 9b       	sbis	0x0e, 7	; 14
    11ac:	fe cf       	rjmp	.-4      	; 0x11aa <__stack+0xab>
    11ae:	c0 9a       	sbi	0x18, 0	; 24
    11b0:	8d ef       	ldi	r24, 0xFD	; 253
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -3;
    11b2:	4a c1       	rjmp	.+660    	; 0x1448 <__stack+0x349>
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    11b4:	e0 91 a3 04 	lds	r30, 0x04A3
    11b8:	f0 91 a4 04 	lds	r31, 0x04A4
    11bc:	8c 50       	subi	r24, 0x0C	; 12
    11be:	83 83       	std	Z+3, r24	; 0x03
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    11c0:	c0 98       	cbi	0x18, 0	; 24
    11c2:	8f e7       	ldi	r24, 0x7F	; 127
    11c4:	8f b9       	out	0x0f, r24	; 15
    11c6:	77 9b       	sbis	0x0e, 7	; 14
    11c8:	fe cf       	rjmp	.-4      	; 0x11c6 <__stack+0xc7>
    11ca:	fe 01       	movw	r30, r28
    11cc:	32 96       	adiw	r30, 0x02	; 2
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
    11ce:	cf 01       	movw	r24, r30
    11d0:	02 96       	adiw	r24, 0x02	; 2
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    11d2:	1f b8       	out	0x0f, r1	; 15
    11d4:	77 9b       	sbis	0x0e, 7	; 14
    11d6:	fe cf       	rjmp	.-4      	; 0x11d4 <__stack+0xd5>
    11d8:	2f b1       	in	r18, 0x0f	; 15
    11da:	21 93       	st	Z+, r18
    11dc:	e8 17       	cp	r30, r24
    11de:	f9 07       	cpc	r31, r25
    11e0:	c1 f7       	brne	.-16     	; 0x11d2 <__stack+0xd3>
    11e2:	c0 9a       	sbi	0x18, 0	; 24
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    11e4:	e0 91 a3 04 	lds	r30, 0x04A3
    11e8:	f0 91 a4 04 	lds	r31, 0x04A4
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	55 e0       	ldi	r21, 0x05	; 5
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	5a 95       	dec	r21
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <__stack+0xf3>
    11fa:	81 70       	andi	r24, 0x01	; 1
    11fc:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    11fe:	c0 98       	cbi	0x18, 0	; 24
    1200:	8f e7       	ldi	r24, 0x7F	; 127
    1202:	8f b9       	out	0x0f, r24	; 15
    1204:	77 9b       	sbis	0x0e, 7	; 14
    1206:	fe cf       	rjmp	.-4      	; 0x1204 <__stack+0x105>
    1208:	1f b8       	out	0x0f, r1	; 15
    120a:	77 9b       	sbis	0x0e, 7	; 14
    120c:	fe cf       	rjmp	.-4      	; 0x120a <__stack+0x10b>
    120e:	e0 91 a3 04 	lds	r30, 0x04A3
    1212:	f0 91 a4 04 	lds	r31, 0x04A4
    1216:	8f b1       	in	r24, 0x0f	; 15
    1218:	80 83       	st	Z, r24
    121a:	c0 9a       	sbi	0x18, 0	; 24

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    121c:	c0 98       	cbi	0x18, 0	; 24
    121e:	8f e7       	ldi	r24, 0x7F	; 127
    1220:	8f b9       	out	0x0f, r24	; 15
    1222:	77 9b       	sbis	0x0e, 7	; 14
    1224:	fe cf       	rjmp	.-4      	; 0x1222 <__stack+0x123>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <__stack+0x137>
    122a:	1f b8       	out	0x0f, r1	; 15
    122c:	77 9b       	sbis	0x0e, 7	; 14
    122e:	fe cf       	rjmp	.-4      	; 0x122c <__stack+0x12d>
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	11 f0       	breq	.+4      	; 0x123a <__stack+0x13b>
    1236:	b7 99       	sbic	0x16, 7	; 22
    1238:	f8 cf       	rjmp	.-16     	; 0x122a <__stack+0x12b>
    123a:	c0 9a       	sbi	0x18, 0	; 24

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    123c:	c0 98       	cbi	0x18, 0	; 24
    123e:	8f e7       	ldi	r24, 0x7F	; 127
    1240:	8f b9       	out	0x0f, r24	; 15
    1242:	77 9b       	sbis	0x0e, 7	; 14
    1244:	fe cf       	rjmp	.-4      	; 0x1242 <__stack+0x143>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	1f b8       	out	0x0f, r1	; 15
    124c:	77 9b       	sbis	0x0e, 7	; 14
    124e:	fe cf       	rjmp	.-4      	; 0x124c <__stack+0x14d>
    1250:	e0 91 a3 04 	lds	r30, 0x04A3
    1254:	f0 91 a4 04 	lds	r31, 0x04A4
    1258:	2f b1       	in	r18, 0x0f	; 15
    125a:	e8 0f       	add	r30, r24
    125c:	f9 1f       	adc	r31, r25
    125e:	21 83       	std	Z+1, r18	; 0x01
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	91 05       	cpc	r25, r1
    1266:	89 f7       	brne	.-30     	; 0x124a <__stack+0x14b>
    1268:	c0 9a       	sbi	0x18, 0	; 24

		        if(frameControlField & RF_SEC_BM)
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	83 ff       	sbrs	r24, 3
    126e:	4d c0       	rjmp	.+154    	; 0x130a <__stack+0x20b>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    1270:	c0 98       	cbi	0x18, 0	; 24
    1272:	8f e7       	ldi	r24, 0x7F	; 127
    1274:	8f b9       	out	0x0f, r24	; 15
    1276:	77 9b       	sbis	0x0e, 7	; 14
    1278:	fe cf       	rjmp	.-4      	; 0x1276 <__stack+0x177>
    127a:	ea e9       	ldi	r30, 0x9A	; 154
    127c:	f4 e0       	ldi	r31, 0x04	; 4
    127e:	1f b8       	out	0x0f, r1	; 15
    1280:	77 9b       	sbis	0x0e, 7	; 14
    1282:	fe cf       	rjmp	.-4      	; 0x1280 <__stack+0x181>
    1284:	8f b1       	in	r24, 0x0f	; 15
    1286:	81 93       	st	Z+, r24
    1288:	84 e0       	ldi	r24, 0x04	; 4
    128a:	ee 39       	cpi	r30, 0x9E	; 158
    128c:	f8 07       	cpc	r31, r24
    128e:	b9 f7       	brne	.-18     	; 0x127e <__stack+0x17f>
    1290:	c0 9a       	sbi	0x18, 0	; 24
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    1292:	c0 98       	cbi	0x18, 0	; 24
    1294:	89 e9       	ldi	r24, 0x99	; 153
    1296:	8f b9       	out	0x0f, r24	; 15
    1298:	77 9b       	sbis	0x0e, 7	; 14
    129a:	fe cf       	rjmp	.-4      	; 0x1298 <__stack+0x199>
    129c:	80 e8       	ldi	r24, 0x80	; 128
    129e:	8f b9       	out	0x0f, r24	; 15
    12a0:	77 9b       	sbis	0x0e, 7	; 14
    12a2:	fe cf       	rjmp	.-4      	; 0x12a0 <__stack+0x1a1>
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	81 50       	subi	r24, 0x01	; 1
    12a8:	e8 2f       	mov	r30, r24
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	e6 56       	subi	r30, 0x66	; 102
    12ae:	fb 4f       	sbci	r31, 0xFB	; 251
    12b0:	90 81       	ld	r25, Z
    12b2:	9f b9       	out	0x0f, r25	; 15
    12b4:	77 9b       	sbis	0x0e, 7	; 14
    12b6:	fe cf       	rjmp	.-4      	; 0x12b4 <__stack+0x1b5>
    12b8:	88 23       	and	r24, r24
    12ba:	a9 f7       	brne	.-22     	; 0x12a6 <__stack+0x1a7>
    12bc:	c0 9a       	sbi	0x18, 0	; 24
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    12be:	c0 98       	cbi	0x18, 0	; 24
    12c0:	8b e9       	ldi	r24, 0x9B	; 155
    12c2:	8f b9       	out	0x0f, r24	; 15
    12c4:	77 9b       	sbis	0x0e, 7	; 14
    12c6:	fe cf       	rjmp	.-4      	; 0x12c4 <__stack+0x1c5>
    12c8:	80 e8       	ldi	r24, 0x80	; 128
    12ca:	8f b9       	out	0x0f, r24	; 15
    12cc:	77 9b       	sbis	0x0e, 7	; 14
    12ce:	fe cf       	rjmp	.-4      	; 0x12cc <__stack+0x1cd>
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	81 50       	subi	r24, 0x01	; 1
    12d4:	e8 2f       	mov	r30, r24
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	e4 56       	subi	r30, 0x64	; 100
    12da:	fb 4f       	sbci	r31, 0xFB	; 251
    12dc:	90 81       	ld	r25, Z
    12de:	9f b9       	out	0x0f, r25	; 15
    12e0:	77 9b       	sbis	0x0e, 7	; 14
    12e2:	fe cf       	rjmp	.-4      	; 0x12e0 <__stack+0x1e1>
    12e4:	88 23       	and	r24, r24
    12e6:	a9 f7       	brne	.-22     	; 0x12d2 <__stack+0x1d3>
    12e8:	c0 9a       	sbi	0x18, 0	; 24
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    12ea:	c0 98       	cbi	0x18, 0	; 24
    12ec:	8c e0       	ldi	r24, 0x0C	; 12
    12ee:	8f b9       	out	0x0f, r24	; 15
    12f0:	77 9b       	sbis	0x0e, 7	; 14
    12f2:	fe cf       	rjmp	.-4      	; 0x12f0 <__stack+0x1f1>
    12f4:	c0 9a       	sbi	0x18, 0	; 24
				last_pkt_encrypted=1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 af 04 	sts	0x04AF, r24
        			rfSettings.pRxInfo->length -= 4;
    12fc:	e0 91 a3 04 	lds	r30, 0x04A3
    1300:	f0 91 a4 04 	lds	r31, 0x04A4
    1304:	83 81       	ldd	r24, Z+3	; 0x03
    1306:	84 50       	subi	r24, 0x04	; 4
    1308:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    130a:	c0 98       	cbi	0x18, 0	; 24
    130c:	8f e7       	ldi	r24, 0x7F	; 127
    130e:	8f b9       	out	0x0f, r24	; 15
    1310:	77 9b       	sbis	0x0e, 7	; 14
    1312:	fe cf       	rjmp	.-4      	; 0x1310 <__stack+0x211>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <__stack+0x237>
    1318:	1f b8       	out	0x0f, r1	; 15
    131a:	77 9b       	sbis	0x0e, 7	; 14
    131c:	fe cf       	rjmp	.-4      	; 0x131a <__stack+0x21b>
    131e:	e0 91 a3 04 	lds	r30, 0x04A3
    1322:	f0 91 a4 04 	lds	r31, 0x04A4
    1326:	9f b1       	in	r25, 0x0f	; 15
    1328:	05 80       	ldd	r0, Z+5	; 0x05
    132a:	f6 81       	ldd	r31, Z+6	; 0x06
    132c:	e0 2d       	mov	r30, r0
    132e:	e8 0f       	add	r30, r24
    1330:	f1 1d       	adc	r31, r1
    1332:	90 83       	st	Z, r25
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	e0 91 a3 04 	lds	r30, 0x04A3
    133a:	f0 91 a4 04 	lds	r31, 0x04A4
    133e:	48 2f       	mov	r20, r24
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	23 81       	ldd	r18, Z+3	; 0x03
    1344:	33 27       	eor	r19, r19
    1346:	27 fd       	sbrc	r18, 7
    1348:	30 95       	com	r19
    134a:	42 17       	cp	r20, r18
    134c:	53 07       	cpc	r21, r19
    134e:	24 f3       	brlt	.-56     	; 0x1318 <__stack+0x219>
    1350:	c0 9a       	sbi	0x18, 0	; 24
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1352:	c0 98       	cbi	0x18, 0	; 24
    1354:	8f e7       	ldi	r24, 0x7F	; 127
    1356:	8f b9       	out	0x0f, r24	; 15
    1358:	77 9b       	sbis	0x0e, 7	; 14
    135a:	fe cf       	rjmp	.-4      	; 0x1358 <__stack+0x259>
    135c:	1f b8       	out	0x0f, r1	; 15
    135e:	77 9b       	sbis	0x0e, 7	; 14
    1360:	fe cf       	rjmp	.-4      	; 0x135e <__stack+0x25f>
    1362:	8f b1       	in	r24, 0x0f	; 15
    1364:	c0 9a       	sbi	0x18, 0	; 24

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1366:	c0 98       	cbi	0x18, 0	; 24
    1368:	9f e7       	ldi	r25, 0x7F	; 127
    136a:	9f b9       	out	0x0f, r25	; 15
    136c:	77 9b       	sbis	0x0e, 7	; 14
    136e:	fe cf       	rjmp	.-4      	; 0x136c <__stack+0x26d>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	fe 01       	movw	r30, r28
    1374:	34 96       	adiw	r30, 0x04	; 4
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
    1376:	ce 01       	movw	r24, r28
    1378:	06 96       	adiw	r24, 0x06	; 6
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    137a:	1f b8       	out	0x0f, r1	; 15
    137c:	77 9b       	sbis	0x0e, 7	; 14
    137e:	fe cf       	rjmp	.-4      	; 0x137c <__stack+0x27d>
    1380:	2f b1       	in	r18, 0x0f	; 15
    1382:	21 93       	st	Z+, r18
    1384:	e8 17       	cp	r30, r24
    1386:	f9 07       	cpc	r31, r25
    1388:	c1 f7       	brne	.-16     	; 0x137a <__stack+0x27b>
    138a:	c0 9a       	sbi	0x18, 0	; 24
			rfSettings.pRxInfo->rssi = pFooter[0];
    138c:	e0 91 a3 04 	lds	r30, 0x04A3
    1390:	f0 91 a4 04 	lds	r31, 0x04A4
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	80 87       	std	Z+8, r24	; 0x08
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	80 e0       	ldi	r24, 0x00	; 0
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    139c:	0c c0       	rjmp	.+24     	; 0x13b6 <__stack+0x2b7>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    139e:	e0 91 a3 04 	lds	r30, 0x04A3
    13a2:	f0 91 a4 04 	lds	r31, 0x04A4
    13a6:	05 80       	ldd	r0, Z+5	; 0x05
    13a8:	f6 81       	ldd	r31, Z+6	; 0x06
    13aa:	e0 2d       	mov	r30, r0
    13ac:	e2 0f       	add	r30, r18
    13ae:	f3 1f       	adc	r31, r19
    13b0:	20 81       	ld	r18, Z
    13b2:	82 0f       	add	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    13b4:	9f 5f       	subi	r25, 0xFF	; 255
    13b6:	e0 91 a3 04 	lds	r30, 0x04A3
    13ba:	f0 91 a4 04 	lds	r31, 0x04A4
    13be:	29 2f       	mov	r18, r25
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	43 81       	ldd	r20, Z+3	; 0x03
    13c4:	55 27       	eor	r21, r21
    13c6:	47 fd       	sbrc	r20, 7
    13c8:	50 95       	com	r21
    13ca:	24 17       	cp	r18, r20
    13cc:	35 07       	cpc	r19, r21
    13ce:	3c f3       	brlt	.-50     	; 0x139e <__stack+0x29f>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	89 17       	cp	r24, r25
    13d4:	c1 f0       	breq	.+48     	; 0x1406 <__stack+0x307>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    13d6:	c0 98       	cbi	0x18, 0	; 24
    13d8:	8f e7       	ldi	r24, 0x7F	; 127
    13da:	8f b9       	out	0x0f, r24	; 15
    13dc:	77 9b       	sbis	0x0e, 7	; 14
    13de:	fe cf       	rjmp	.-4      	; 0x13dc <__stack+0x2dd>
    13e0:	1f b8       	out	0x0f, r1	; 15
    13e2:	77 9b       	sbis	0x0e, 7	; 14
    13e4:	fe cf       	rjmp	.-4      	; 0x13e2 <__stack+0x2e3>
    13e6:	8f b1       	in	r24, 0x0f	; 15
    13e8:	c0 9a       	sbi	0x18, 0	; 24
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    13ea:	c0 98       	cbi	0x18, 0	; 24
    13ec:	88 e0       	ldi	r24, 0x08	; 8
    13ee:	8f b9       	out	0x0f, r24	; 15
    13f0:	77 9b       	sbis	0x0e, 7	; 14
    13f2:	fe cf       	rjmp	.-4      	; 0x13f0 <__stack+0x2f1>
    13f4:	c0 9a       	sbi	0x18, 0	; 24
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    13f6:	c0 98       	cbi	0x18, 0	; 24
    13f8:	88 e0       	ldi	r24, 0x08	; 8
    13fa:	8f b9       	out	0x0f, r24	; 15
    13fc:	77 9b       	sbis	0x0e, 7	; 14
    13fe:	fe cf       	rjmp	.-4      	; 0x13fc <__stack+0x2fd>
    1400:	c0 9a       	sbi	0x18, 0	; 24
    1402:	8c ef       	ldi	r24, 0xFC	; 252
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return -4;
    1404:	21 c0       	rjmp	.+66     	; 0x1448 <__stack+0x349>
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	87 ff       	sbrs	r24, 7
    140a:	07 c0       	rjmp	.+14     	; 0x141a <__stack+0x31b>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    140c:	80 91 b4 04 	lds	r24, 0x04B4
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 b4 04 	sts	0x04B4, r24
    1416:	81 e0       	ldi	r24, 0x01	; 1
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return 1;
    1418:	17 c0       	rjmp	.+46     	; 0x1448 <__stack+0x349>
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    141a:	c0 98       	cbi	0x18, 0	; 24
    141c:	8f e7       	ldi	r24, 0x7F	; 127
    141e:	8f b9       	out	0x0f, r24	; 15
    1420:	77 9b       	sbis	0x0e, 7	; 14
    1422:	fe cf       	rjmp	.-4      	; 0x1420 <__stack+0x321>
    1424:	1f b8       	out	0x0f, r1	; 15
    1426:	77 9b       	sbis	0x0e, 7	; 14
    1428:	fe cf       	rjmp	.-4      	; 0x1426 <__stack+0x327>
    142a:	8f b1       	in	r24, 0x0f	; 15
    142c:	c0 9a       	sbi	0x18, 0	; 24
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    142e:	c0 98       	cbi	0x18, 0	; 24
    1430:	88 e0       	ldi	r24, 0x08	; 8
    1432:	8f b9       	out	0x0f, r24	; 15
    1434:	77 9b       	sbis	0x0e, 7	; 14
    1436:	fe cf       	rjmp	.-4      	; 0x1434 <__stack+0x335>
    1438:	c0 9a       	sbi	0x18, 0	; 24
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    143a:	c0 98       	cbi	0x18, 0	; 24
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	8f b9       	out	0x0f, r24	; 15
    1440:	77 9b       	sbis	0x0e, 7	; 14
    1442:	fe cf       	rjmp	.-4      	; 0x1440 <__stack+0x341>
    1444:	c0 9a       	sbi	0x18, 0	; 24
    1446:	8b ef       	ldi	r24, 0xFB	; 251
    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
return 0;
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <rf_rx_packet>:

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    1458:	80 91 b4 04 	lds	r24, 0x04B4
    145c:	88 23       	and	r24, r24
    145e:	21 f0       	breq	.+8      	; 0x1468 <rf_rx_packet+0x10>
    1460:	80 91 b4 04 	lds	r24, 0x04B4
    1464:	10 92 b4 04 	sts	0x04B4, r1
return 0;
}
    1468:	08 95       	ret

0000146a <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    146a:	c0 98       	cbi	0x18, 0	; 24
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	8f b9       	out	0x0f, r24	; 15
    1470:	77 9b       	sbis	0x0e, 7	; 14
    1472:	fe cf       	rjmp	.-4      	; 0x1470 <rf_flush_rx_fifo+0x6>
    1474:	c0 9a       	sbi	0x18, 0	; 24
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    1476:	c0 98       	cbi	0x18, 0	; 24
    1478:	88 e0       	ldi	r24, 0x08	; 8
    147a:	8f b9       	out	0x0f, r24	; 15
    147c:	77 9b       	sbis	0x0e, 7	; 14
    147e:	fe cf       	rjmp	.-4      	; 0x147c <rf_flush_rx_fifo+0x12>
    1480:	c0 9a       	sbi	0x18, 0	; 24
}
    1482:	08 95       	ret

00001484 <rf_set_cca_thresh>:
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

val=(t<<8) | 0x80;
    1484:	99 27       	eor	r25, r25
    1486:	87 fd       	sbrc	r24, 7
    1488:	90 95       	com	r25
    148a:	98 2f       	mov	r25, r24
    148c:	88 27       	eor	r24, r24
    148e:	80 68       	ori	r24, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    1490:	c0 98       	cbi	0x18, 0	; 24
    1492:	23 e1       	ldi	r18, 0x13	; 19
    1494:	2f b9       	out	0x0f, r18	; 15
    1496:	77 9b       	sbis	0x0e, 7	; 14
    1498:	fe cf       	rjmp	.-4      	; 0x1496 <rf_set_cca_thresh+0x12>
    149a:	9f b9       	out	0x0f, r25	; 15
    149c:	77 9b       	sbis	0x0e, 7	; 14
    149e:	fe cf       	rjmp	.-4      	; 0x149c <rf_set_cca_thresh+0x18>
    14a0:	8f b9       	out	0x0f, r24	; 15
    14a2:	77 9b       	sbis	0x0e, 7	; 14
    14a4:	fe cf       	rjmp	.-4      	; 0x14a2 <rf_set_cca_thresh+0x1e>
    14a6:	c0 9a       	sbi	0x18, 0	; 24

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    14a8:	08 95       	ret

000014aa <rf_test_mode>:
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    14aa:	c0 98       	cbi	0x18, 0	; 24
    14ac:	86 e0       	ldi	r24, 0x06	; 6
    14ae:	8f b9       	out	0x0f, r24	; 15
    14b0:	77 9b       	sbis	0x0e, 7	; 14
    14b2:	fe cf       	rjmp	.-4      	; 0x14b0 <rf_test_mode+0x6>
    14b4:	c0 9a       	sbi	0x18, 0	; 24
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    14b6:	c0 98       	cbi	0x18, 0	; 24
    14b8:	82 e1       	ldi	r24, 0x12	; 18
    14ba:	8f b9       	out	0x0f, r24	; 15
    14bc:	77 9b       	sbis	0x0e, 7	; 14
    14be:	fe cf       	rjmp	.-4      	; 0x14bc <rf_test_mode+0x12>
    14c0:	85 e0       	ldi	r24, 0x05	; 5
    14c2:	8f b9       	out	0x0f, r24	; 15
    14c4:	77 9b       	sbis	0x0e, 7	; 14
    14c6:	fe cf       	rjmp	.-4      	; 0x14c4 <rf_test_mode+0x1a>
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	8f b9       	out	0x0f, r24	; 15
    14cc:	77 9b       	sbis	0x0e, 7	; 14
    14ce:	fe cf       	rjmp	.-4      	; 0x14cc <rf_test_mode+0x22>
    14d0:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    14d2:	c0 98       	cbi	0x18, 0	; 24
    14d4:	8e e2       	ldi	r24, 0x2E	; 46
    14d6:	8f b9       	out	0x0f, r24	; 15
    14d8:	77 9b       	sbis	0x0e, 7	; 14
    14da:	fe cf       	rjmp	.-4      	; 0x14d8 <rf_test_mode+0x2e>
    14dc:	88 e1       	ldi	r24, 0x18	; 24
    14de:	8f b9       	out	0x0f, r24	; 15
    14e0:	77 9b       	sbis	0x0e, 7	; 14
    14e2:	fe cf       	rjmp	.-4      	; 0x14e0 <rf_test_mode+0x36>
    14e4:	1f b8       	out	0x0f, r1	; 15
    14e6:	77 9b       	sbis	0x0e, 7	; 14
    14e8:	fe cf       	rjmp	.-4      	; 0x14e6 <rf_test_mode+0x3c>
    14ea:	c0 9a       	sbi	0x18, 0	; 24
	rf_flush_rx_fifo();
    14ec:	0e 94 35 0a 	call	0x146a	; 0x146a <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    14f0:	08 95       	ret

000014f2 <rf_data_mode>:
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif


        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    14f2:	c0 98       	cbi	0x18, 0	; 24
    14f4:	86 e0       	ldi	r24, 0x06	; 6
    14f6:	8f b9       	out	0x0f, r24	; 15
    14f8:	77 9b       	sbis	0x0e, 7	; 14
    14fa:	fe cf       	rjmp	.-4      	; 0x14f8 <rf_data_mode+0x6>
    14fc:	c0 9a       	sbi	0x18, 0	; 24
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    14fe:	c0 98       	cbi	0x18, 0	; 24
    1500:	82 e1       	ldi	r24, 0x12	; 18
    1502:	8f b9       	out	0x0f, r24	; 15
    1504:	77 9b       	sbis	0x0e, 7	; 14
    1506:	fe cf       	rjmp	.-4      	; 0x1504 <rf_data_mode+0x12>
    1508:	85 e0       	ldi	r24, 0x05	; 5
    150a:	8f b9       	out	0x0f, r24	; 15
    150c:	77 9b       	sbis	0x0e, 7	; 14
    150e:	fe cf       	rjmp	.-4      	; 0x150c <rf_data_mode+0x1a>
    1510:	1f b8       	out	0x0f, r1	; 15
    1512:	77 9b       	sbis	0x0e, 7	; 14
    1514:	fe cf       	rjmp	.-4      	; 0x1512 <rf_data_mode+0x20>
    1516:	c0 9a       	sbi	0x18, 0	; 24
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    1518:	c0 98       	cbi	0x18, 0	; 24
    151a:	8e e2       	ldi	r24, 0x2E	; 46
    151c:	8f b9       	out	0x0f, r24	; 15
    151e:	77 9b       	sbis	0x0e, 7	; 14
    1520:	fe cf       	rjmp	.-4      	; 0x151e <rf_data_mode+0x2c>
    1522:	1f b8       	out	0x0f, r1	; 15
    1524:	77 9b       	sbis	0x0e, 7	; 14
    1526:	fe cf       	rjmp	.-4      	; 0x1524 <rf_data_mode+0x32>
    1528:	1f b8       	out	0x0f, r1	; 15
    152a:	77 9b       	sbis	0x0e, 7	; 14
    152c:	fe cf       	rjmp	.-4      	; 0x152a <rf_data_mode+0x38>
    152e:	c0 9a       	sbi	0x18, 0	; 24
        rf_flush_rx_fifo();
    1530:	0e 94 35 0a 	call	0x146a	; 0x146a <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    1534:	08 95       	ret

00001536 <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    FASTSPI_STROBE(CC2420_SRFOFF);           // stop radio
    1536:	c0 98       	cbi	0x18, 0	; 24
    1538:	86 e0       	ldi	r24, 0x06	; 6
    153a:	8f b9       	out	0x0f, r24	; 15
    153c:	77 9b       	sbis	0x0e, 7	; 14
    153e:	fe cf       	rjmp	.-4      	; 0x153c <rf_rx_set_serial+0x6>
    1540:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0501); // Set RX_MODE to 1
    1542:	c0 98       	cbi	0x18, 0	; 24
    1544:	82 e1       	ldi	r24, 0x12	; 18
    1546:	8f b9       	out	0x0f, r24	; 15
    1548:	77 9b       	sbis	0x0e, 7	; 14
    154a:	fe cf       	rjmp	.-4      	; 0x1548 <rf_rx_set_serial+0x12>
    154c:	85 e0       	ldi	r24, 0x05	; 5
    154e:	8f b9       	out	0x0f, r24	; 15
    1550:	77 9b       	sbis	0x0e, 7	; 14
    1552:	fe cf       	rjmp	.-4      	; 0x1550 <rf_rx_set_serial+0x1a>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	8f b9       	out	0x0f, r24	; 15
    1558:	77 9b       	sbis	0x0e, 7	; 14
    155a:	fe cf       	rjmp	.-4      	; 0x1558 <rf_rx_set_serial+0x22>
    155c:	c0 9a       	sbi	0x18, 0	; 24
    rf_flush_rx_fifo();
    155e:	0e 94 35 0a 	call	0x146a	; 0x146a <rf_flush_rx_fifo>
}
    1562:	08 95       	ret

00001564 <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0504); // set TXMODE to 1
    1564:	c0 98       	cbi	0x18, 0	; 24
    1566:	82 e1       	ldi	r24, 0x12	; 18
    1568:	8f b9       	out	0x0f, r24	; 15
    156a:	77 9b       	sbis	0x0e, 7	; 14
    156c:	fe cf       	rjmp	.-4      	; 0x156a <rf_tx_set_serial+0x6>
    156e:	85 e0       	ldi	r24, 0x05	; 5
    1570:	8f b9       	out	0x0f, r24	; 15
    1572:	77 9b       	sbis	0x0e, 7	; 14
    1574:	fe cf       	rjmp	.-4      	; 0x1572 <rf_tx_set_serial+0xe>
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	8f b9       	out	0x0f, r24	; 15
    157a:	77 9b       	sbis	0x0e, 7	; 14
    157c:	fe cf       	rjmp	.-4      	; 0x157a <rf_tx_set_serial+0x16>
    157e:	c0 9a       	sbi	0x18, 0	; 24
    rf_flush_rx_fifo();
    1580:	0e 94 35 0a 	call	0x146a	; 0x146a <rf_flush_rx_fifo>
}
    1584:	08 95       	ret

00001586 <rf_set_preamble_length>:
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    mdmctrl0 &= (0xFFF0);  
    mdmctrl0 |= (length & 0x000F);  
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	8f 70       	andi	r24, 0x0F	; 15
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	20 91 a1 04 	lds	r18, 0x04A1
    1590:	30 91 a2 04 	lds	r19, 0x04A2
    1594:	20 7f       	andi	r18, 0xF0	; 240
    1596:	82 2b       	or	r24, r18
    1598:	93 2b       	or	r25, r19
    159a:	90 93 a2 04 	sts	0x04A2, r25
    159e:	80 93 a1 04 	sts	0x04A1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    15a2:	c0 98       	cbi	0x18, 0	; 24
    15a4:	21 e1       	ldi	r18, 0x11	; 17
    15a6:	2f b9       	out	0x0f, r18	; 15
    15a8:	77 9b       	sbis	0x0e, 7	; 14
    15aa:	fe cf       	rjmp	.-4      	; 0x15a8 <rf_set_preamble_length+0x22>
    15ac:	9f b9       	out	0x0f, r25	; 15
    15ae:	77 9b       	sbis	0x0e, 7	; 14
    15b0:	fe cf       	rjmp	.-4      	; 0x15ae <rf_set_preamble_length+0x28>
    15b2:	8f b9       	out	0x0f, r24	; 15
    15b4:	77 9b       	sbis	0x0e, 7	; 14
    15b6:	fe cf       	rjmp	.-4      	; 0x15b4 <rf_set_preamble_length+0x2e>
    15b8:	c0 9a       	sbi	0x18, 0	; 24
}
    15ba:	08 95       	ret

000015bc <rf_set_cca_mode>:
 * Accept 1-3 as argument
 */
void rf_set_cca_mode(uint8_t mode)
{
    mdmctrl0 &= (0xFF3F);
    mdmctrl0 |= ((mode & 0x3) << 6);
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	76 e0       	ldi	r23, 0x06	; 6
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	7a 95       	dec	r23
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <rf_set_cca_mode+0x4>
    15c8:	90 70       	andi	r25, 0x00	; 0
    15ca:	20 91 a1 04 	lds	r18, 0x04A1
    15ce:	30 91 a2 04 	lds	r19, 0x04A2
    15d2:	2f 73       	andi	r18, 0x3F	; 63
    15d4:	82 2b       	or	r24, r18
    15d6:	93 2b       	or	r25, r19
    15d8:	90 93 a2 04 	sts	0x04A2, r25
    15dc:	80 93 a1 04 	sts	0x04A1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    15e0:	c0 98       	cbi	0x18, 0	; 24
    15e2:	21 e1       	ldi	r18, 0x11	; 17
    15e4:	2f b9       	out	0x0f, r18	; 15
    15e6:	77 9b       	sbis	0x0e, 7	; 14
    15e8:	fe cf       	rjmp	.-4      	; 0x15e6 <rf_set_cca_mode+0x2a>
    15ea:	9f b9       	out	0x0f, r25	; 15
    15ec:	77 9b       	sbis	0x0e, 7	; 14
    15ee:	fe cf       	rjmp	.-4      	; 0x15ec <rf_set_cca_mode+0x30>
    15f0:	8f b9       	out	0x0f, r24	; 15
    15f2:	77 9b       	sbis	0x0e, 7	; 14
    15f4:	fe cf       	rjmp	.-4      	; 0x15f2 <rf_set_cca_mode+0x36>
    15f6:	c0 9a       	sbi	0x18, 0	; 24
}
    15f8:	08 95       	ret

000015fa <rf_carrier_on>:
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif



        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    15fa:	c0 98       	cbi	0x18, 0	; 24
    15fc:	84 e0       	ldi	r24, 0x04	; 4
    15fe:	8f b9       	out	0x0f, r24	; 15
    1600:	77 9b       	sbis	0x0e, 7	; 14
    1602:	fe cf       	rjmp	.-4      	; 0x1600 <rf_carrier_on+0x6>
    1604:	c0 9a       	sbi	0x18, 0	; 24
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    1606:	08 95       	ret

00001608 <rf_carrier_off>:
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif


        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    1608:	c0 98       	cbi	0x18, 0	; 24
    160a:	86 e0       	ldi	r24, 0x06	; 6
    160c:	8f b9       	out	0x0f, r24	; 15
    160e:	77 9b       	sbis	0x0e, 7	; 14
    1610:	fe cf       	rjmp	.-4      	; 0x160e <rf_carrier_off+0x6>
    1612:	c0 9a       	sbi	0x18, 0	; 24
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    1614:	08 95       	ret

00001616 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	00 d0       	rcall	.+0      	; 0x1622 <rf_tx_packet+0xc>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <rf_tx_packet+0xe>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	fc 01       	movw	r30, r24

#ifdef CC2420_OSC_OPT
FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
if(security_enable)
    162a:	80 91 a0 04 	lds	r24, 0x04A0
    162e:	88 23       	and	r24, r24
    1630:	31 f0       	breq	.+12     	; 0x163e <rf_tx_packet+0x28>
    FASTSPI_STROBE(CC2420_STXENC);
    1632:	c0 98       	cbi	0x18, 0	; 24
    1634:	9d e0       	ldi	r25, 0x0D	; 13
    1636:	9f b9       	out	0x0f, r25	; 15
    1638:	77 9b       	sbis	0x0e, 7	; 14
    163a:	fe cf       	rjmp	.-4      	; 0x1638 <rf_tx_packet+0x22>
    163c:	c0 9a       	sbi	0x18, 0	; 24

    checksum=0;
    163e:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    1640:	92 81       	ldd	r25, Z+2	; 0x02
    1642:	49 2f       	mov	r20, r25
    1644:	55 27       	eor	r21, r21
    1646:	47 fd       	sbrc	r20, 7
    1648:	50 95       	com	r21
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <rf_tx_packet+0x4a>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    164e:	a3 81       	ldd	r26, Z+3	; 0x03
    1650:	b4 81       	ldd	r27, Z+4	; 0x04
    1652:	a6 0f       	add	r26, r22
    1654:	b7 1f       	adc	r27, r23
    1656:	3a 81       	ldd	r19, Y+2	; 0x02
    1658:	6c 91       	ld	r22, X
    165a:	36 0f       	add	r19, r22
    165c:	3a 83       	std	Y+2, r19	; 0x02
#endif
if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	62 2f       	mov	r22, r18
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	64 17       	cp	r22, r20
    1666:	75 07       	cpc	r23, r21
    1668:	94 f3       	brlt	.-28     	; 0x164e <rf_tx_packet+0x38>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    166a:	29 2f       	mov	r18, r25
    166c:	24 5f       	subi	r18, 0xF4	; 244
    166e:	29 83       	std	Y+1, r18	; 0x01
    if(security_enable) packetLength+=4;  // for CTR counter
    1670:	88 23       	and	r24, r24
    1672:	11 f0       	breq	.+4      	; 0x1678 <rf_tx_packet+0x62>
    1674:	90 5f       	subi	r25, 0xF0	; 240
    1676:	99 83       	std	Y+1, r25	; 0x01

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    1678:	0e 99       	sbic	0x01, 6	; 1
    167a:	fe cf       	rjmp	.-4      	; 0x1678 <rf_tx_packet+0x62>
    167c:	84 99       	sbic	0x10, 4	; 16
    167e:	fc cf       	rjmp	.-8      	; 0x1678 <rf_tx_packet+0x62>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    1680:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    1682:	c0 98       	cbi	0x18, 0	; 24
    1684:	99 e0       	ldi	r25, 0x09	; 9
    1686:	9f b9       	out	0x0f, r25	; 15
    1688:	77 9b       	sbis	0x0e, 7	; 14
    168a:	fe cf       	rjmp	.-4      	; 0x1688 <rf_tx_packet+0x72>
    168c:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    168e:	c0 98       	cbi	0x18, 0	; 24
    1690:	99 e0       	ldi	r25, 0x09	; 9
    1692:	9f b9       	out	0x0f, r25	; 15
    1694:	77 9b       	sbis	0x0e, 7	; 14
    1696:	fe cf       	rjmp	.-4      	; 0x1694 <rf_tx_packet+0x7e>
    1698:	c0 9a       	sbi	0x18, 0	; 24
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    169a:	c0 98       	cbi	0x18, 0	; 24
    169c:	9e e3       	ldi	r25, 0x3E	; 62
    169e:	9f b9       	out	0x0f, r25	; 15
    16a0:	77 9b       	sbis	0x0e, 7	; 14
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <rf_tx_packet+0x8a>
    16a4:	99 81       	ldd	r25, Y+1	; 0x01
    16a6:	9f b9       	out	0x0f, r25	; 15
    16a8:	77 9b       	sbis	0x0e, 7	; 14
    16aa:	fe cf       	rjmp	.-4      	; 0x16a8 <rf_tx_packet+0x92>
    16ac:	c0 9a       	sbi	0x18, 0	; 24
    frameControlField = RF_FCF_NOACK;   // default
    16ae:	21 e4       	ldi	r18, 0x41	; 65
    16b0:	38 e8       	ldi	r19, 0x88	; 136
    16b2:	3c 83       	std	Y+4, r19	; 0x04
    16b4:	2b 83       	std	Y+3, r18	; 0x03
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    16b6:	90 91 ae 04 	lds	r25, 0x04AE
    16ba:	99 23       	and	r25, r25
    16bc:	21 f0       	breq	.+8      	; 0x16c6 <rf_tx_packet+0xb0>
    16be:	21 e6       	ldi	r18, 0x61	; 97
    16c0:	38 e8       	ldi	r19, 0x88	; 136
    16c2:	3c 83       	std	Y+4, r19	; 0x04
    16c4:	2b 83       	std	Y+3, r18	; 0x03
    if(security_enable) frameControlField |= RF_SEC_BM;
    16c6:	88 23       	and	r24, r24
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <rf_tx_packet+0xbe>
    16ca:	2b 81       	ldd	r18, Y+3	; 0x03
    16cc:	3c 81       	ldd	r19, Y+4	; 0x04
    16ce:	28 60       	ori	r18, 0x08	; 8
    16d0:	3c 83       	std	Y+4, r19	; 0x04
    16d2:	2b 83       	std	Y+3, r18	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    16d4:	c0 98       	cbi	0x18, 0	; 24
    16d6:	9e e3       	ldi	r25, 0x3E	; 62
    16d8:	9f b9       	out	0x0f, r25	; 15
    16da:	77 9b       	sbis	0x0e, 7	; 14
    16dc:	fe cf       	rjmp	.-4      	; 0x16da <rf_tx_packet+0xc4>
    16de:	de 01       	movw	r26, r28
    16e0:	13 96       	adiw	r26, 0x03	; 3
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    16e2:	9e 01       	movw	r18, r28
    16e4:	2b 5f       	subi	r18, 0xFB	; 251
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
*/
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    16e8:	9c 91       	ld	r25, X
    16ea:	9f b9       	out	0x0f, r25	; 15
    16ec:	77 9b       	sbis	0x0e, 7	; 14
    16ee:	fe cf       	rjmp	.-4      	; 0x16ec <rf_tx_packet+0xd6>
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	a2 17       	cp	r26, r18
    16f4:	b3 07       	cpc	r27, r19
    16f6:	c1 f7       	brne	.-16     	; 0x16e8 <rf_tx_packet+0xd2>
    16f8:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    16fa:	c0 98       	cbi	0x18, 0	; 24
    16fc:	9e e3       	ldi	r25, 0x3E	; 62
    16fe:	9f b9       	out	0x0f, r25	; 15
    1700:	77 9b       	sbis	0x0e, 7	; 14
    1702:	fe cf       	rjmp	.-4      	; 0x1700 <rf_tx_packet+0xea>
    1704:	90 91 a5 04 	lds	r25, 0x04A5
    1708:	9f b9       	out	0x0f, r25	; 15
    170a:	77 9b       	sbis	0x0e, 7	; 14
    170c:	fe cf       	rjmp	.-4      	; 0x170a <rf_tx_packet+0xf4>
    170e:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    1710:	c0 98       	cbi	0x18, 0	; 24
    1712:	9e e3       	ldi	r25, 0x3E	; 62
    1714:	9f b9       	out	0x0f, r25	; 15
    1716:	77 9b       	sbis	0x0e, 7	; 14
    1718:	fe cf       	rjmp	.-4      	; 0x1716 <rf_tx_packet+0x100>
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	d9 01       	movw	r26, r18
    1720:	ad 55       	subi	r26, 0x5D	; 93
    1722:	bb 4f       	sbci	r27, 0xFB	; 251
    1724:	14 96       	adiw	r26, 0x04	; 4
    1726:	9c 91       	ld	r25, X
    1728:	14 97       	sbiw	r26, 0x04	; 4
    172a:	9f b9       	out	0x0f, r25	; 15
    172c:	77 9b       	sbis	0x0e, 7	; 14
    172e:	fe cf       	rjmp	.-4      	; 0x172c <rf_tx_packet+0x116>
    1730:	2f 5f       	subi	r18, 0xFF	; 255
    1732:	3f 4f       	sbci	r19, 0xFF	; 255
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	91 f7       	brne	.-28     	; 0x171e <rf_tx_packet+0x108>
    173a:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    173c:	c0 98       	cbi	0x18, 0	; 24
    173e:	9e e3       	ldi	r25, 0x3E	; 62
    1740:	9f b9       	out	0x0f, r25	; 15
    1742:	77 9b       	sbis	0x0e, 7	; 14
    1744:	fe cf       	rjmp	.-4      	; 0x1742 <rf_tx_packet+0x12c>
    1746:	df 01       	movw	r26, r30
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    1748:	9f 01       	movw	r18, r30
    174a:	2e 5f       	subi	r18, 0xFE	; 254
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    174e:	9c 91       	ld	r25, X
    1750:	9f b9       	out	0x0f, r25	; 15
    1752:	77 9b       	sbis	0x0e, 7	; 14
    1754:	fe cf       	rjmp	.-4      	; 0x1752 <rf_tx_packet+0x13c>
    1756:	11 96       	adiw	r26, 0x01	; 1
    1758:	a2 17       	cp	r26, r18
    175a:	b3 07       	cpc	r27, r19
    175c:	c1 f7       	brne	.-16     	; 0x174e <rf_tx_packet+0x138>
    175e:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1760:	c0 98       	cbi	0x18, 0	; 24
    1762:	9e e3       	ldi	r25, 0x3E	; 62
    1764:	9f b9       	out	0x0f, r25	; 15
    1766:	77 9b       	sbis	0x0e, 7	; 14
    1768:	fe cf       	rjmp	.-4      	; 0x1766 <rf_tx_packet+0x150>
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	d9 01       	movw	r26, r18
    1770:	ad 55       	subi	r26, 0x5D	; 93
    1772:	bb 4f       	sbci	r27, 0xFB	; 251
    1774:	16 96       	adiw	r26, 0x06	; 6
    1776:	9c 91       	ld	r25, X
    1778:	16 97       	sbiw	r26, 0x06	; 6
    177a:	9f b9       	out	0x0f, r25	; 15
    177c:	77 9b       	sbis	0x0e, 7	; 14
    177e:	fe cf       	rjmp	.-4      	; 0x177c <rf_tx_packet+0x166>
    1780:	2f 5f       	subi	r18, 0xFF	; 255
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	91 f7       	brne	.-28     	; 0x176e <rf_tx_packet+0x158>
    178a:	c0 9a       	sbi	0x18, 0	; 24
    if(security_enable)
    178c:	88 23       	and	r24, r24
    178e:	89 f0       	breq	.+34     	; 0x17b2 <rf_tx_packet+0x19c>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    1790:	c0 98       	cbi	0x18, 0	; 24
    1792:	8e e3       	ldi	r24, 0x3E	; 62
    1794:	8f b9       	out	0x0f, r24	; 15
    1796:	77 9b       	sbis	0x0e, 7	; 14
    1798:	fe cf       	rjmp	.-4      	; 0x1796 <rf_tx_packet+0x180>
    179a:	a0 eb       	ldi	r26, 0xB0	; 176
    179c:	b4 e0       	ldi	r27, 0x04	; 4
    179e:	8c 91       	ld	r24, X
    17a0:	8f b9       	out	0x0f, r24	; 15
    17a2:	77 9b       	sbis	0x0e, 7	; 14
    17a4:	fe cf       	rjmp	.-4      	; 0x17a2 <rf_tx_packet+0x18c>
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	84 e0       	ldi	r24, 0x04	; 4
    17aa:	a4 3b       	cpi	r26, 0xB4	; 180
    17ac:	b8 07       	cpc	r27, r24
    17ae:	b9 f7       	brne	.-18     	; 0x179e <rf_tx_packet+0x188>
    17b0:	c0 9a       	sbi	0x18, 0	; 24
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    17b2:	c0 98       	cbi	0x18, 0	; 24
    17b4:	8e e3       	ldi	r24, 0x3E	; 62
    17b6:	8f b9       	out	0x0f, r24	; 15
    17b8:	77 9b       	sbis	0x0e, 7	; 14
    17ba:	fe cf       	rjmp	.-4      	; 0x17b8 <rf_tx_packet+0x1a2>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <rf_tx_packet+0x1bc>
    17c0:	a3 81       	ldd	r26, Z+3	; 0x03
    17c2:	b4 81       	ldd	r27, Z+4	; 0x04
    17c4:	a2 0f       	add	r26, r18
    17c6:	b3 1f       	adc	r27, r19
    17c8:	9c 91       	ld	r25, X
    17ca:	9f b9       	out	0x0f, r25	; 15
    17cc:	77 9b       	sbis	0x0e, 7	; 14
    17ce:	fe cf       	rjmp	.-4      	; 0x17cc <rf_tx_packet+0x1b6>
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	24 17       	cp	r18, r20
    17d8:	35 07       	cpc	r19, r21
    17da:	94 f3       	brlt	.-28     	; 0x17c0 <rf_tx_packet+0x1aa>
    17dc:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    17de:	c0 98       	cbi	0x18, 0	; 24
    17e0:	8e e3       	ldi	r24, 0x3E	; 62
    17e2:	8f b9       	out	0x0f, r24	; 15
    17e4:	77 9b       	sbis	0x0e, 7	; 14
    17e6:	fe cf       	rjmp	.-4      	; 0x17e4 <rf_tx_packet+0x1ce>
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	8f b9       	out	0x0f, r24	; 15
    17ec:	77 9b       	sbis	0x0e, 7	; 14
    17ee:	fe cf       	rjmp	.-4      	; 0x17ec <rf_tx_packet+0x1d6>
    17f0:	c0 9a       	sbi	0x18, 0	; 24

if (pRTI->cca == TRUE)
    17f2:	85 81       	ldd	r24, Z+5	; 0x05
    17f4:	88 23       	and	r24, r24
    17f6:	91 f1       	breq	.+100    	; 0x185c <rf_tx_packet+0x246>
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    17f8:	80 91 ab 04 	lds	r24, 0x04AB
    17fc:	88 23       	and	r24, r24
    17fe:	31 f4       	brne	.+12     	; 0x180c <rf_tx_packet+0x1f6>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1800:	c0 98       	cbi	0x18, 0	; 24
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	8f b9       	out	0x0f, r24	; 15
    1806:	77 9b       	sbis	0x0e, 7	; 14
    1808:	fe cf       	rjmp	.-4      	; 0x1806 <rf_tx_packet+0x1f0>
    180a:	c0 9a       	sbi	0x18, 0	; 24
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    180c:	c0 98       	cbi	0x18, 0	; 24
    180e:	1f b8       	out	0x0f, r1	; 15
    1810:	77 9b       	sbis	0x0e, 7	; 14
    1812:	fe cf       	rjmp	.-4      	; 0x1810 <rf_tx_packet+0x1fa>
    1814:	8f b1       	in	r24, 0x0f	; 15
    1816:	c0 9a       	sbi	0x18, 0	; 24
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    1818:	81 ff       	sbrs	r24, 1
    181a:	f8 cf       	rjmp	.-16     	; 0x180c <rf_tx_packet+0x1f6>
    181c:	10 e0       	ldi	r17, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    181e:	05 e0       	ldi	r16, 0x05	; 5
    1820:	c0 98       	cbi	0x18, 0	; 24
    1822:	0f b9       	out	0x0f, r16	; 15
    1824:	77 9b       	sbis	0x0e, 7	; 14
    1826:	fe cf       	rjmp	.-4      	; 0x1824 <rf_tx_packet+0x20e>
    1828:	c0 9a       	sbi	0x18, 0	; 24
	  FASTSPI_UPD_STATUS (spiStatusByte);
    182a:	c0 98       	cbi	0x18, 0	; 24
    182c:	1f b8       	out	0x0f, r1	; 15
    182e:	77 9b       	sbis	0x0e, 7	; 14
    1830:	fe cf       	rjmp	.-4      	; 0x182e <rf_tx_packet+0x218>
    1832:	ff b0       	in	r15, 0x0f	; 15
    1834:	c0 9a       	sbi	0x18, 0	; 24
	  cnt++;
    1836:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    1838:	15 36       	cpi	r17, 0x65	; 101
    183a:	49 f4       	brne	.+18     	; 0x184e <rf_tx_packet+0x238>
	    {
	      ENABLE_GLOBAL_INT ();
    183c:	78 94       	sei
	      nrk_sem_post(radio_sem);
    183e:	80 91 9e 04 	lds	r24, 0x049E
    1842:	90 91 9f 04 	lds	r25, 0x049F
    1846:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <nrk_sem_post>
    184a:	80 e0       	ldi	r24, 0x00	; 0
	      return FALSE;
    184c:	42 c0       	rjmp	.+132    	; 0x18d2 <rf_tx_packet+0x2bc>
	    }
	  halWait (100);
    184e:	84 e6       	ldi	r24, 0x64	; 100
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1856:	f3 fe       	sbrs	r15, 3
    1858:	e3 cf       	rjmp	.-58     	; 0x1820 <rf_tx_packet+0x20a>
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <rf_tx_packet+0x252>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    185c:	c0 98       	cbi	0x18, 0	; 24
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	8f b9       	out	0x0f, r24	; 15
    1862:	77 9b       	sbis	0x0e, 7	; 14
    1864:	fe cf       	rjmp	.-4      	; 0x1862 <rf_tx_packet+0x24c>
    1866:	c0 9a       	sbi	0x18, 0	; 24

  ENABLE_GLOBAL_INT();
    1868:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    186a:	84 9b       	sbis	0x10, 4	; 16
    186c:	fe cf       	rjmp	.-4      	; 0x186a <rf_tx_packet+0x254>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    186e:	84 99       	sbic	0x10, 4	; 16
    1870:	fe cf       	rjmp	.-4      	; 0x186e <rf_tx_packet+0x258>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    1872:	80 91 ae 04 	lds	r24, 0x04AE
    1876:	88 23       	and	r24, r24
    1878:	81 f0       	breq	.+32     	; 0x189a <rf_tx_packet+0x284>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    187a:	84 ea       	ldi	r24, 0xA4	; 164
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <halWait>

	if(FIFO_IS_1)
    1882:	b7 9b       	sbis	0x16, 7	; 22
    1884:	0c c0       	rjmp	.+24     	; 0x189e <rf_tx_packet+0x288>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    1886:	c0 98       	cbi	0x18, 0	; 24
    1888:	8f e7       	ldi	r24, 0x7F	; 127
    188a:	8f b9       	out	0x0f, r24	; 15
    188c:	77 9b       	sbis	0x0e, 7	; 14
    188e:	fe cf       	rjmp	.-4      	; 0x188c <rf_tx_packet+0x276>
    1890:	1f b8       	out	0x0f, r1	; 15
    1892:	77 9b       	sbis	0x0e, 7	; 14
    1894:	fe cf       	rjmp	.-4      	; 0x1892 <rf_tx_packet+0x27c>
    1896:	8f b1       	in	r24, 0x0f	; 15
    1898:	c0 9a       	sbi	0x18, 0	; 24
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <rf_tx_packet+0x2a2>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    189e:	c0 98       	cbi	0x18, 0	; 24
    18a0:	88 e0       	ldi	r24, 0x08	; 8
    18a2:	8f b9       	out	0x0f, r24	; 15
    18a4:	77 9b       	sbis	0x0e, 7	; 14
    18a6:	fe cf       	rjmp	.-4      	; 0x18a4 <rf_tx_packet+0x28e>
    18a8:	c0 9a       	sbi	0x18, 0	; 24
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    18aa:	c0 98       	cbi	0x18, 0	; 24
    18ac:	88 e0       	ldi	r24, 0x08	; 8
    18ae:	8f b9       	out	0x0f, r24	; 15
    18b0:	77 9b       	sbis	0x0e, 7	; 14
    18b2:	fe cf       	rjmp	.-4      	; 0x18b0 <rf_tx_packet+0x29a>
    18b4:	c0 9a       	sbi	0x18, 0	; 24
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    18b8:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    18ba:	c0 98       	cbi	0x18, 0	; 24
    18bc:	96 e0       	ldi	r25, 0x06	; 6
    18be:	9f b9       	out	0x0f, r25	; 15
    18c0:	77 9b       	sbis	0x0e, 7	; 14
    18c2:	fe cf       	rjmp	.-4      	; 0x18c0 <rf_tx_packet+0x2aa>
    18c4:	c0 9a       	sbi	0x18, 0	; 24
    ENABLE_GLOBAL_INT();
    18c6:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    18c8:	90 91 a5 04 	lds	r25, 0x04A5
    18cc:	9f 5f       	subi	r25, 0xFF	; 255
    18ce:	90 93 a5 04 	sts	0x04A5, r25
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
    return success;

}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	08 95       	ret

000018e6 <rf_tx_tdma_packet>:
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    18e6:	cf 92       	push	r12
    18e8:	df 92       	push	r13
    18ea:	ef 92       	push	r14
    18ec:	ff 92       	push	r15
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <rf_tx_tdma_packet+0x12>
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <rf_tx_tdma_packet+0x14>
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	8c 01       	movw	r16, r24
    1902:	7b 01       	movw	r14, r22
    1904:	6a 01       	movw	r12, r20
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
#endif
	timestamp=_nrk_os_timer_get();
    1906:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
	// XXX 2 below are hacks...
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    190a:	c0 98       	cbi	0x18, 0	; 24
    190c:	88 e0       	ldi	r24, 0x08	; 8
    190e:	8f b9       	out	0x0f, r24	; 15
    1910:	77 9b       	sbis	0x0e, 7	; 14
    1912:	fe cf       	rjmp	.-4      	; 0x1910 <rf_tx_tdma_packet+0x2a>
    1914:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1916:	c0 98       	cbi	0x18, 0	; 24
    1918:	88 e0       	ldi	r24, 0x08	; 8
    191a:	8f b9       	out	0x0f, r24	; 15
    191c:	77 9b       	sbis	0x0e, 7	; 14
    191e:	fe cf       	rjmp	.-4      	; 0x191c <rf_tx_tdma_packet+0x36>
    1920:	c0 9a       	sbi	0x18, 0	; 24
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    1922:	0e 99       	sbic	0x01, 6	; 1
    1924:	fe cf       	rjmp	.-4      	; 0x1922 <rf_tx_tdma_packet+0x3c>
    1926:	84 99       	sbic	0x10, 4	; 16
    1928:	fc cf       	rjmp	.-8      	; 0x1922 <rf_tx_tdma_packet+0x3c>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    192a:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    192c:	c0 98       	cbi	0x18, 0	; 24
    192e:	89 e0       	ldi	r24, 0x09	; 9
    1930:	8f b9       	out	0x0f, r24	; 15
    1932:	77 9b       	sbis	0x0e, 7	; 14
    1934:	fe cf       	rjmp	.-4      	; 0x1932 <rf_tx_tdma_packet+0x4c>
    1936:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    1938:	c0 98       	cbi	0x18, 0	; 24
    193a:	89 e0       	ldi	r24, 0x09	; 9
    193c:	8f b9       	out	0x0f, r24	; 15
    193e:	77 9b       	sbis	0x0e, 7	; 14
    1940:	fe cf       	rjmp	.-4      	; 0x193e <rf_tx_tdma_packet+0x58>
    1942:	c0 9a       	sbi	0x18, 0	; 24

    checksum=0;
    1944:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    1946:	d8 01       	movw	r26, r16
    1948:	12 96       	adiw	r26, 0x02	; 2
    194a:	2c 91       	ld	r18, X
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	62 2f       	mov	r22, r18
    1950:	77 27       	eor	r23, r23
    1952:	67 fd       	sbrc	r22, 7
    1954:	70 95       	com	r23
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <rf_tx_tdma_packet+0x8c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    195a:	d8 01       	movw	r26, r16
    195c:	13 96       	adiw	r26, 0x03	; 3
    195e:	ed 91       	ld	r30, X+
    1960:	fc 91       	ld	r31, X
    1962:	14 97       	sbiw	r26, 0x04	; 4
    1964:	e4 0f       	add	r30, r20
    1966:	f5 1f       	adc	r31, r21
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	30 81       	ld	r19, Z
    196c:	93 0f       	add	r25, r19
    196e:	9a 83       	std	Y+2, r25	; 0x02
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1970:	8f 5f       	subi	r24, 0xFF	; 255
    1972:	48 2f       	mov	r20, r24
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	46 17       	cp	r20, r22
    1978:	57 07       	cpc	r21, r23
    197a:	7c f3       	brlt	.-34     	; 0x195a <rf_tx_tdma_packet+0x74>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    197c:	82 2f       	mov	r24, r18
    197e:	84 5f       	subi	r24, 0xF4	; 244
    1980:	89 83       	std	Y+1, r24	; 0x01
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    1982:	c0 98       	cbi	0x18, 0	; 24
    1984:	9e e3       	ldi	r25, 0x3E	; 62
    1986:	9f b9       	out	0x0f, r25	; 15
    1988:	77 9b       	sbis	0x0e, 7	; 14
    198a:	fe cf       	rjmp	.-4      	; 0x1988 <rf_tx_tdma_packet+0xa2>
    198c:	8f b9       	out	0x0f, r24	; 15
    198e:	77 9b       	sbis	0x0e, 7	; 14
    1990:	fe cf       	rjmp	.-4      	; 0x198e <rf_tx_tdma_packet+0xa8>
    1992:	c0 9a       	sbi	0x18, 0	; 24
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    1994:	f8 01       	movw	r30, r16
    1996:	86 81       	ldd	r24, Z+6	; 0x06
    1998:	88 23       	and	r24, r24
    199a:	19 f4       	brne	.+6      	; 0x19a2 <rf_tx_tdma_packet+0xbc>
    199c:	81 e4       	ldi	r24, 0x41	; 65
    199e:	98 e8       	ldi	r25, 0x88	; 136
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <rf_tx_tdma_packet+0xc0>
    19a2:	81 e6       	ldi	r24, 0x61	; 97
    19a4:	98 e8       	ldi	r25, 0x88	; 136
    19a6:	9c 83       	std	Y+4, r25	; 0x04
    19a8:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    19aa:	c0 98       	cbi	0x18, 0	; 24
    19ac:	8e e3       	ldi	r24, 0x3E	; 62
    19ae:	8f b9       	out	0x0f, r24	; 15
    19b0:	77 9b       	sbis	0x0e, 7	; 14
    19b2:	fe cf       	rjmp	.-4      	; 0x19b0 <rf_tx_tdma_packet+0xca>
    19b4:	fe 01       	movw	r30, r28
    19b6:	33 96       	adiw	r30, 0x03	; 3
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    19b8:	ce 01       	movw	r24, r28
    19ba:	05 96       	adiw	r24, 0x05	; 5
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    19bc:	20 81       	ld	r18, Z
    19be:	2f b9       	out	0x0f, r18	; 15
    19c0:	77 9b       	sbis	0x0e, 7	; 14
    19c2:	fe cf       	rjmp	.-4      	; 0x19c0 <rf_tx_tdma_packet+0xda>
    19c4:	31 96       	adiw	r30, 0x01	; 1
    19c6:	e8 17       	cp	r30, r24
    19c8:	f9 07       	cpc	r31, r25
    19ca:	c1 f7       	brne	.-16     	; 0x19bc <rf_tx_tdma_packet+0xd6>
    19cc:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    19ce:	c0 98       	cbi	0x18, 0	; 24
    19d0:	8e e3       	ldi	r24, 0x3E	; 62
    19d2:	8f b9       	out	0x0f, r24	; 15
    19d4:	77 9b       	sbis	0x0e, 7	; 14
    19d6:	fe cf       	rjmp	.-4      	; 0x19d4 <rf_tx_tdma_packet+0xee>
    19d8:	80 91 a5 04 	lds	r24, 0x04A5
    19dc:	8f b9       	out	0x0f, r24	; 15
    19de:	77 9b       	sbis	0x0e, 7	; 14
    19e0:	fe cf       	rjmp	.-4      	; 0x19de <rf_tx_tdma_packet+0xf8>
    19e2:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    19e4:	c0 98       	cbi	0x18, 0	; 24
    19e6:	8e e3       	ldi	r24, 0x3E	; 62
    19e8:	8f b9       	out	0x0f, r24	; 15
    19ea:	77 9b       	sbis	0x0e, 7	; 14
    19ec:	fe cf       	rjmp	.-4      	; 0x19ea <rf_tx_tdma_packet+0x104>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	fc 01       	movw	r30, r24
    19f4:	ed 55       	subi	r30, 0x5D	; 93
    19f6:	fb 4f       	sbci	r31, 0xFB	; 251
    19f8:	24 81       	ldd	r18, Z+4	; 0x04
    19fa:	2f b9       	out	0x0f, r18	; 15
    19fc:	77 9b       	sbis	0x0e, 7	; 14
    19fe:	fe cf       	rjmp	.-4      	; 0x19fc <rf_tx_tdma_packet+0x116>
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	91 05       	cpc	r25, r1
    1a06:	a9 f7       	brne	.-22     	; 0x19f2 <rf_tx_tdma_packet+0x10c>
    1a08:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1a0a:	c0 98       	cbi	0x18, 0	; 24
    1a0c:	8e e3       	ldi	r24, 0x3E	; 62
    1a0e:	8f b9       	out	0x0f, r24	; 15
    1a10:	77 9b       	sbis	0x0e, 7	; 14
    1a12:	fe cf       	rjmp	.-4      	; 0x1a10 <rf_tx_tdma_packet+0x12a>
    1a14:	f8 01       	movw	r30, r16
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    1a16:	c8 01       	movw	r24, r16
    1a18:	02 96       	adiw	r24, 0x02	; 2
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1a1a:	20 81       	ld	r18, Z
    1a1c:	2f b9       	out	0x0f, r18	; 15
    1a1e:	77 9b       	sbis	0x0e, 7	; 14
    1a20:	fe cf       	rjmp	.-4      	; 0x1a1e <rf_tx_tdma_packet+0x138>
    1a22:	31 96       	adiw	r30, 0x01	; 1
    1a24:	e8 17       	cp	r30, r24
    1a26:	f9 07       	cpc	r31, r25
    1a28:	c1 f7       	brne	.-16     	; 0x1a1a <rf_tx_tdma_packet+0x134>
    1a2a:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1a2c:	c0 98       	cbi	0x18, 0	; 24
    1a2e:	8e e3       	ldi	r24, 0x3E	; 62
    1a30:	8f b9       	out	0x0f, r24	; 15
    1a32:	77 9b       	sbis	0x0e, 7	; 14
    1a34:	fe cf       	rjmp	.-4      	; 0x1a32 <rf_tx_tdma_packet+0x14c>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	ed 55       	subi	r30, 0x5D	; 93
    1a3e:	fb 4f       	sbci	r31, 0xFB	; 251
    1a40:	26 81       	ldd	r18, Z+6	; 0x06
    1a42:	2f b9       	out	0x0f, r18	; 15
    1a44:	77 9b       	sbis	0x0e, 7	; 14
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <rf_tx_tdma_packet+0x15e>
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	a9 f7       	brne	.-22     	; 0x1a3a <rf_tx_tdma_packet+0x154>
    1a50:	c0 9a       	sbi	0x18, 0	; 24

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    1a52:	c7 01       	movw	r24, r14
    1a54:	b6 01       	movw	r22, r12
    1a56:	0e 94 c2 24 	call	0x4984	; 0x4984 <nrk_high_speed_timer_wait>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
if (pRTI->cca == TRUE)
    1a5a:	d8 01       	movw	r26, r16
    1a5c:	15 96       	adiw	r26, 0x05	; 5
    1a5e:	8c 91       	ld	r24, X
    1a60:	15 97       	sbiw	r26, 0x05	; 5
    1a62:	88 23       	and	r24, r24
    1a64:	a9 f1       	breq	.+106    	; 0x1ad0 <rf_tx_tdma_packet+0x1ea>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    1a66:	80 91 ab 04 	lds	r24, 0x04AB
    1a6a:	88 23       	and	r24, r24
    1a6c:	31 f4       	brne	.+12     	; 0x1a7a <rf_tx_tdma_packet+0x194>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1a6e:	c0 98       	cbi	0x18, 0	; 24
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	8f b9       	out	0x0f, r24	; 15
    1a74:	77 9b       	sbis	0x0e, 7	; 14
    1a76:	fe cf       	rjmp	.-4      	; 0x1a74 <rf_tx_tdma_packet+0x18e>
    1a78:	c0 9a       	sbi	0x18, 0	; 24
	}

      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1a7a:	c0 98       	cbi	0x18, 0	; 24
    1a7c:	1f b8       	out	0x0f, r1	; 15
    1a7e:	77 9b       	sbis	0x0e, 7	; 14
    1a80:	fe cf       	rjmp	.-4      	; 0x1a7e <rf_tx_tdma_packet+0x198>
    1a82:	8f b1       	in	r24, 0x0f	; 15
    1a84:	c0 9a       	sbi	0x18, 0	; 24
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));
    1a86:	81 ff       	sbrs	r24, 1
    1a88:	f8 cf       	rjmp	.-16     	; 0x1a7a <rf_tx_tdma_packet+0x194>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    1a8c:	e5 e0       	ldi	r30, 0x05	; 5
    1a8e:	ee 2e       	mov	r14, r30
    1a90:	c0 98       	cbi	0x18, 0	; 24
    1a92:	ef b8       	out	0x0f, r14	; 15
    1a94:	77 9b       	sbis	0x0e, 7	; 14
    1a96:	fe cf       	rjmp	.-4      	; 0x1a94 <rf_tx_tdma_packet+0x1ae>
    1a98:	c0 9a       	sbi	0x18, 0	; 24
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1a9a:	c0 98       	cbi	0x18, 0	; 24
    1a9c:	1f b8       	out	0x0f, r1	; 15
    1a9e:	77 9b       	sbis	0x0e, 7	; 14
    1aa0:	fe cf       	rjmp	.-4      	; 0x1a9e <rf_tx_tdma_packet+0x1b8>
    1aa2:	cf b0       	in	r12, 0x0f	; 15
    1aa4:	c0 9a       	sbi	0x18, 0	; 24
	  cnt++;
    1aa6:	2f 5f       	subi	r18, 0xFF	; 255
	  if (cnt > 100)
    1aa8:	25 36       	cpi	r18, 0x65	; 101
    1aaa:	49 f4       	brne	.+18     	; 0x1abe <rf_tx_tdma_packet+0x1d8>
	    {
	      ENABLE_GLOBAL_INT ();
    1aac:	78 94       	sei
		nrk_sem_post(radio_sem);
    1aae:	80 91 9e 04 	lds	r24, 0x049E
    1ab2:	90 91 9f 04 	lds	r25, 0x049F
    1ab6:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <nrk_sem_post>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
	      return FALSE;
    1abc:	61 c0       	rjmp	.+194    	; 0x1b80 <rf_tx_tdma_packet+0x29a>
	    }
	  halWait (100);
    1abe:	84 e6       	ldi	r24, 0x64	; 100
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	2d 83       	std	Y+5, r18	; 0x05
    1ac4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1ac8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aca:	c3 fe       	sbrs	r12, 3
    1acc:	e1 cf       	rjmp	.-62     	; 0x1a90 <rf_tx_tdma_packet+0x1aa>
    1ace:	06 c0       	rjmp	.+12     	; 0x1adc <rf_tx_tdma_packet+0x1f6>
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    1ad0:	c0 98       	cbi	0x18, 0	; 24
    1ad2:	84 e0       	ldi	r24, 0x04	; 4
    1ad4:	8f b9       	out	0x0f, r24	; 15
    1ad6:	77 9b       	sbis	0x0e, 7	; 14
    1ad8:	fe cf       	rjmp	.-4      	; 0x1ad6 <rf_tx_tdma_packet+0x1f0>
    1ada:	c0 9a       	sbi	0x18, 0	; 24
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    1adc:	c0 98       	cbi	0x18, 0	; 24
    1ade:	8e e3       	ldi	r24, 0x3E	; 62
    1ae0:	8f b9       	out	0x0f, r24	; 15
    1ae2:	77 9b       	sbis	0x0e, 7	; 14
    1ae4:	fe cf       	rjmp	.-4      	; 0x1ae2 <rf_tx_tdma_packet+0x1fc>
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	42 81       	ldd	r20, Z+2	; 0x02
    1aea:	55 27       	eor	r21, r21
    1aec:	47 fd       	sbrc	r20, 7
    1aee:	50 95       	com	r21
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	0c c0       	rjmp	.+24     	; 0x1b0c <rf_tx_tdma_packet+0x226>
    1af4:	d8 01       	movw	r26, r16
    1af6:	13 96       	adiw	r26, 0x03	; 3
    1af8:	ed 91       	ld	r30, X+
    1afa:	fc 91       	ld	r31, X
    1afc:	14 97       	sbiw	r26, 0x04	; 4
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	90 81       	ld	r25, Z
    1b04:	9f b9       	out	0x0f, r25	; 15
    1b06:	77 9b       	sbis	0x0e, 7	; 14
    1b08:	fe cf       	rjmp	.-4      	; 0x1b06 <rf_tx_tdma_packet+0x220>
    1b0a:	8f 5f       	subi	r24, 0xFF	; 255
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	24 17       	cp	r18, r20
    1b12:	35 07       	cpc	r19, r21
    1b14:	7c f3       	brlt	.-34     	; 0x1af4 <rf_tx_tdma_packet+0x20e>
    1b16:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    1b18:	c0 98       	cbi	0x18, 0	; 24
    1b1a:	8e e3       	ldi	r24, 0x3E	; 62
    1b1c:	8f b9       	out	0x0f, r24	; 15
    1b1e:	77 9b       	sbis	0x0e, 7	; 14
    1b20:	fe cf       	rjmp	.-4      	; 0x1b1e <rf_tx_tdma_packet+0x238>
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	8f b9       	out	0x0f, r24	; 15
    1b26:	77 9b       	sbis	0x0e, 7	; 14
    1b28:	fe cf       	rjmp	.-4      	; 0x1b26 <rf_tx_tdma_packet+0x240>
    1b2a:	c0 9a       	sbi	0x18, 0	; 24

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    1b2c:	84 9b       	sbis	0x10, 4	; 16
    1b2e:	fe cf       	rjmp	.-4      	; 0x1b2c <rf_tx_tdma_packet+0x246>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    1b30:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    1b32:	84 99       	sbic	0x10, 4	; 16
    1b34:	fe cf       	rjmp	.-4      	; 0x1b32 <rf_tx_tdma_packet+0x24c>
    	
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1b36:	c0 98       	cbi	0x18, 0	; 24
    1b38:	88 e0       	ldi	r24, 0x08	; 8
    1b3a:	8f b9       	out	0x0f, r24	; 15
    1b3c:	77 9b       	sbis	0x0e, 7	; 14
    1b3e:	fe cf       	rjmp	.-4      	; 0x1b3c <rf_tx_tdma_packet+0x256>
    1b40:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1b42:	c0 98       	cbi	0x18, 0	; 24
    1b44:	88 e0       	ldi	r24, 0x08	; 8
    1b46:	8f b9       	out	0x0f, r24	; 15
    1b48:	77 9b       	sbis	0x0e, 7	; 14
    1b4a:	fe cf       	rjmp	.-4      	; 0x1b48 <rf_tx_tdma_packet+0x262>
    1b4c:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    1b4e:	c0 98       	cbi	0x18, 0	; 24
    1b50:	89 e0       	ldi	r24, 0x09	; 9
    1b52:	8f b9       	out	0x0f, r24	; 15
    1b54:	77 9b       	sbis	0x0e, 7	; 14
    1b56:	fe cf       	rjmp	.-4      	; 0x1b54 <rf_tx_tdma_packet+0x26e>
    1b58:	c0 9a       	sbi	0x18, 0	; 24
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    1b5a:	c0 98       	cbi	0x18, 0	; 24
    1b5c:	89 e0       	ldi	r24, 0x09	; 9
    1b5e:	8f b9       	out	0x0f, r24	; 15
    1b60:	77 9b       	sbis	0x0e, 7	; 14
    1b62:	fe cf       	rjmp	.-4      	; 0x1b60 <rf_tx_tdma_packet+0x27a>
    1b64:	c0 9a       	sbi	0x18, 0	; 24

#ifdef CC2420_OSC_OPT
FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    1b66:	c0 98       	cbi	0x18, 0	; 24
    1b68:	86 e0       	ldi	r24, 0x06	; 6
    1b6a:	8f b9       	out	0x0f, r24	; 15
    1b6c:	77 9b       	sbis	0x0e, 7	; 14
    1b6e:	fe cf       	rjmp	.-4      	; 0x1b6c <rf_tx_tdma_packet+0x286>
    1b70:	c0 9a       	sbi	0x18, 0	; 24
    ENABLE_GLOBAL_INT();
    1b72:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    1b74:	80 91 a5 04 	lds	r24, 0x04A5
    1b78:	8f 5f       	subi	r24, 0xFF	; 255
    1b7a:	80 93 a5 04 	sts	0x04A5, r24
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
nrk_sem_post(radio_sem);
#endif

    return success;

}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	df 90       	pop	r13
    1b98:	cf 90       	pop	r12
    1b9a:	08 95       	ret

00001b9c <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <rf_addr_decode_set_my_mac+0x6>
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    1baa:	90 93 aa 04 	sts	0x04AA, r25
    1bae:	80 93 a9 04 	sts	0x04A9, r24
    nrk_spin_wait_us(500);
    1bb2:	84 ef       	ldi	r24, 0xF4	; 244
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1bba:	c0 98       	cbi	0x18, 0	; 24
    1bbc:	8a ee       	ldi	r24, 0xEA	; 234
    1bbe:	8f b9       	out	0x0f, r24	; 15
    1bc0:	77 9b       	sbis	0x0e, 7	; 14
    1bc2:	fe cf       	rjmp	.-4      	; 0x1bc0 <rf_addr_decode_set_my_mac+0x24>
    1bc4:	80 e8       	ldi	r24, 0x80	; 128
    1bc6:	8f b9       	out	0x0f, r24	; 15
    1bc8:	77 9b       	sbis	0x0e, 7	; 14
    1bca:	fe cf       	rjmp	.-4      	; 0x1bc8 <rf_addr_decode_set_my_mac+0x2c>
    1bcc:	fe 01       	movw	r30, r28
    1bce:	31 96       	adiw	r30, 0x01	; 1
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	03 96       	adiw	r24, 0x03	; 3
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1bd4:	20 81       	ld	r18, Z
    1bd6:	2f b9       	out	0x0f, r18	; 15
    1bd8:	77 9b       	sbis	0x0e, 7	; 14
    1bda:	fe cf       	rjmp	.-4      	; 0x1bd8 <rf_addr_decode_set_my_mac+0x3c>
    1bdc:	31 96       	adiw	r30, 0x01	; 1
    1bde:	e8 17       	cp	r30, r24
    1be0:	f9 07       	cpc	r31, r25
    1be2:	c1 f7       	brne	.-16     	; 0x1bd4 <rf_addr_decode_set_my_mac+0x38>
    1be4:	c0 9a       	sbi	0x18, 0	; 24
    nrk_spin_wait_us(500);
    1be6:	84 ef       	ldi	r24, 0xF4	; 244
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    1bf8:	8f 92       	push	r8
    1bfa:	9f 92       	push	r9
    1bfc:	af 92       	push	r10
    1bfe:	bf 92       	push	r11
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <rf_security_set_key+0x1a>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <rf_security_set_key+0x1c>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	e8 2e       	mov	r14, r24
    1c1a:	09 2f       	mov	r16, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    1c1c:	84 e6       	ldi	r24, 0x64	; 100
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    1c24:	ce 2c       	mov	r12, r14
    1c26:	d0 2e       	mov	r13, r16
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	31 e0       	ldi	r19, 0x01	; 1
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	0f 5f       	subi	r16, 0xFF	; 255
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	a8 2e       	mov	r10, r24
    1c36:	b1 2c       	mov	r11, r1
    1c38:	ac 0e       	add	r10, r28
    1c3a:	bd 1e       	adc	r11, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    1c3c:	f6 01       	movw	r30, r12
    1c3e:	90 80       	ld	r9, Z
    1c40:	88 24       	eor	r8, r8
    1c42:	81 81       	ldd	r24, Z+1	; 0x01
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	88 29       	or	r24, r8
    1c48:	99 29       	or	r25, r9
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
   	nrk_spin_wait_us(100); 
    1c4e:	84 e6       	ldi	r24, 0x64	; 100
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	2b 83       	std	Y+3, r18	; 0x03
    1c54:	3c 83       	std	Y+4, r19	; 0x04
    1c56:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1c5a:	c0 98       	cbi	0x18, 0	; 24
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	82 2f       	mov	r24, r18
    1c62:	80 68       	ori	r24, 0x80	; 128
    1c64:	8f b9       	out	0x0f, r24	; 15
    1c66:	77 9b       	sbis	0x0e, 7	; 14
    1c68:	fe cf       	rjmp	.-4      	; 0x1c66 <rf_security_set_key+0x6e>
    1c6a:	c9 01       	movw	r24, r18
    1c6c:	95 95       	asr	r25
    1c6e:	87 95       	ror	r24
    1c70:	80 7c       	andi	r24, 0xC0	; 192
    1c72:	8f b9       	out	0x0f, r24	; 15
    1c74:	77 9b       	sbis	0x0e, 7	; 14
    1c76:	fe cf       	rjmp	.-4      	; 0x1c74 <rf_security_set_key+0x7c>
    1c78:	78 01       	movw	r14, r16
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1c7a:	f8 01       	movw	r30, r16
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f b9       	out	0x0f, r24	; 15
    1c80:	77 9b       	sbis	0x0e, 7	; 14
    1c82:	fe cf       	rjmp	.-4      	; 0x1c80 <rf_security_set_key+0x88>
    1c84:	31 96       	adiw	r30, 0x01	; 1
    1c86:	ea 15       	cp	r30, r10
    1c88:	fb 05       	cpc	r31, r11
    1c8a:	c1 f7       	brne	.-16     	; 0x1c7c <rf_security_set_key+0x84>
    1c8c:	c0 9a       	sbi	0x18, 0	; 24
    1c8e:	08 94       	sec
    1c90:	c1 1c       	adc	r12, r1
    1c92:	d1 1c       	adc	r13, r1
    1c94:	2e 5f       	subi	r18, 0xFE	; 254
    1c96:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    1c98:	f1 e0       	ldi	r31, 0x01	; 1
    1c9a:	20 31       	cpi	r18, 0x10	; 16
    1c9c:	3f 07       	cpc	r19, r31
    1c9e:	71 f6       	brne	.-100    	; 0x1c3c <rf_security_set_key+0x44>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    1ca0:	84 e6       	ldi	r24, 0x64	; 100
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    1ca8:	20 e4       	ldi	r18, 0x40	; 64
    1caa:	31 e0       	ldi	r19, 0x01	; 1
    1cac:	80 e1       	ldi	r24, 0x10	; 16
    1cae:	91 e0       	ldi	r25, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    1cb0:	1a 82       	std	Y+2, r1	; 0x02
    1cb2:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    1cb4:	c0 98       	cbi	0x18, 0	; 24
    1cb6:	42 2f       	mov	r20, r18
    1cb8:	40 68       	ori	r20, 0x80	; 128
    1cba:	4f b9       	out	0x0f, r20	; 15
    1cbc:	77 9b       	sbis	0x0e, 7	; 14
    1cbe:	fe cf       	rjmp	.-4      	; 0x1cbc <rf_security_set_key+0xc4>
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	55 95       	asr	r21
    1cc4:	47 95       	ror	r20
    1cc6:	40 7c       	andi	r20, 0xC0	; 192
    1cc8:	4f b9       	out	0x0f, r20	; 15
    1cca:	77 9b       	sbis	0x0e, 7	; 14
    1ccc:	fe cf       	rjmp	.-4      	; 0x1cca <rf_security_set_key+0xd2>
    1cce:	f8 01       	movw	r30, r16
    1cd0:	40 81       	ld	r20, Z
    1cd2:	4f b9       	out	0x0f, r20	; 15
    1cd4:	77 9b       	sbis	0x0e, 7	; 14
    1cd6:	fe cf       	rjmp	.-4      	; 0x1cd4 <rf_security_set_key+0xdc>
    1cd8:	31 96       	adiw	r30, 0x01	; 1
    1cda:	ea 15       	cp	r30, r10
    1cdc:	fb 05       	cpc	r31, r11
    1cde:	c1 f7       	brne	.-16     	; 0x1cd0 <rf_security_set_key+0xd8>
    1ce0:	c0 9a       	sbi	0x18, 0	; 24
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    1ce2:	c0 98       	cbi	0x18, 0	; 24
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	40 68       	ori	r20, 0x80	; 128
    1ce8:	4f b9       	out	0x0f, r20	; 15
    1cea:	77 9b       	sbis	0x0e, 7	; 14
    1cec:	fe cf       	rjmp	.-4      	; 0x1cea <rf_security_set_key+0xf2>
    1cee:	ac 01       	movw	r20, r24
    1cf0:	55 95       	asr	r21
    1cf2:	47 95       	ror	r20
    1cf4:	40 7c       	andi	r20, 0xC0	; 192
    1cf6:	4f b9       	out	0x0f, r20	; 15
    1cf8:	77 9b       	sbis	0x0e, 7	; 14
    1cfa:	fe cf       	rjmp	.-4      	; 0x1cf8 <rf_security_set_key+0x100>
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	40 81       	ld	r20, Z
    1d00:	4f b9       	out	0x0f, r20	; 15
    1d02:	77 9b       	sbis	0x0e, 7	; 14
    1d04:	fe cf       	rjmp	.-4      	; 0x1d02 <rf_security_set_key+0x10a>
    1d06:	31 96       	adiw	r30, 0x01	; 1
    1d08:	ea 15       	cp	r30, r10
    1d0a:	fb 05       	cpc	r31, r11
    1d0c:	c1 f7       	brne	.-16     	; 0x1cfe <rf_security_set_key+0x106>
    1d0e:	c0 9a       	sbi	0x18, 0	; 24
    1d10:	02 96       	adiw	r24, 0x02	; 2
    1d12:	2e 5f       	subi	r18, 0xFE	; 254
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	8e 31       	cpi	r24, 0x1E	; 30
    1d1a:	94 07       	cpc	r25, r20
    1d1c:	49 f6       	brne	.-110    	; 0x1cb0 <rf_security_set_key+0xb8>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    1d26:	c0 98       	cbi	0x18, 0	; 24
    1d28:	8e ec       	ldi	r24, 0xCE	; 206
    1d2a:	8f b9       	out	0x0f, r24	; 15
    1d2c:	77 9b       	sbis	0x0e, 7	; 14
    1d2e:	fe cf       	rjmp	.-4      	; 0x1d2c <rf_security_set_key+0x134>
    1d30:	80 e8       	ldi	r24, 0x80	; 128
    1d32:	8f b9       	out	0x0f, r24	; 15
    1d34:	77 9b       	sbis	0x0e, 7	; 14
    1d36:	fe cf       	rjmp	.-4      	; 0x1d34 <rf_security_set_key+0x13c>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1d38:	c8 01       	movw	r24, r16
    1d3a:	02 96       	adiw	r24, 0x02	; 2
    1d3c:	f8 01       	movw	r30, r16
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    1d3e:	20 81       	ld	r18, Z
    1d40:	2f b9       	out	0x0f, r18	; 15
    1d42:	77 9b       	sbis	0x0e, 7	; 14
    1d44:	fe cf       	rjmp	.-4      	; 0x1d42 <rf_security_set_key+0x14a>
    1d46:	31 96       	adiw	r30, 0x01	; 1
    1d48:	e8 17       	cp	r30, r24
    1d4a:	f9 07       	cpc	r31, r25
    1d4c:	c1 f7       	brne	.-16     	; 0x1d3e <rf_security_set_key+0x146>
    1d4e:	c0 9a       	sbi	0x18, 0	; 24
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    1d50:	c0 98       	cbi	0x18, 0	; 24
    1d52:	8e e9       	ldi	r24, 0x9E	; 158
    1d54:	8f b9       	out	0x0f, r24	; 15
    1d56:	77 9b       	sbis	0x0e, 7	; 14
    1d58:	fe cf       	rjmp	.-4      	; 0x1d56 <rf_security_set_key+0x15e>
    1d5a:	80 e8       	ldi	r24, 0x80	; 128
    1d5c:	8f b9       	out	0x0f, r24	; 15
    1d5e:	77 9b       	sbis	0x0e, 7	; 14
    1d60:	fe cf       	rjmp	.-4      	; 0x1d5e <rf_security_set_key+0x166>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1d62:	0e 5f       	subi	r16, 0xFE	; 254
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    1d66:	f7 01       	movw	r30, r14
    1d68:	80 81       	ld	r24, Z
    1d6a:	8f b9       	out	0x0f, r24	; 15
    1d6c:	77 9b       	sbis	0x0e, 7	; 14
    1d6e:	fe cf       	rjmp	.-4      	; 0x1d6c <rf_security_set_key+0x174>
    1d70:	08 94       	sec
    1d72:	e1 1c       	adc	r14, r1
    1d74:	f1 1c       	adc	r15, r1
    1d76:	e0 16       	cp	r14, r16
    1d78:	f1 06       	cpc	r15, r17
    1d7a:	a9 f7       	brne	.-22     	; 0x1d66 <rf_security_set_key+0x16e>
    1d7c:	c0 9a       	sbi	0x18, 0	; 24
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	9f 90       	pop	r9
    1d9c:	8f 90       	pop	r8
    1d9e:	08 95       	ret

00001da0 <rf_power_up>:
}

void rf_power_up()
{

    DISABLE_GLOBAL_INT();
    1da0:	f8 94       	cli
    FASTSPI_STROBE(CC2420_SXOSCON);
    1da2:	c0 98       	cbi	0x18, 0	; 24
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	8f b9       	out	0x0f, r24	; 15
    1da8:	77 9b       	sbis	0x0e, 7	; 14
    1daa:	fe cf       	rjmp	.-4      	; 0x1da8 <rf_power_up+0x8>
    1dac:	c0 9a       	sbi	0x18, 0	; 24
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    1dae:	88 ee       	ldi	r24, 0xE8	; 232
    1db0:	93 e0       	ldi	r25, 0x03	; 3
    1db2:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    ENABLE_GLOBAL_INT();
    1db6:	78 94       	sei

}
    1db8:	08 95       	ret

00001dba <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	ec 01       	movw	r28, r24
    1dc0:	86 2f       	mov	r24, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1dc2:	c0 98       	cbi	0x18, 0	; 24
    1dc4:	98 e0       	ldi	r25, 0x08	; 8
    1dc6:	9f b9       	out	0x0f, r25	; 15
    1dc8:	77 9b       	sbis	0x0e, 7	; 14
    1dca:	fe cf       	rjmp	.-4      	; 0x1dc8 <rf_set_rx+0xe>
    1dcc:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1dce:	c0 98       	cbi	0x18, 0	; 24
    1dd0:	98 e0       	ldi	r25, 0x08	; 8
    1dd2:	9f b9       	out	0x0f, r25	; 15
    1dd4:	77 9b       	sbis	0x0e, 7	; 14
    1dd6:	fe cf       	rjmp	.-4      	; 0x1dd4 <rf_set_rx+0x1a>
    1dd8:	c0 9a       	sbi	0x18, 0	; 24
    halRfSetChannel(channel);
    1dda:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    1dde:	d0 93 a4 04 	sts	0x04A4, r29
    1de2:	c0 93 a3 04 	sts	0x04A3, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <rf_set_channel>:
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
    1dec:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    1df0:	08 95       	ret

00001df2 <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <rf_init+0x10>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	8c 01       	movw	r16, r24
    1e08:	f6 2e       	mov	r15, r22
    1e0a:	5a 83       	std	Y+2, r21	; 0x02
    1e0c:	49 83       	std	Y+1, r20	; 0x01
    1e0e:	69 01       	movw	r12, r18
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    1e10:	dd 9a       	sbi	0x1b, 5	; 27
    halWait(1000);
    1e12:	88 ee       	ldi	r24, 0xE8	; 232
    1e14:	93 e0       	ldi	r25, 0x03	; 3
    1e16:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <halWait>
    SET_RESET_ACTIVE();
    1e1a:	de 98       	cbi	0x1b, 6	; 27
    halWait(1);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <halWait>
    SET_RESET_INACTIVE();
    1e24:	de 9a       	sbi	0x1b, 6	; 27
    halWait(100);
    1e26:	84 e6       	ldi	r24, 0x64	; 100
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    1e2e:	f8 94       	cli

    FASTSPI_STROBE(CC2420_SXOSCON);
    1e30:	c0 98       	cbi	0x18, 0	; 24
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	8f b9       	out	0x0f, r24	; 15
    1e36:	77 9b       	sbis	0x0e, 7	; 14
    1e38:	fe cf       	rjmp	.-4      	; 0x1e36 <rf_init+0x44>
    1e3a:	c0 9a       	sbi	0x18, 0	; 24
    mdmctrl0=0x02E2;
    1e3c:	82 ee       	ldi	r24, 0xE2	; 226
    1e3e:	92 e0       	ldi	r25, 0x02	; 2
    1e40:	90 93 a2 04 	sts	0x04A2, r25
    1e44:	80 93 a1 04 	sts	0x04A1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    1e48:	c0 98       	cbi	0x18, 0	; 24
    1e4a:	81 e1       	ldi	r24, 0x11	; 17
    1e4c:	8f b9       	out	0x0f, r24	; 15
    1e4e:	77 9b       	sbis	0x0e, 7	; 14
    1e50:	fe cf       	rjmp	.-4      	; 0x1e4e <rf_init+0x5c>
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	8f b9       	out	0x0f, r24	; 15
    1e56:	77 9b       	sbis	0x0e, 7	; 14
    1e58:	fe cf       	rjmp	.-4      	; 0x1e56 <rf_init+0x64>
    1e5a:	82 ee       	ldi	r24, 0xE2	; 226
    1e5c:	8f b9       	out	0x0f, r24	; 15
    1e5e:	77 9b       	sbis	0x0e, 7	; 14
    1e60:	fe cf       	rjmp	.-4      	; 0x1e5e <rf_init+0x6c>
    1e62:	c0 9a       	sbi	0x18, 0	; 24
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    1e64:	c0 98       	cbi	0x18, 0	; 24
    1e66:	82 e1       	ldi	r24, 0x12	; 18
    1e68:	8f b9       	out	0x0f, r24	; 15
    1e6a:	77 9b       	sbis	0x0e, 7	; 14
    1e6c:	fe cf       	rjmp	.-4      	; 0x1e6a <rf_init+0x78>
    1e6e:	85 e0       	ldi	r24, 0x05	; 5
    1e70:	8f b9       	out	0x0f, r24	; 15
    1e72:	77 9b       	sbis	0x0e, 7	; 14
    1e74:	fe cf       	rjmp	.-4      	; 0x1e72 <rf_init+0x80>
    1e76:	1f b8       	out	0x0f, r1	; 15
    1e78:	77 9b       	sbis	0x0e, 7	; 14
    1e7a:	fe cf       	rjmp	.-4      	; 0x1e78 <rf_init+0x86>
    1e7c:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    1e7e:	c0 98       	cbi	0x18, 0	; 24
    1e80:	8c e1       	ldi	r24, 0x1C	; 28
    1e82:	8f b9       	out	0x0f, r24	; 15
    1e84:	77 9b       	sbis	0x0e, 7	; 14
    1e86:	fe cf       	rjmp	.-4      	; 0x1e84 <rf_init+0x92>
    1e88:	1f b8       	out	0x0f, r1	; 15
    1e8a:	77 9b       	sbis	0x0e, 7	; 14
    1e8c:	fe cf       	rjmp	.-4      	; 0x1e8a <rf_init+0x98>
    1e8e:	8f e7       	ldi	r24, 0x7F	; 127
    1e90:	8f b9       	out	0x0f, r24	; 15
    1e92:	77 9b       	sbis	0x0e, 7	; 14
    1e94:	fe cf       	rjmp	.-4      	; 0x1e92 <rf_init+0xa0>
    1e96:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    1e98:	c0 98       	cbi	0x18, 0	; 24
    1e9a:	89 e1       	ldi	r24, 0x19	; 25
    1e9c:	8f b9       	out	0x0f, r24	; 15
    1e9e:	77 9b       	sbis	0x0e, 7	; 14
    1ea0:	fe cf       	rjmp	.-4      	; 0x1e9e <rf_init+0xac>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	8f b9       	out	0x0f, r24	; 15
    1ea6:	77 9b       	sbis	0x0e, 7	; 14
    1ea8:	fe cf       	rjmp	.-4      	; 0x1ea6 <rf_init+0xb4>
    1eaa:	84 ec       	ldi	r24, 0xC4	; 196
    1eac:	8f b9       	out	0x0f, r24	; 15
    1eae:	77 9b       	sbis	0x0e, 7	; 14
    1eb0:	fe cf       	rjmp	.-4      	; 0x1eae <rf_init+0xbc>
    1eb2:	c0 9a       	sbi	0x18, 0	; 24
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    1eb4:	c0 98       	cbi	0x18, 0	; 24
    1eb6:	87 e1       	ldi	r24, 0x17	; 23
    1eb8:	8f b9       	out	0x0f, r24	; 15
    1eba:	77 9b       	sbis	0x0e, 7	; 14
    1ebc:	fe cf       	rjmp	.-4      	; 0x1eba <rf_init+0xc8>
    1ebe:	8a e1       	ldi	r24, 0x1A	; 26
    1ec0:	8f b9       	out	0x0f, r24	; 15
    1ec2:	77 9b       	sbis	0x0e, 7	; 14
    1ec4:	fe cf       	rjmp	.-4      	; 0x1ec2 <rf_init+0xd0>
    1ec6:	86 e5       	ldi	r24, 0x56	; 86
    1ec8:	8f b9       	out	0x0f, r24	; 15
    1eca:	77 9b       	sbis	0x0e, 7	; 14
    1ecc:	fe cf       	rjmp	.-4      	; 0x1eca <rf_init+0xd8>
    1ece:	c0 9a       	sbi	0x18, 0	; 24
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    1ed0:	84 ef       	ldi	r24, 0xF4	; 244
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    1ed8:	c0 98       	cbi	0x18, 0	; 24
    1eda:	88 ee       	ldi	r24, 0xE8	; 232
    1edc:	8f b9       	out	0x0f, r24	; 15
    1ede:	77 9b       	sbis	0x0e, 7	; 14
    1ee0:	fe cf       	rjmp	.-4      	; 0x1ede <rf_init+0xec>
    1ee2:	80 e8       	ldi	r24, 0x80	; 128
    1ee4:	8f b9       	out	0x0f, r24	; 15
    1ee6:	77 9b       	sbis	0x0e, 7	; 14
    1ee8:	fe cf       	rjmp	.-4      	; 0x1ee6 <rf_init+0xf4>
    1eea:	fe 01       	movw	r30, r28
    1eec:	31 96       	adiw	r30, 0x01	; 1
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    1eee:	ce 01       	movw	r24, r28
    1ef0:	03 96       	adiw	r24, 0x03	; 3
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    1ef2:	20 81       	ld	r18, Z
    1ef4:	2f b9       	out	0x0f, r18	; 15
    1ef6:	77 9b       	sbis	0x0e, 7	; 14
    1ef8:	fe cf       	rjmp	.-4      	; 0x1ef6 <rf_init+0x104>
    1efa:	31 96       	adiw	r30, 0x01	; 1
    1efc:	e8 17       	cp	r30, r24
    1efe:	f9 07       	cpc	r31, r25
    1f00:	c1 f7       	brne	.-16     	; 0x1ef2 <rf_init+0x100>
    1f02:	c0 9a       	sbi	0x18, 0	; 24
    nrk_spin_wait_us(500);
    1f04:	84 ef       	ldi	r24, 0xF4	; 244
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    1f0c:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    1f0e:	8f 2d       	mov	r24, r15
    1f10:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    1f14:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    1f16:	10 93 a4 04 	sts	0x04A4, r17
    1f1a:	00 93 a3 04 	sts	0x04A3, r16
	rfSettings.panId = panId;
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	90 93 a8 04 	sts	0x04A8, r25
    1f26:	80 93 a7 04 	sts	0x04A7, r24
	rfSettings.myAddr = myAddr;
    1f2a:	d0 92 aa 04 	sts	0x04AA, r13
    1f2e:	c0 92 a9 04 	sts	0x04A9, r12
	rfSettings.txSeqNumber = 0;
    1f32:	10 92 a5 04 	sts	0x04A5, r1
        rfSettings.receiveOn = FALSE;
    1f36:	10 92 ab 04 	sts	0x04AB, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    1f3a:	0e 94 05 07 	call	0xe0a	; 0xe0a <halRfWaitForCrystalOscillator>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    _nrk_errno_set (2);
  }
#endif

auto_ack_enable=0;
    1f3e:	10 92 ae 04 	sts	0x04AE, r1
security_enable=0;
    1f42:	10 92 a0 04 	sts	0x04A0, r1
last_pkt_encrypted=0;
    1f46:	10 92 af 04 	sts	0x04AF, r1
} // rf_init() 
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	08 95       	ret

00001f5e <cc259x_tx>:
}


void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    1f5e:	80 91 4f 01 	lds	r24, 0x014F
    1f62:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_gpio_set>
    nrk_gpio_set(NRK_DEBUG_0);
    1f66:	80 91 4e 01 	lds	r24, 0x014E
    1f6a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_gpio_set>
}
    1f6e:	08 95       	ret

00001f70 <cc259x_rx>:

#define OSC_STARTUP_DELAY	1000

void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    1f70:	80 91 4f 01 	lds	r24, 0x014F
    1f74:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_gpio_set>
    nrk_gpio_clr(NRK_DEBUG_0);
    1f78:	80 91 4e 01 	lds	r24, 0x014E
    1f7c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <nrk_gpio_clr>
}
    1f80:	08 95       	ret

00001f82 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	08 95       	ret

00001f86 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    1f86:	88 23       	and	r24, r24
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <nrk_uart_data_ready+0xe>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1f8a:	8b b1       	in	r24, 0x0b	; 11
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	88 27       	eor	r24, r24
    1f90:	88 1f       	adc	r24, r24
    1f92:	08 95       	ret
        }
if(uart_num==1)
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	11 f0       	breq	.+4      	; 0x1f9c <nrk_uart_data_ready+0x16>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	08 95       	ret
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1f9c:	80 91 9b 00 	lds	r24, 0x009B
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	88 27       	eor	r24, r24
    1fa4:	88 1f       	adc	r24, r24
        }
return 0;
}
    1fa6:	08 95       	ret

00001fa8 <getc0>:

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    1fa8:	5f 9b       	sbis	0x0b, 7	; 11
    1faa:	fe cf       	rjmp	.-4      	; 0x1fa8 <getc0>
    1fac:	5f 98       	cbi	0x0b, 7	; 11
    1fae:	8c b1       	in	r24, 0x0c	; 12
        return tmp;
}
    1fb0:	08 95       	ret

00001fb2 <nrk_setup_ports>:
}


void nrk_setup_ports()
{
PORT_INIT();
    1fb2:	80 b5       	in	r24, 0x20	; 32
    1fb4:	84 60       	ori	r24, 0x04	; 4
    1fb6:	80 bd       	out	0x20, r24	; 32
    1fb8:	87 e0       	ldi	r24, 0x07	; 7
    1fba:	87 bb       	out	0x17, r24	; 23
    1fbc:	88 bb       	out	0x18, r24	; 24
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	82 b9       	out	0x02, r24	; 2
    1fc2:	87 e6       	ldi	r24, 0x67	; 103
    1fc4:	8a bb       	out	0x1a, r24	; 26
    1fc6:	80 e4       	ldi	r24, 0x40	; 64
    1fc8:	8b bb       	out	0x1b, r24	; 27
SPI_INIT();
    1fca:	80 e5       	ldi	r24, 0x50	; 80
    1fcc:	8d b9       	out	0x0d, r24	; 13
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	8e b9       	out	0x0e, r24	; 14
}
    1fd2:	08 95       	ret

00001fd4 <nrk_gpio_set>:

//-------------------------------
// GPIO handling functions
int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1fd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <nrk_gpio_set+0x6>
    1fd8:	73 c0       	rjmp	.+230    	; 0x20c0 <nrk_gpio_set+0xec>
        switch (pin & 0x07) {
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	27 70       	andi	r18, 0x07	; 7
    1fe0:	30 70       	andi	r19, 0x00	; 0
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	89 f1       	breq	.+98     	; 0x204a <nrk_gpio_set+0x76>
    1fe8:	23 30       	cpi	r18, 0x03	; 3
    1fea:	31 05       	cpc	r19, r1
    1fec:	44 f4       	brge	.+16     	; 0x1ffe <nrk_gpio_set+0x2a>
    1fee:	21 15       	cp	r18, r1
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	89 f0       	breq	.+34     	; 0x2016 <nrk_gpio_set+0x42>
    1ff4:	21 30       	cpi	r18, 0x01	; 1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <nrk_gpio_set+0x28>
    1ffa:	62 c0       	rjmp	.+196    	; 0x20c0 <nrk_gpio_set+0xec>
    1ffc:	1a c0       	rjmp	.+52     	; 0x2032 <nrk_gpio_set+0x5e>
    1ffe:	24 30       	cpi	r18, 0x04	; 4
    2000:	31 05       	cpc	r19, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <nrk_gpio_set+0x32>
    2004:	3e c0       	rjmp	.+124    	; 0x2082 <nrk_gpio_set+0xae>
    2006:	24 30       	cpi	r18, 0x04	; 4
    2008:	31 05       	cpc	r19, r1
    200a:	6c f1       	brlt	.+90     	; 0x2066 <nrk_gpio_set+0x92>
    200c:	25 30       	cpi	r18, 0x05	; 5
    200e:	31 05       	cpc	r19, r1
    2010:	09 f0       	breq	.+2      	; 0x2014 <nrk_gpio_set+0x40>
    2012:	56 c0       	rjmp	.+172    	; 0x20c0 <nrk_gpio_set+0xec>
    2014:	44 c0       	rjmp	.+136    	; 0x209e <nrk_gpio_set+0xca>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2016:	9b b3       	in	r25, 0x1b	; 27
    2018:	86 95       	lsr	r24
    201a:	86 95       	lsr	r24
    201c:	86 95       	lsr	r24
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <nrk_gpio_set+0x54>
    2024:	44 0f       	add	r20, r20
    2026:	55 1f       	adc	r21, r21
    2028:	8a 95       	dec	r24
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <nrk_gpio_set+0x50>
    202c:	94 2b       	or	r25, r20
    202e:	9b bb       	out	0x1b, r25	; 27
    2030:	45 c0       	rjmp	.+138    	; 0x20bc <nrk_gpio_set+0xe8>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2032:	98 b3       	in	r25, 0x18	; 24
    2034:	86 95       	lsr	r24
    2036:	86 95       	lsr	r24
    2038:	86 95       	lsr	r24
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <nrk_gpio_set+0x6c>
    203c:	22 0f       	add	r18, r18
    203e:	33 1f       	adc	r19, r19
    2040:	8a 95       	dec	r24
    2042:	e2 f7       	brpl	.-8      	; 0x203c <nrk_gpio_set+0x68>
    2044:	92 2b       	or	r25, r18
    2046:	98 bb       	out	0x18, r25	; 24
    2048:	39 c0       	rjmp	.+114    	; 0x20bc <nrk_gpio_set+0xe8>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    204a:	95 b3       	in	r25, 0x15	; 21
    204c:	86 95       	lsr	r24
    204e:	86 95       	lsr	r24
    2050:	86 95       	lsr	r24
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	02 c0       	rjmp	.+4      	; 0x205c <nrk_gpio_set+0x88>
    2058:	44 0f       	add	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	8a 95       	dec	r24
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <nrk_gpio_set+0x84>
    2060:	94 2b       	or	r25, r20
    2062:	95 bb       	out	0x15, r25	; 21
    2064:	2b c0       	rjmp	.+86     	; 0x20bc <nrk_gpio_set+0xe8>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2066:	92 b3       	in	r25, 0x12	; 18
    2068:	86 95       	lsr	r24
    206a:	86 95       	lsr	r24
    206c:	86 95       	lsr	r24
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <nrk_gpio_set+0xa4>
    2074:	44 0f       	add	r20, r20
    2076:	55 1f       	adc	r21, r21
    2078:	8a 95       	dec	r24
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <nrk_gpio_set+0xa0>
    207c:	94 2b       	or	r25, r20
    207e:	92 bb       	out	0x12, r25	; 18
    2080:	1d c0       	rjmp	.+58     	; 0x20bc <nrk_gpio_set+0xe8>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2082:	93 b1       	in	r25, 0x03	; 3
    2084:	86 95       	lsr	r24
    2086:	86 95       	lsr	r24
    2088:	86 95       	lsr	r24
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <nrk_gpio_set+0xc0>
    2090:	44 0f       	add	r20, r20
    2092:	55 1f       	adc	r21, r21
    2094:	8a 95       	dec	r24
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <nrk_gpio_set+0xbc>
    2098:	94 2b       	or	r25, r20
    209a:	93 b9       	out	0x03, r25	; 3
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <nrk_gpio_set+0xe8>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    209e:	90 91 62 00 	lds	r25, 0x0062
    20a2:	86 95       	lsr	r24
    20a4:	86 95       	lsr	r24
    20a6:	86 95       	lsr	r24
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <nrk_gpio_set+0xde>
    20ae:	44 0f       	add	r20, r20
    20b0:	55 1f       	adc	r21, r21
    20b2:	8a 95       	dec	r24
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <nrk_gpio_set+0xda>
    20b6:	94 2b       	or	r25, r20
    20b8:	90 93 62 00 	sts	0x0062, r25
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	08 95       	ret
    20c0:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    20c2:	08 95       	ret

000020c4 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    20c4:	8f 3f       	cpi	r24, 0xFF	; 255
    20c6:	09 f4       	brne	.+2      	; 0x20ca <nrk_gpio_clr+0x6>
    20c8:	7e c0       	rjmp	.+252    	; 0x21c6 <nrk_gpio_clr+0x102>
        switch (pin & 0x07) {
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	27 70       	andi	r18, 0x07	; 7
    20d0:	30 70       	andi	r19, 0x00	; 0
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	a1 f1       	breq	.+104    	; 0x2140 <nrk_gpio_clr+0x7c>
    20d8:	23 30       	cpi	r18, 0x03	; 3
    20da:	31 05       	cpc	r19, r1
    20dc:	44 f4       	brge	.+16     	; 0x20ee <nrk_gpio_clr+0x2a>
    20de:	21 15       	cp	r18, r1
    20e0:	31 05       	cpc	r19, r1
    20e2:	89 f0       	breq	.+34     	; 0x2106 <nrk_gpio_clr+0x42>
    20e4:	21 30       	cpi	r18, 0x01	; 1
    20e6:	31 05       	cpc	r19, r1
    20e8:	09 f0       	breq	.+2      	; 0x20ec <nrk_gpio_clr+0x28>
    20ea:	6d c0       	rjmp	.+218    	; 0x21c6 <nrk_gpio_clr+0x102>
    20ec:	1c c0       	rjmp	.+56     	; 0x2126 <nrk_gpio_clr+0x62>
    20ee:	24 30       	cpi	r18, 0x04	; 4
    20f0:	31 05       	cpc	r19, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <nrk_gpio_clr+0x32>
    20f4:	45 c0       	rjmp	.+138    	; 0x2180 <nrk_gpio_clr+0xbc>
    20f6:	24 30       	cpi	r18, 0x04	; 4
    20f8:	31 05       	cpc	r19, r1
    20fa:	94 f1       	brlt	.+100    	; 0x2160 <nrk_gpio_clr+0x9c>
    20fc:	25 30       	cpi	r18, 0x05	; 5
    20fe:	31 05       	cpc	r19, r1
    2100:	09 f0       	breq	.+2      	; 0x2104 <nrk_gpio_clr+0x40>
    2102:	61 c0       	rjmp	.+194    	; 0x21c6 <nrk_gpio_clr+0x102>
    2104:	4d c0       	rjmp	.+154    	; 0x21a0 <nrk_gpio_clr+0xdc>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2106:	3b b3       	in	r19, 0x1b	; 27
    2108:	28 2f       	mov	r18, r24
    210a:	26 95       	lsr	r18
    210c:	26 95       	lsr	r18
    210e:	26 95       	lsr	r18
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 c0       	rjmp	.+4      	; 0x211a <nrk_gpio_clr+0x56>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	2a 95       	dec	r18
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <nrk_gpio_clr+0x52>
    211e:	80 95       	com	r24
    2120:	83 23       	and	r24, r19
    2122:	8b bb       	out	0x1b, r24	; 27
    2124:	4e c0       	rjmp	.+156    	; 0x21c2 <nrk_gpio_clr+0xfe>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2126:	98 b3       	in	r25, 0x18	; 24
    2128:	86 95       	lsr	r24
    212a:	86 95       	lsr	r24
    212c:	86 95       	lsr	r24
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <nrk_gpio_clr+0x70>
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <nrk_gpio_clr+0x6c>
    2138:	20 95       	com	r18
    213a:	29 23       	and	r18, r25
    213c:	28 bb       	out	0x18, r18	; 24
    213e:	41 c0       	rjmp	.+130    	; 0x21c2 <nrk_gpio_clr+0xfe>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2140:	35 b3       	in	r19, 0x15	; 21
    2142:	28 2f       	mov	r18, r24
    2144:	26 95       	lsr	r18
    2146:	26 95       	lsr	r18
    2148:	26 95       	lsr	r18
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <nrk_gpio_clr+0x90>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	2a 95       	dec	r18
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <nrk_gpio_clr+0x8c>
    2158:	80 95       	com	r24
    215a:	83 23       	and	r24, r19
    215c:	85 bb       	out	0x15, r24	; 21
    215e:	31 c0       	rjmp	.+98     	; 0x21c2 <nrk_gpio_clr+0xfe>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2160:	32 b3       	in	r19, 0x12	; 18
    2162:	28 2f       	mov	r18, r24
    2164:	26 95       	lsr	r18
    2166:	26 95       	lsr	r18
    2168:	26 95       	lsr	r18
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <nrk_gpio_clr+0xb0>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	2a 95       	dec	r18
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <nrk_gpio_clr+0xac>
    2178:	80 95       	com	r24
    217a:	83 23       	and	r24, r19
    217c:	82 bb       	out	0x12, r24	; 18
    217e:	21 c0       	rjmp	.+66     	; 0x21c2 <nrk_gpio_clr+0xfe>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2180:	33 b1       	in	r19, 0x03	; 3
    2182:	28 2f       	mov	r18, r24
    2184:	26 95       	lsr	r18
    2186:	26 95       	lsr	r18
    2188:	26 95       	lsr	r18
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <nrk_gpio_clr+0xd0>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	2a 95       	dec	r18
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <nrk_gpio_clr+0xcc>
    2198:	80 95       	com	r24
    219a:	83 23       	and	r24, r19
    219c:	83 b9       	out	0x03, r24	; 3
    219e:	11 c0       	rjmp	.+34     	; 0x21c2 <nrk_gpio_clr+0xfe>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21a0:	30 91 62 00 	lds	r19, 0x0062
    21a4:	28 2f       	mov	r18, r24
    21a6:	26 95       	lsr	r18
    21a8:	26 95       	lsr	r18
    21aa:	26 95       	lsr	r18
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <nrk_gpio_clr+0xf2>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	2a 95       	dec	r18
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <nrk_gpio_clr+0xee>
    21ba:	80 95       	com	r24
    21bc:	83 23       	and	r24, r19
    21be:	80 93 62 00 	sts	0x0062, r24
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	08 95       	ret
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    21c8:	08 95       	ret

000021ca <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    21ca:	8f 3f       	cpi	r24, 0xFF	; 255
    21cc:	91 f1       	breq	.+100    	; 0x2232 <nrk_gpio_get+0x68>
        switch (pin & 0x07) {
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	27 70       	andi	r18, 0x07	; 7
    21d4:	30 70       	andi	r19, 0x00	; 0
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	c1 f0       	breq	.+48     	; 0x220c <nrk_gpio_get+0x42>
    21dc:	23 30       	cpi	r18, 0x03	; 3
    21de:	31 05       	cpc	r19, r1
    21e0:	3c f4       	brge	.+14     	; 0x21f0 <nrk_gpio_get+0x26>
    21e2:	21 15       	cp	r18, r1
    21e4:	31 05       	cpc	r19, r1
    21e6:	71 f0       	breq	.+28     	; 0x2204 <nrk_gpio_get+0x3a>
    21e8:	21 30       	cpi	r18, 0x01	; 1
    21ea:	31 05       	cpc	r19, r1
    21ec:	11 f5       	brne	.+68     	; 0x2232 <nrk_gpio_get+0x68>
    21ee:	0c c0       	rjmp	.+24     	; 0x2208 <nrk_gpio_get+0x3e>
    21f0:	24 30       	cpi	r18, 0x04	; 4
    21f2:	31 05       	cpc	r19, r1
    21f4:	79 f0       	breq	.+30     	; 0x2214 <nrk_gpio_get+0x4a>
    21f6:	24 30       	cpi	r18, 0x04	; 4
    21f8:	31 05       	cpc	r19, r1
    21fa:	54 f0       	brlt	.+20     	; 0x2210 <nrk_gpio_get+0x46>
    21fc:	25 30       	cpi	r18, 0x05	; 5
    21fe:	31 05       	cpc	r19, r1
    2200:	c1 f4       	brne	.+48     	; 0x2232 <nrk_gpio_get+0x68>
    2202:	0a c0       	rjmp	.+20     	; 0x2218 <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2204:	29 b3       	in	r18, 0x19	; 25
    2206:	09 c0       	rjmp	.+18     	; 0x221a <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2208:	26 b3       	in	r18, 0x16	; 22
    220a:	07 c0       	rjmp	.+14     	; 0x221a <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    220c:	23 b3       	in	r18, 0x13	; 19
    220e:	05 c0       	rjmp	.+10     	; 0x221a <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2210:	20 b3       	in	r18, 0x10	; 16
    2212:	03 c0       	rjmp	.+6      	; 0x221a <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2214:	21 b1       	in	r18, 0x01	; 1
    2216:	01 c0       	rjmp	.+2      	; 0x221a <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2218:	20 b1       	in	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	86 95       	lsr	r24
    221e:	86 95       	lsr	r24
    2220:	86 95       	lsr	r24
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <nrk_gpio_get+0x5e>
    2224:	35 95       	asr	r19
    2226:	27 95       	ror	r18
    2228:	8a 95       	dec	r24
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <nrk_gpio_get+0x5a>
    222c:	82 2f       	mov	r24, r18
    222e:	81 70       	andi	r24, 0x01	; 1
    2230:	08 95       	ret
    2232:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    2234:	08 95       	ret

00002236 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) SFIOR &= ~BM(PUD);
    2236:	88 23       	and	r24, r24
    2238:	19 f0       	breq	.+6      	; 0x2240 <nrk_gpio_pullups+0xa>
    223a:	80 b5       	in	r24, 0x20	; 32
    223c:	8b 7f       	andi	r24, 0xFB	; 251
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <nrk_gpio_pullups+0xe>
else SFIOR |= BM(PUD);
    2240:	80 b5       	in	r24, 0x20	; 32
    2242:	84 60       	ori	r24, 0x04	; 4
    2244:	80 bd       	out	0x20, r24	; 32
return NRK_OK;
}
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	08 95       	ret

0000224a <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    224a:	8f 3f       	cpi	r24, 0xFF	; 255
    224c:	09 f4       	brne	.+2      	; 0x2250 <nrk_gpio_toggle+0x6>
    224e:	f8 c0       	rjmp	.+496    	; 0x2440 <nrk_gpio_toggle+0x1f6>
        switch (pin & 0x07) {
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	27 70       	andi	r18, 0x07	; 7
    2256:	30 70       	andi	r19, 0x00	; 0
    2258:	22 30       	cpi	r18, 0x02	; 2
    225a:	31 05       	cpc	r19, r1
    225c:	09 f4       	brne	.+2      	; 0x2260 <nrk_gpio_toggle+0x16>
    225e:	58 c0       	rjmp	.+176    	; 0x2310 <nrk_gpio_toggle+0xc6>
    2260:	23 30       	cpi	r18, 0x03	; 3
    2262:	31 05       	cpc	r19, r1
    2264:	44 f4       	brge	.+16     	; 0x2276 <nrk_gpio_toggle+0x2c>
    2266:	21 15       	cp	r18, r1
    2268:	31 05       	cpc	r19, r1
    226a:	91 f0       	breq	.+36     	; 0x2290 <nrk_gpio_toggle+0x46>
    226c:	21 30       	cpi	r18, 0x01	; 1
    226e:	31 05       	cpc	r19, r1
    2270:	09 f0       	breq	.+2      	; 0x2274 <nrk_gpio_toggle+0x2a>
    2272:	e6 c0       	rjmp	.+460    	; 0x2440 <nrk_gpio_toggle+0x1f6>
    2274:	32 c0       	rjmp	.+100    	; 0x22da <nrk_gpio_toggle+0x90>
    2276:	24 30       	cpi	r18, 0x04	; 4
    2278:	31 05       	cpc	r19, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <nrk_gpio_toggle+0x34>
    227c:	93 c0       	rjmp	.+294    	; 0x23a4 <nrk_gpio_toggle+0x15a>
    227e:	24 30       	cpi	r18, 0x04	; 4
    2280:	31 05       	cpc	r19, r1
    2282:	0c f4       	brge	.+2      	; 0x2286 <nrk_gpio_toggle+0x3c>
    2284:	6a c0       	rjmp	.+212    	; 0x235a <nrk_gpio_toggle+0x110>
    2286:	25 30       	cpi	r18, 0x05	; 5
    2288:	31 05       	cpc	r19, r1
    228a:	09 f0       	breq	.+2      	; 0x228e <nrk_gpio_toggle+0x44>
    228c:	d9 c0       	rjmp	.+434    	; 0x2440 <nrk_gpio_toggle+0x1f6>
    228e:	af c0       	rjmp	.+350    	; 0x23ee <nrk_gpio_toggle+0x1a4>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2290:	99 b3       	in	r25, 0x19	; 25
    2292:	86 95       	lsr	r24
    2294:	86 95       	lsr	r24
    2296:	86 95       	lsr	r24
    2298:	28 2f       	mov	r18, r24
    229a:	89 2f       	mov	r24, r25
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	02 2e       	mov	r0, r18
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <nrk_gpio_toggle+0x5c>
    22a2:	95 95       	asr	r25
    22a4:	87 95       	ror	r24
    22a6:	0a 94       	dec	r0
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <nrk_gpio_toggle+0x58>
    22aa:	80 fd       	sbrc	r24, 0
    22ac:	0a c0       	rjmp	.+20     	; 0x22c2 <nrk_gpio_toggle+0x78>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    22ae:	8b b3       	in	r24, 0x1b	; 27
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <nrk_gpio_toggle+0x70>
    22b6:	44 0f       	add	r20, r20
    22b8:	55 1f       	adc	r21, r21
    22ba:	2a 95       	dec	r18
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <nrk_gpio_toggle+0x6c>
    22be:	84 2b       	or	r24, r20
    22c0:	0a c0       	rjmp	.+20     	; 0x22d6 <nrk_gpio_toggle+0x8c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    22c2:	3b b3       	in	r19, 0x1b	; 27
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <nrk_gpio_toggle+0x84>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	2a 95       	dec	r18
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <nrk_gpio_toggle+0x80>
    22d2:	80 95       	com	r24
    22d4:	83 23       	and	r24, r19
    22d6:	8b bb       	out	0x1b, r24	; 27
    22d8:	b1 c0       	rjmp	.+354    	; 0x243c <nrk_gpio_toggle+0x1f2>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    22da:	46 b3       	in	r20, 0x16	; 22
    22dc:	86 95       	lsr	r24
    22de:	86 95       	lsr	r24
    22e0:	86 95       	lsr	r24
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	08 2e       	mov	r0, r24
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <nrk_gpio_toggle+0xa2>
    22e8:	55 95       	asr	r21
    22ea:	47 95       	ror	r20
    22ec:	0a 94       	dec	r0
    22ee:	e2 f7       	brpl	.-8      	; 0x22e8 <nrk_gpio_toggle+0x9e>
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <nrk_gpio_toggle+0xac>
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	8a 95       	dec	r24
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <nrk_gpio_toggle+0xa8>
    22fa:	40 fd       	sbrc	r20, 0
    22fc:	04 c0       	rjmp	.+8      	; 0x2306 <nrk_gpio_toggle+0xbc>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    22fe:	98 b3       	in	r25, 0x18	; 24
    2300:	92 2b       	or	r25, r18
    2302:	98 bb       	out	0x18, r25	; 24
    2304:	9b c0       	rjmp	.+310    	; 0x243c <nrk_gpio_toggle+0x1f2>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2306:	88 b3       	in	r24, 0x18	; 24
    2308:	20 95       	com	r18
    230a:	28 23       	and	r18, r24
    230c:	28 bb       	out	0x18, r18	; 24
    230e:	96 c0       	rjmp	.+300    	; 0x243c <nrk_gpio_toggle+0x1f2>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2310:	93 b3       	in	r25, 0x13	; 19
    2312:	86 95       	lsr	r24
    2314:	86 95       	lsr	r24
    2316:	86 95       	lsr	r24
    2318:	28 2f       	mov	r18, r24
    231a:	89 2f       	mov	r24, r25
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	02 2e       	mov	r0, r18
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <nrk_gpio_toggle+0xdc>
    2322:	95 95       	asr	r25
    2324:	87 95       	ror	r24
    2326:	0a 94       	dec	r0
    2328:	e2 f7       	brpl	.-8      	; 0x2322 <nrk_gpio_toggle+0xd8>
    232a:	80 fd       	sbrc	r24, 0
    232c:	0a c0       	rjmp	.+20     	; 0x2342 <nrk_gpio_toggle+0xf8>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    232e:	85 b3       	in	r24, 0x15	; 21
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	02 c0       	rjmp	.+4      	; 0x233a <nrk_gpio_toggle+0xf0>
    2336:	44 0f       	add	r20, r20
    2338:	55 1f       	adc	r21, r21
    233a:	2a 95       	dec	r18
    233c:	e2 f7       	brpl	.-8      	; 0x2336 <nrk_gpio_toggle+0xec>
    233e:	84 2b       	or	r24, r20
    2340:	0a c0       	rjmp	.+20     	; 0x2356 <nrk_gpio_toggle+0x10c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2342:	35 b3       	in	r19, 0x15	; 21
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	02 c0       	rjmp	.+4      	; 0x234e <nrk_gpio_toggle+0x104>
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	2a 95       	dec	r18
    2350:	e2 f7       	brpl	.-8      	; 0x234a <nrk_gpio_toggle+0x100>
    2352:	80 95       	com	r24
    2354:	83 23       	and	r24, r19
    2356:	85 bb       	out	0x15, r24	; 21
    2358:	71 c0       	rjmp	.+226    	; 0x243c <nrk_gpio_toggle+0x1f2>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    235a:	90 b3       	in	r25, 0x10	; 16
    235c:	86 95       	lsr	r24
    235e:	86 95       	lsr	r24
    2360:	86 95       	lsr	r24
    2362:	28 2f       	mov	r18, r24
    2364:	89 2f       	mov	r24, r25
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 2e       	mov	r0, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <nrk_gpio_toggle+0x126>
    236c:	95 95       	asr	r25
    236e:	87 95       	ror	r24
    2370:	0a 94       	dec	r0
    2372:	e2 f7       	brpl	.-8      	; 0x236c <nrk_gpio_toggle+0x122>
    2374:	80 fd       	sbrc	r24, 0
    2376:	0a c0       	rjmp	.+20     	; 0x238c <nrk_gpio_toggle+0x142>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2378:	82 b3       	in	r24, 0x12	; 18
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <nrk_gpio_toggle+0x13a>
    2380:	44 0f       	add	r20, r20
    2382:	55 1f       	adc	r21, r21
    2384:	2a 95       	dec	r18
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <nrk_gpio_toggle+0x136>
    2388:	84 2b       	or	r24, r20
    238a:	0a c0       	rjmp	.+20     	; 0x23a0 <nrk_gpio_toggle+0x156>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    238c:	32 b3       	in	r19, 0x12	; 18
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <nrk_gpio_toggle+0x14e>
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	2a 95       	dec	r18
    239a:	e2 f7       	brpl	.-8      	; 0x2394 <nrk_gpio_toggle+0x14a>
    239c:	80 95       	com	r24
    239e:	83 23       	and	r24, r19
    23a0:	82 bb       	out	0x12, r24	; 18
    23a2:	4c c0       	rjmp	.+152    	; 0x243c <nrk_gpio_toggle+0x1f2>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    23a4:	91 b1       	in	r25, 0x01	; 1
    23a6:	86 95       	lsr	r24
    23a8:	86 95       	lsr	r24
    23aa:	86 95       	lsr	r24
    23ac:	28 2f       	mov	r18, r24
    23ae:	89 2f       	mov	r24, r25
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <nrk_gpio_toggle+0x170>
    23b6:	95 95       	asr	r25
    23b8:	87 95       	ror	r24
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <nrk_gpio_toggle+0x16c>
    23be:	80 fd       	sbrc	r24, 0
    23c0:	0a c0       	rjmp	.+20     	; 0x23d6 <nrk_gpio_toggle+0x18c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    23c2:	83 b1       	in	r24, 0x03	; 3
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <nrk_gpio_toggle+0x184>
    23ca:	44 0f       	add	r20, r20
    23cc:	55 1f       	adc	r21, r21
    23ce:	2a 95       	dec	r18
    23d0:	e2 f7       	brpl	.-8      	; 0x23ca <nrk_gpio_toggle+0x180>
    23d2:	84 2b       	or	r24, r20
    23d4:	0a c0       	rjmp	.+20     	; 0x23ea <nrk_gpio_toggle+0x1a0>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    23d6:	33 b1       	in	r19, 0x03	; 3
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <nrk_gpio_toggle+0x198>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	2a 95       	dec	r18
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <nrk_gpio_toggle+0x194>
    23e6:	80 95       	com	r24
    23e8:	83 23       	and	r24, r19
    23ea:	83 b9       	out	0x03, r24	; 3
    23ec:	27 c0       	rjmp	.+78     	; 0x243c <nrk_gpio_toggle+0x1f2>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    23ee:	90 b1       	in	r25, 0x00	; 0
    23f0:	86 95       	lsr	r24
    23f2:	86 95       	lsr	r24
    23f4:	86 95       	lsr	r24
    23f6:	28 2f       	mov	r18, r24
    23f8:	89 2f       	mov	r24, r25
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	02 2e       	mov	r0, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <nrk_gpio_toggle+0x1ba>
    2400:	95 95       	asr	r25
    2402:	87 95       	ror	r24
    2404:	0a 94       	dec	r0
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <nrk_gpio_toggle+0x1b6>
    2408:	80 fd       	sbrc	r24, 0
    240a:	0b c0       	rjmp	.+22     	; 0x2422 <nrk_gpio_toggle+0x1d8>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    240c:	80 91 62 00 	lds	r24, 0x0062
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	02 c0       	rjmp	.+4      	; 0x241a <nrk_gpio_toggle+0x1d0>
    2416:	44 0f       	add	r20, r20
    2418:	55 1f       	adc	r21, r21
    241a:	2a 95       	dec	r18
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <nrk_gpio_toggle+0x1cc>
    241e:	84 2b       	or	r24, r20
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <nrk_gpio_toggle+0x1ee>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2422:	30 91 62 00 	lds	r19, 0x0062
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <nrk_gpio_toggle+0x1e6>
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	2a 95       	dec	r18
    2432:	e2 f7       	brpl	.-8      	; 0x242c <nrk_gpio_toggle+0x1e2>
    2434:	80 95       	com	r24
    2436:	83 23       	and	r24, r19
    2438:	80 93 62 00 	sts	0x0062, r24
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	08 95       	ret
    2440:	8f ef       	ldi	r24, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    2442:	08 95       	ret

00002444 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2444:	8f 3f       	cpi	r24, 0xFF	; 255
    2446:	09 f4       	brne	.+2      	; 0x244a <nrk_gpio_direction+0x6>
    2448:	07 c1       	rjmp	.+526    	; 0x2658 <nrk_gpio_direction+0x214>
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    244e:	66 23       	and	r22, r22
    2450:	09 f0       	breq	.+2      	; 0x2454 <nrk_gpio_direction+0x10>
    2452:	91 c0       	rjmp	.+290    	; 0x2576 <nrk_gpio_direction+0x132>
                switch (pin & 0x07) {
    2454:	27 70       	andi	r18, 0x07	; 7
    2456:	30 70       	andi	r19, 0x00	; 0
    2458:	22 30       	cpi	r18, 0x02	; 2
    245a:	31 05       	cpc	r19, r1
    245c:	e1 f1       	breq	.+120    	; 0x24d6 <nrk_gpio_direction+0x92>
    245e:	23 30       	cpi	r18, 0x03	; 3
    2460:	31 05       	cpc	r19, r1
    2462:	44 f4       	brge	.+16     	; 0x2474 <nrk_gpio_direction+0x30>
    2464:	21 15       	cp	r18, r1
    2466:	31 05       	cpc	r19, r1
    2468:	91 f0       	breq	.+36     	; 0x248e <nrk_gpio_direction+0x4a>
    246a:	21 30       	cpi	r18, 0x01	; 1
    246c:	31 05       	cpc	r19, r1
    246e:	09 f0       	breq	.+2      	; 0x2472 <nrk_gpio_direction+0x2e>
    2470:	f3 c0       	rjmp	.+486    	; 0x2658 <nrk_gpio_direction+0x214>
    2472:	20 c0       	rjmp	.+64     	; 0x24b4 <nrk_gpio_direction+0x70>
    2474:	24 30       	cpi	r18, 0x04	; 4
    2476:	31 05       	cpc	r19, r1
    2478:	09 f4       	brne	.+2      	; 0x247c <nrk_gpio_direction+0x38>
    247a:	53 c0       	rjmp	.+166    	; 0x2522 <nrk_gpio_direction+0xde>
    247c:	24 30       	cpi	r18, 0x04	; 4
    247e:	31 05       	cpc	r19, r1
    2480:	0c f4       	brge	.+2      	; 0x2484 <nrk_gpio_direction+0x40>
    2482:	3c c0       	rjmp	.+120    	; 0x24fc <nrk_gpio_direction+0xb8>
    2484:	25 30       	cpi	r18, 0x05	; 5
    2486:	31 05       	cpc	r19, r1
    2488:	09 f0       	breq	.+2      	; 0x248c <nrk_gpio_direction+0x48>
    248a:	e6 c0       	rjmp	.+460    	; 0x2658 <nrk_gpio_direction+0x214>
    248c:	5d c0       	rjmp	.+186    	; 0x2548 <nrk_gpio_direction+0x104>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    248e:	9a b3       	in	r25, 0x1a	; 26
    2490:	86 95       	lsr	r24
    2492:	86 95       	lsr	r24
    2494:	86 95       	lsr	r24
    2496:	21 e0       	ldi	r18, 0x01	; 1
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <nrk_gpio_direction+0x5c>
    249c:	22 0f       	add	r18, r18
    249e:	33 1f       	adc	r19, r19
    24a0:	8a 95       	dec	r24
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <nrk_gpio_direction+0x58>
    24a4:	82 2f       	mov	r24, r18
    24a6:	80 95       	com	r24
    24a8:	89 23       	and	r24, r25
    24aa:	8a bb       	out	0x1a, r24	; 26
                                PORTA |= BM((pin & 0xF8) >> 3); 
    24ac:	8b b3       	in	r24, 0x1b	; 27
    24ae:	82 2b       	or	r24, r18
    24b0:	8b bb       	out	0x1b, r24	; 27
    24b2:	d0 c0       	rjmp	.+416    	; 0x2654 <nrk_gpio_direction+0x210>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    24b4:	47 b3       	in	r20, 0x17	; 23
    24b6:	86 95       	lsr	r24
    24b8:	86 95       	lsr	r24
    24ba:	86 95       	lsr	r24
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <nrk_gpio_direction+0x7e>
    24be:	22 0f       	add	r18, r18
    24c0:	33 1f       	adc	r19, r19
    24c2:	8a 95       	dec	r24
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <nrk_gpio_direction+0x7a>
    24c6:	92 2f       	mov	r25, r18
    24c8:	90 95       	com	r25
    24ca:	94 23       	and	r25, r20
    24cc:	97 bb       	out	0x17, r25	; 23
                                PORTB |= BM((pin & 0xF8) >> 3); 
    24ce:	98 b3       	in	r25, 0x18	; 24
    24d0:	92 2b       	or	r25, r18
    24d2:	98 bb       	out	0x18, r25	; 24
    24d4:	bf c0       	rjmp	.+382    	; 0x2654 <nrk_gpio_direction+0x210>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    24d6:	94 b3       	in	r25, 0x14	; 20
    24d8:	86 95       	lsr	r24
    24da:	86 95       	lsr	r24
    24dc:	86 95       	lsr	r24
    24de:	21 e0       	ldi	r18, 0x01	; 1
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <nrk_gpio_direction+0xa4>
    24e4:	22 0f       	add	r18, r18
    24e6:	33 1f       	adc	r19, r19
    24e8:	8a 95       	dec	r24
    24ea:	e2 f7       	brpl	.-8      	; 0x24e4 <nrk_gpio_direction+0xa0>
    24ec:	82 2f       	mov	r24, r18
    24ee:	80 95       	com	r24
    24f0:	89 23       	and	r24, r25
    24f2:	84 bb       	out	0x14, r24	; 20
                                PORTC |= BM((pin & 0xF8) >> 3); 
    24f4:	85 b3       	in	r24, 0x15	; 21
    24f6:	82 2b       	or	r24, r18
    24f8:	85 bb       	out	0x15, r24	; 21
    24fa:	ac c0       	rjmp	.+344    	; 0x2654 <nrk_gpio_direction+0x210>
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    24fc:	91 b3       	in	r25, 0x11	; 17
    24fe:	86 95       	lsr	r24
    2500:	86 95       	lsr	r24
    2502:	86 95       	lsr	r24
    2504:	21 e0       	ldi	r18, 0x01	; 1
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	02 c0       	rjmp	.+4      	; 0x250e <nrk_gpio_direction+0xca>
    250a:	22 0f       	add	r18, r18
    250c:	33 1f       	adc	r19, r19
    250e:	8a 95       	dec	r24
    2510:	e2 f7       	brpl	.-8      	; 0x250a <nrk_gpio_direction+0xc6>
    2512:	82 2f       	mov	r24, r18
    2514:	80 95       	com	r24
    2516:	89 23       	and	r24, r25
    2518:	81 bb       	out	0x11, r24	; 17
                                PORTD |= BM((pin & 0xF8) >> 3); 
    251a:	82 b3       	in	r24, 0x12	; 18
    251c:	82 2b       	or	r24, r18
    251e:	82 bb       	out	0x12, r24	; 18
    2520:	99 c0       	rjmp	.+306    	; 0x2654 <nrk_gpio_direction+0x210>
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2522:	92 b1       	in	r25, 0x02	; 2
    2524:	86 95       	lsr	r24
    2526:	86 95       	lsr	r24
    2528:	86 95       	lsr	r24
    252a:	21 e0       	ldi	r18, 0x01	; 1
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <nrk_gpio_direction+0xf0>
    2530:	22 0f       	add	r18, r18
    2532:	33 1f       	adc	r19, r19
    2534:	8a 95       	dec	r24
    2536:	e2 f7       	brpl	.-8      	; 0x2530 <nrk_gpio_direction+0xec>
    2538:	82 2f       	mov	r24, r18
    253a:	80 95       	com	r24
    253c:	89 23       	and	r24, r25
    253e:	82 b9       	out	0x02, r24	; 2
                                PORTE |= BM((pin & 0xF8) >> 3); 
    2540:	83 b1       	in	r24, 0x03	; 3
    2542:	82 2b       	or	r24, r18
    2544:	83 b9       	out	0x03, r24	; 3
    2546:	86 c0       	rjmp	.+268    	; 0x2654 <nrk_gpio_direction+0x210>
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2548:	90 91 61 00 	lds	r25, 0x0061
    254c:	86 95       	lsr	r24
    254e:	86 95       	lsr	r24
    2550:	86 95       	lsr	r24
    2552:	21 e0       	ldi	r18, 0x01	; 1
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	02 c0       	rjmp	.+4      	; 0x255c <nrk_gpio_direction+0x118>
    2558:	22 0f       	add	r18, r18
    255a:	33 1f       	adc	r19, r19
    255c:	8a 95       	dec	r24
    255e:	e2 f7       	brpl	.-8      	; 0x2558 <nrk_gpio_direction+0x114>
    2560:	82 2f       	mov	r24, r18
    2562:	80 95       	com	r24
    2564:	89 23       	and	r24, r25
    2566:	80 93 61 00 	sts	0x0061, r24
                                PORTF |= BM((pin & 0xF8) >> 3); 
    256a:	80 91 62 00 	lds	r24, 0x0062
    256e:	82 2b       	or	r24, r18
    2570:	80 93 62 00 	sts	0x0062, r24
    2574:	6f c0       	rjmp	.+222    	; 0x2654 <nrk_gpio_direction+0x210>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2576:	27 70       	andi	r18, 0x07	; 7
    2578:	30 70       	andi	r19, 0x00	; 0
    257a:	22 30       	cpi	r18, 0x02	; 2
    257c:	31 05       	cpc	r19, r1
    257e:	89 f1       	breq	.+98     	; 0x25e2 <nrk_gpio_direction+0x19e>
    2580:	23 30       	cpi	r18, 0x03	; 3
    2582:	31 05       	cpc	r19, r1
    2584:	44 f4       	brge	.+16     	; 0x2596 <nrk_gpio_direction+0x152>
    2586:	21 15       	cp	r18, r1
    2588:	31 05       	cpc	r19, r1
    258a:	89 f0       	breq	.+34     	; 0x25ae <nrk_gpio_direction+0x16a>
    258c:	21 30       	cpi	r18, 0x01	; 1
    258e:	31 05       	cpc	r19, r1
    2590:	09 f0       	breq	.+2      	; 0x2594 <nrk_gpio_direction+0x150>
    2592:	62 c0       	rjmp	.+196    	; 0x2658 <nrk_gpio_direction+0x214>
    2594:	1a c0       	rjmp	.+52     	; 0x25ca <nrk_gpio_direction+0x186>
    2596:	24 30       	cpi	r18, 0x04	; 4
    2598:	31 05       	cpc	r19, r1
    259a:	09 f4       	brne	.+2      	; 0x259e <nrk_gpio_direction+0x15a>
    259c:	3e c0       	rjmp	.+124    	; 0x261a <nrk_gpio_direction+0x1d6>
    259e:	24 30       	cpi	r18, 0x04	; 4
    25a0:	31 05       	cpc	r19, r1
    25a2:	6c f1       	brlt	.+90     	; 0x25fe <nrk_gpio_direction+0x1ba>
    25a4:	25 30       	cpi	r18, 0x05	; 5
    25a6:	31 05       	cpc	r19, r1
    25a8:	09 f0       	breq	.+2      	; 0x25ac <nrk_gpio_direction+0x168>
    25aa:	56 c0       	rjmp	.+172    	; 0x2658 <nrk_gpio_direction+0x214>
    25ac:	44 c0       	rjmp	.+136    	; 0x2636 <nrk_gpio_direction+0x1f2>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    25ae:	9a b3       	in	r25, 0x1a	; 26
    25b0:	86 95       	lsr	r24
    25b2:	86 95       	lsr	r24
    25b4:	86 95       	lsr	r24
    25b6:	21 e0       	ldi	r18, 0x01	; 1
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <nrk_gpio_direction+0x17c>
    25bc:	22 0f       	add	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	8a 95       	dec	r24
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <nrk_gpio_direction+0x178>
    25c4:	92 2b       	or	r25, r18
    25c6:	9a bb       	out	0x1a, r25	; 26
    25c8:	45 c0       	rjmp	.+138    	; 0x2654 <nrk_gpio_direction+0x210>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    25ca:	97 b3       	in	r25, 0x17	; 23
    25cc:	86 95       	lsr	r24
    25ce:	86 95       	lsr	r24
    25d0:	86 95       	lsr	r24
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <nrk_gpio_direction+0x194>
    25d4:	22 0f       	add	r18, r18
    25d6:	33 1f       	adc	r19, r19
    25d8:	8a 95       	dec	r24
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <nrk_gpio_direction+0x190>
    25dc:	92 2b       	or	r25, r18
    25de:	97 bb       	out	0x17, r25	; 23
    25e0:	39 c0       	rjmp	.+114    	; 0x2654 <nrk_gpio_direction+0x210>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    25e2:	94 b3       	in	r25, 0x14	; 20
    25e4:	86 95       	lsr	r24
    25e6:	86 95       	lsr	r24
    25e8:	86 95       	lsr	r24
    25ea:	21 e0       	ldi	r18, 0x01	; 1
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <nrk_gpio_direction+0x1b0>
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	8a 95       	dec	r24
    25f6:	e2 f7       	brpl	.-8      	; 0x25f0 <nrk_gpio_direction+0x1ac>
    25f8:	92 2b       	or	r25, r18
    25fa:	94 bb       	out	0x14, r25	; 20
    25fc:	2b c0       	rjmp	.+86     	; 0x2654 <nrk_gpio_direction+0x210>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    25fe:	91 b3       	in	r25, 0x11	; 17
    2600:	86 95       	lsr	r24
    2602:	86 95       	lsr	r24
    2604:	86 95       	lsr	r24
    2606:	21 e0       	ldi	r18, 0x01	; 1
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <nrk_gpio_direction+0x1cc>
    260c:	22 0f       	add	r18, r18
    260e:	33 1f       	adc	r19, r19
    2610:	8a 95       	dec	r24
    2612:	e2 f7       	brpl	.-8      	; 0x260c <nrk_gpio_direction+0x1c8>
    2614:	92 2b       	or	r25, r18
    2616:	91 bb       	out	0x11, r25	; 17
    2618:	1d c0       	rjmp	.+58     	; 0x2654 <nrk_gpio_direction+0x210>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    261a:	92 b1       	in	r25, 0x02	; 2
    261c:	86 95       	lsr	r24
    261e:	86 95       	lsr	r24
    2620:	86 95       	lsr	r24
    2622:	21 e0       	ldi	r18, 0x01	; 1
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	02 c0       	rjmp	.+4      	; 0x262c <nrk_gpio_direction+0x1e8>
    2628:	22 0f       	add	r18, r18
    262a:	33 1f       	adc	r19, r19
    262c:	8a 95       	dec	r24
    262e:	e2 f7       	brpl	.-8      	; 0x2628 <nrk_gpio_direction+0x1e4>
    2630:	92 2b       	or	r25, r18
    2632:	92 b9       	out	0x02, r25	; 2
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <nrk_gpio_direction+0x210>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2636:	90 91 61 00 	lds	r25, 0x0061
    263a:	86 95       	lsr	r24
    263c:	86 95       	lsr	r24
    263e:	86 95       	lsr	r24
    2640:	21 e0       	ldi	r18, 0x01	; 1
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <nrk_gpio_direction+0x206>
    2646:	22 0f       	add	r18, r18
    2648:	33 1f       	adc	r19, r19
    264a:	8a 95       	dec	r24
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <nrk_gpio_direction+0x202>
    264e:	92 2b       	or	r25, r18
    2650:	90 93 61 00 	sts	0x0061, r25
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	08 95       	ret
    2658:	8f ef       	ldi	r24, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    265a:	08 95       	ret

0000265c <nrk_get_button>:


int8_t nrk_get_button(uint8_t b)
{
return NRK_ERROR;
}
    265c:	8f ef       	ldi	r24, 0xFF	; 255
    265e:	08 95       	ret

00002660 <nrk_led_toggle>:



int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	11 f4       	brne	.+4      	; 0x2668 <nrk_led_toggle+0x8>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <nrk_led_toggle+0x10>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	91 05       	cpc	r25, r1
    266c:	29 f4       	brne	.+10     	; 0x2678 <nrk_led_toggle+0x18>
    266e:	88 e0       	ldi	r24, 0x08	; 8
    2670:	0e 94 25 11 	call	0x224a	; 0x224a <nrk_gpio_toggle>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	08 95       	ret
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2678:	82 30       	cpi	r24, 0x02	; 2
    267a:	91 05       	cpc	r25, r1
    267c:	11 f0       	breq	.+4      	; 0x2682 <nrk_led_toggle+0x22>
    267e:	8f ef       	ldi	r24, 0xFF	; 255
    2680:	08 95       	ret
    2682:	80 e1       	ldi	r24, 0x10	; 16
    2684:	0e 94 25 11 	call	0x224a	; 0x224a <nrk_gpio_toggle>
    2688:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    268a:	08 95       	ret

0000268c <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	11 f4       	brne	.+4      	; 0x2694 <nrk_led_clr+0x8>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	04 c0       	rjmp	.+8      	; 0x269c <nrk_led_clr+0x10>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	91 05       	cpc	r25, r1
    2698:	29 f4       	brne	.+10     	; 0x26a4 <nrk_led_clr+0x18>
    269a:	88 e0       	ldi	r24, 0x08	; 8
    269c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_gpio_set>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	08 95       	ret
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	91 05       	cpc	r25, r1
    26a8:	11 f0       	breq	.+4      	; 0x26ae <nrk_led_clr+0x22>
    26aa:	8f ef       	ldi	r24, 0xFF	; 255
    26ac:	08 95       	ret
    26ae:	80 e1       	ldi	r24, 0x10	; 16
    26b0:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <nrk_gpio_set>
    26b4:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    26b6:	08 95       	ret

000026b8 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	11 f4       	brne	.+4      	; 0x26c0 <nrk_led_set+0x8>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <nrk_led_set+0x10>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    26c0:	81 30       	cpi	r24, 0x01	; 1
    26c2:	91 05       	cpc	r25, r1
    26c4:	29 f4       	brne	.+10     	; 0x26d0 <nrk_led_set+0x18>
    26c6:	88 e0       	ldi	r24, 0x08	; 8
    26c8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <nrk_gpio_clr>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	08 95       	ret
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    26d0:	82 30       	cpi	r24, 0x02	; 2
    26d2:	91 05       	cpc	r25, r1
    26d4:	11 f0       	breq	.+4      	; 0x26da <nrk_led_set+0x22>
    26d6:	8f ef       	ldi	r24, 0xFF	; 255
    26d8:	08 95       	ret
    26da:	80 e1       	ldi	r24, 0x10	; 16
    26dc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <nrk_gpio_clr>
    26e0:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    26e2:	08 95       	ret

000026e4 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    26e4:	5d 9b       	sbis	0x0b, 5	; 11
    26e6:	fe cf       	rjmp	.-4      	; 0x26e4 <putc0>
    26e8:	5d 98       	cbi	0x0b, 5	; 11
    26ea:	8c b9       	out	0x0c, r24	; 12
}
    26ec:	08 95       	ret

000026ee <putc1>:

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    26ee:	90 91 9b 00 	lds	r25, 0x009B
    26f2:	95 ff       	sbrs	r25, 5
    26f4:	fc cf       	rjmp	.-8      	; 0x26ee <putc1>
    26f6:	90 91 9b 00 	lds	r25, 0x009B
    26fa:	9f 7d       	andi	r25, 0xDF	; 223
    26fc:	90 93 9b 00 	sts	0x009B, r25
    2700:	80 93 9c 00 	sts	0x009C, r24
}
    2704:	08 95       	ret

00002706 <setup_uart0>:
}
*/
void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2706:	90 93 90 00 	sts	0x0090, r25
    270a:	89 b9       	out	0x09, r24	; 9
    270c:	86 e0       	ldi	r24, 0x06	; 6
    270e:	80 93 95 00 	sts	0x0095, r24
    2712:	52 98       	cbi	0x0a, 2	; 10
    2714:	59 9a       	sbi	0x0b, 1	; 11
ENABLE_UART0();
    2716:	8a b1       	in	r24, 0x0a	; 10
    2718:	88 61       	ori	r24, 0x18	; 24
    271a:	8a b9       	out	0x0a, r24	; 10
}
    271c:	08 95       	ret

0000271e <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    271e:	90 93 98 00 	sts	0x0098, r25
    2722:	80 93 99 00 	sts	0x0099, r24
    2726:	86 e0       	ldi	r24, 0x06	; 6
    2728:	80 93 9d 00 	sts	0x009D, r24
    272c:	ea e9       	ldi	r30, 0x9A	; 154
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8b 7f       	andi	r24, 0xFB	; 251
    2734:	80 83       	st	Z, r24
    2736:	ab e9       	ldi	r26, 0x9B	; 155
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	8c 91       	ld	r24, X
    273c:	82 60       	ori	r24, 0x02	; 2
    273e:	8c 93       	st	X, r24
ENABLE_UART1();
    2740:	80 81       	ld	r24, Z
    2742:	88 61       	ori	r24, 0x18	; 24
    2744:	80 83       	st	Z, r24
}
    2746:	08 95       	ret

00002748 <getc1>:



char getc1(void){
	unsigned char tmp;
	UART1_WAIT_AND_RECEIVE(tmp);
    2748:	80 91 9b 00 	lds	r24, 0x009B
    274c:	87 ff       	sbrs	r24, 7
    274e:	fc cf       	rjmp	.-8      	; 0x2748 <getc1>
    2750:	80 91 9b 00 	lds	r24, 0x009B
    2754:	8f 77       	andi	r24, 0x7F	; 127
    2756:	80 93 9b 00 	sts	0x009B, r24
    275a:	80 91 9c 00 	lds	r24, 0x009C
	return tmp;
}
    275e:	08 95       	ret

00002760 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29

  //setup_uart1(baudrate);
  setup_uart0(baudrate);
    2768:	0e 94 83 13 	call	0x2706	; 0x2706 <setup_uart0>

  stdout = fdevopen( putc0, getc0);
    276c:	02 e7       	ldi	r16, 0x72	; 114
    276e:	13 e1       	ldi	r17, 0x13	; 19
    2770:	c4 ed       	ldi	r28, 0xD4	; 212
    2772:	df e0       	ldi	r29, 0x0F	; 15
    2774:	c8 01       	movw	r24, r16
    2776:	be 01       	movw	r22, r28
    2778:	0e 94 5d 29 	call	0x52ba	; 0x52ba <fdevopen>
    277c:	90 93 53 05 	sts	0x0553, r25
    2780:	80 93 52 05 	sts	0x0552, r24
  stdin = fdevopen( putc0, getc0);
    2784:	c8 01       	movw	r24, r16
    2786:	be 01       	movw	r22, r28
    2788:	0e 94 5d 29 	call	0x52ba	; 0x52ba <fdevopen>
    278c:	90 93 51 05 	sts	0x0551, r25
    2790:	80 93 50 05 	sts	0x0550, r24
   ENABLE_UART0_RX_INT();
#endif



}
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	08 95       	ret

0000279e <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    27a4:	07 c0       	rjmp	.+14     	; 0x27b4 <nrk_kprintf+0x16>
        putchar(c);
    27a6:	60 91 52 05 	lds	r22, 0x0552
    27aa:	70 91 53 05 	lds	r23, 0x0553
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    27b4:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    27b6:	21 96       	adiw	r28, 0x01	; 1
    27b8:	84 91       	lpm	r24, Z
    27ba:	88 23       	and	r24, r24
    27bc:	a1 f7       	brne	.-24     	; 0x27a6 <nrk_kprintf+0x8>
        putchar(c);
}
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	d1 f7       	brne	.-12     	; 0x27c4 <halWait>

} // halWait
    27d0:	08 95       	ret

000027d2 <write_eeprom_current_image_checksum>:
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
  return NRK_OK;
}

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    27d2:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    27d4:	87 e0       	ldi	r24, 0x07	; 7
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	60 81       	ld	r22, Z
    27da:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__eewr_byte_m128>
  return NRK_OK;
}
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	08 95       	ret

000027e2 <write_eeprom_aes_key>:
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	08 2f       	mov	r16, r24
    27ec:	19 2f       	mov	r17, r25
    27ee:	c8 e0       	ldi	r28, 0x08	; 8
    27f0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    27f2:	ce 01       	movw	r24, r28
    27f4:	f8 01       	movw	r30, r16
    27f6:	61 91       	ld	r22, Z+
    27f8:	8f 01       	movw	r16, r30
    27fa:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__eewr_byte_m128>
    27fe:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2800:	c8 31       	cpi	r28, 0x18	; 24
    2802:	d1 05       	cpc	r29, r1
    2804:	b1 f7       	brne	.-20     	; 0x27f2 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <write_eeprom_load_img_pages>:
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
return NRK_OK;
}

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    2812:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2814:	86 e0       	ldi	r24, 0x06	; 6
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	60 81       	ld	r22, Z
    281a:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__eewr_byte_m128>
  return NRK_OK;
}
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	08 95       	ret

00002822 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2822:	0e 94 b8 2a 	call	0x5570	; 0x5570 <__eewr_byte_m128>
}
    2826:	08 95       	ret

00002828 <read_eeprom_current_image_checksum>:
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    282e:	87 e0       	ldi	r24, 0x07	; 7
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    2836:	88 83       	st	Y, r24
  return NRK_OK;
}
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	08 95       	ret

00002840 <read_eeprom_aes_key>:
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
  return NRK_OK;
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	08 2f       	mov	r16, r24
    284a:	19 2f       	mov	r17, r25
    284c:	c8 e0       	ldi	r28, 0x08	; 8
    284e:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2850:	ce 01       	movw	r24, r28
    2852:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    2856:	f8 01       	movw	r30, r16
    2858:	81 93       	st	Z+, r24
    285a:	8f 01       	movw	r16, r30
    285c:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    285e:	c8 31       	cpi	r28, 0x18	; 24
    2860:	d1 05       	cpc	r29, r1
    2862:	b1 f7       	brne	.-20     	; 0x2850 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	08 95       	ret

00002870 <read_eeprom_load_img_pages>:
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
  return NRK_OK;
}

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2876:	86 e0       	ldi	r24, 0x06	; 6
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    287e:	88 83       	st	Y, r24
  return NRK_OK;
}
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <read_eeprom_channel>:

return NRK_ERROR;
}

int8_t read_eeprom_channel(uint8_t *channel)
{
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    288e:	85 e0       	ldi	r24, 0x05	; 5
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    2896:	88 83       	st	Y, r24
return NRK_OK;
}
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	08 95       	ret

000028a0 <read_eeprom_mac_address>:
{
eeprom_write_byte( (uint8_t*)addr, value );
}

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    28ac:	e8 2e       	mov	r14, r24
    28ae:	e7 01       	movw	r28, r14
    28b0:	7e 01       	movw	r14, r28
    28b2:	f9 2e       	mov	r15, r25
    28b4:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    28be:	08 2f       	mov	r16, r24
    28c0:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    28ca:	e8 2e       	mov	r14, r24
    28cc:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    28d6:	f8 2e       	mov	r15, r24
    28d8:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
    28e2:	18 2f       	mov	r17, r24
    28e4:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    28e6:	84 e0       	ldi	r24, 0x04	; 4
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
ct=buf[0];
ct+=buf[1];
    28ee:	fe 0c       	add	r15, r14
ct+=buf[2];
    28f0:	f0 0e       	add	r15, r16
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    28f2:	f1 0e       	add	r15, r17
    28f4:	8f 15       	cp	r24, r15
    28f6:	11 f0       	breq	.+4      	; 0x28fc <read_eeprom_mac_address+0x5c>
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	01 c0       	rjmp	.+2      	; 0x28fe <read_eeprom_mac_address+0x5e>
    28fc:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	08 95       	ret

0000290c <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    290c:	0e 94 b0 2a 	call	0x5560	; 0x5560 <__eerd_byte_m128>
return v;
}
    2910:	08 95       	ret

00002912 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2912:	f8 94       	cli
};
    2914:	08 95       	ret

00002916 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2916:	78 94       	sei
};
    2918:	08 95       	ret

0000291a <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    291a:	f8 94       	cli
    291c:	ff cf       	rjmp	.-2      	; 0x291c <nrk_halt+0x2>

0000291e <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    291e:	85 e6       	ldi	r24, 0x65	; 101
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	08 95       	ret

00002924 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2924:	0e 94 85 22 	call	0x450a	; 0x450a <_nrk_scheduler>

  	return;
}
    2928:	08 95       	ret

0000292a <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	ec 01       	movw	r28, r24
    293c:	8b 01       	movw	r16, r22
    293e:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	82 30       	cpi	r24, 0x02	; 2
    2944:	21 f0       	breq	.+8      	; 0x294e <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2946:	80 91 1f 05 	lds	r24, 0x051F
    294a:	88 83       	st	Y, r24
    294c:	01 c0       	rjmp	.+2      	; 0x2950 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    294e:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2950:	80 91 1f 05 	lds	r24, 0x051F
    2954:	83 30       	cpi	r24, 0x03	; 3
    2956:	20 f0       	brcs	.+8      	; 0x2960 <nrk_TCB_init+0x36>
    2958:	87 e0       	ldi	r24, 0x07	; 7
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	82 30       	cpi	r24, 0x02	; 2
    2964:	29 f0       	breq	.+10     	; 0x2970 <nrk_TCB_init+0x46>
    2966:	80 91 1f 05 	lds	r24, 0x051F
    296a:	8f 5f       	subi	r24, 0xFF	; 255
    296c:	80 93 1f 05 	sts	0x051F, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2970:	80 91 1f 05 	lds	r24, 0x051F
    2974:	88 23       	and	r24, r24
    2976:	19 f4       	brne	.+6      	; 0x297e <nrk_TCB_init+0x54>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	80 93 1f 05 	sts	0x051F, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    297e:	88 81       	ld	r24, Y
    2980:	28 2f       	mov	r18, r24
    2982:	33 27       	eor	r19, r19
    2984:	27 fd       	sbrc	r18, 7
    2986:	30 95       	com	r19
    2988:	69 01       	movw	r12, r18
    298a:	55 e0       	ldi	r21, 0x05	; 5
    298c:	cc 0c       	add	r12, r12
    298e:	dd 1c       	adc	r13, r13
    2990:	5a 95       	dec	r21
    2992:	e1 f7       	brne	.-8      	; 0x298c <nrk_TCB_init+0x62>
    2994:	c2 0e       	add	r12, r18
    2996:	d3 1e       	adc	r13, r19
    2998:	27 eb       	ldi	r18, 0xB7	; 183
    299a:	34 e0       	ldi	r19, 0x04	; 4
    299c:	c2 0e       	add	r12, r18
    299e:	d3 1e       	adc	r13, r19
    29a0:	f6 01       	movw	r30, r12
    29a2:	11 83       	std	Z+1, r17	; 0x01
    29a4:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    29a6:	98 85       	ldd	r25, Y+8	; 0x08
    29a8:	92 87       	std	Z+10, r25	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    29aa:	93 e0       	ldi	r25, 0x03	; 3
    29ac:	91 87       	std	Z+9, r25	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    29ae:	80 87       	std	Z+8, r24	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    29b0:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    29b2:	ce 01       	movw	r24, r28
    29b4:	0b 96       	adiw	r24, 0x0b	; 11
    29b6:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_nrk_time_to_ticks>
    29ba:	f6 01       	movw	r30, r12
    29bc:	94 8f       	std	Z+28, r25	; 0x1c
    29be:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    29c0:	08 81       	ld	r16, Y
    29c2:	11 27       	eor	r17, r17
    29c4:	07 fd       	sbrc	r16, 7
    29c6:	10 95       	com	r17
    29c8:	ce 01       	movw	r24, r28
    29ca:	4b 96       	adiw	r24, 0x1b	; 27
    29cc:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_nrk_time_to_ticks>
    29d0:	f8 01       	movw	r30, r16
    29d2:	45 e0       	ldi	r20, 0x05	; 5
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	4a 95       	dec	r20
    29da:	e1 f7       	brne	.-8      	; 0x29d4 <nrk_TCB_init+0xaa>
    29dc:	e0 0f       	add	r30, r16
    29de:	f1 1f       	adc	r31, r17
    29e0:	e9 54       	subi	r30, 0x49	; 73
    29e2:	fb 4f       	sbci	r31, 0xFB	; 251
    29e4:	96 8b       	std	Z+22, r25	; 0x16
    29e6:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    29e8:	88 81       	ld	r24, Y
    29ea:	99 27       	eor	r25, r25
    29ec:	87 fd       	sbrc	r24, 7
    29ee:	90 95       	com	r25
    29f0:	8c 01       	movw	r16, r24
    29f2:	35 e0       	ldi	r19, 0x05	; 5
    29f4:	00 0f       	add	r16, r16
    29f6:	11 1f       	adc	r17, r17
    29f8:	3a 95       	dec	r19
    29fa:	e1 f7       	brne	.-8      	; 0x29f4 <nrk_TCB_init+0xca>
    29fc:	08 0f       	add	r16, r24
    29fe:	19 1f       	adc	r17, r25
    2a00:	09 54       	subi	r16, 0x49	; 73
    2a02:	1b 4f       	sbci	r17, 0xFB	; 251
    2a04:	f8 01       	movw	r30, r16
    2a06:	85 89       	ldd	r24, Z+21	; 0x15
    2a08:	96 89       	ldd	r25, Z+22	; 0x16
    2a0a:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a0c:	34 8d       	ldd	r19, Z+28	; 0x1c
    2a0e:	82 0f       	add	r24, r18
    2a10:	93 1f       	adc	r25, r19
    2a12:	90 8f       	std	Z+24, r25	; 0x18
    2a14:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    2a16:	ce 01       	movw	r24, r28
    2a18:	43 96       	adiw	r24, 0x13	; 19
    2a1a:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_nrk_time_to_ticks>
    2a1e:	f8 01       	movw	r30, r16
    2a20:	96 8f       	std	Z+30, r25	; 0x1e
    2a22:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2a24:	88 81       	ld	r24, Y
    2a26:	99 27       	eor	r25, r25
    2a28:	87 fd       	sbrc	r24, 7
    2a2a:	90 95       	com	r25
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	25 e0       	ldi	r18, 0x05	; 5
    2a30:	ee 0f       	add	r30, r30
    2a32:	ff 1f       	adc	r31, r31
    2a34:	2a 95       	dec	r18
    2a36:	e1 f7       	brne	.-8      	; 0x2a30 <nrk_TCB_init+0x106>
    2a38:	e8 0f       	add	r30, r24
    2a3a:	f9 1f       	adc	r31, r25
    2a3c:	e9 54       	subi	r30, 0x49	; 73
    2a3e:	fb 4f       	sbci	r31, 0xFB	; 251
    2a40:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a42:	96 8d       	ldd	r25, Z+30	; 0x1e
    2a44:	92 8f       	std	Z+26, r25	; 0x1a
    2a46:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	90 a3       	std	Z+32, r25	; 0x20
    2a4e:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2a50:	f3 82       	std	Z+3, r15	; 0x03
    2a52:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
    2a68:	08 95       	ret

00002a6a <nrk_start>:




void nrk_start (void)
{
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	cf eb       	ldi	r28, 0xBF	; 191
    2a7a:	d4 e0       	ldi	r29, 0x04	; 4
    2a7c:	10 e0       	ldi	r17, 0x00	; 0
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2a7e:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    2a80:	8f ef       	ldi	r24, 0xFF	; 255
    2a82:	d8 16       	cp	r13, r24
    2a84:	b1 f0       	breq	.+44     	; 0x2ab2 <nrk_start+0x48>
    2a86:	7f eb       	ldi	r23, 0xBF	; 191
    2a88:	e7 2e       	mov	r14, r23
    2a8a:	74 e0       	ldi	r23, 0x04	; 4
    2a8c:	f7 2e       	mov	r15, r23
    2a8e:	00 e0       	ldi	r16, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2a90:	10 17       	cp	r17, r16
    2a92:	41 f0       	breq	.+16     	; 0x2aa4 <nrk_start+0x3a>
    2a94:	f7 01       	movw	r30, r14
    2a96:	80 81       	ld	r24, Z
    2a98:	d8 16       	cp	r13, r24
    2a9a:	21 f4       	brne	.+8      	; 0x2aa4 <nrk_start+0x3a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2a9c:	85 e0       	ldi	r24, 0x05	; 5
    2a9e:	6d 2d       	mov	r22, r13
    2aa0:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2aa4:	0f 5f       	subi	r16, 0xFF	; 255
    2aa6:	81 e2       	ldi	r24, 0x21	; 33
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	e8 0e       	add	r14, r24
    2aac:	f9 1e       	adc	r15, r25
    2aae:	03 30       	cpi	r16, 0x03	; 3
    2ab0:	79 f7       	brne	.-34     	; 0x2a90 <nrk_start+0x26>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2ab2:	1f 5f       	subi	r17, 0xFF	; 255
    2ab4:	a1 96       	adiw	r28, 0x21	; 33
    2ab6:	13 30       	cpi	r17, 0x03	; 3
    2ab8:	11 f7       	brne	.-60     	; 0x2a7e <nrk_start+0x14>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2aba:	0e 94 66 1c 	call	0x38cc	; 0x38cc <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2abe:	28 2f       	mov	r18, r24
    2ac0:	33 27       	eor	r19, r19
    2ac2:	27 fd       	sbrc	r18, 7
    2ac4:	30 95       	com	r19
    2ac6:	f9 01       	movw	r30, r18
    2ac8:	65 e0       	ldi	r22, 0x05	; 5
    2aca:	ee 0f       	add	r30, r30
    2acc:	ff 1f       	adc	r31, r31
    2ace:	6a 95       	dec	r22
    2ad0:	e1 f7       	brne	.-8      	; 0x2aca <nrk_start+0x60>
    2ad2:	e2 0f       	add	r30, r18
    2ad4:	f3 1f       	adc	r31, r19
    2ad6:	e9 54       	subi	r30, 0x49	; 73
    2ad8:	fb 4f       	sbci	r31, 0xFB	; 251
    2ada:	22 85       	ldd	r18, Z+10	; 0x0a
    2adc:	20 93 32 05 	sts	0x0532, r18
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2ae0:	91 e2       	ldi	r25, 0x21	; 33
    2ae2:	89 02       	muls	r24, r25
    2ae4:	c0 01       	movw	r24, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	89 54       	subi	r24, 0x49	; 73
    2aea:	9b 4f       	sbci	r25, 0xFB	; 251
    2aec:	90 93 31 05 	sts	0x0531, r25
    2af0:	80 93 30 05 	sts	0x0530, r24
    2af4:	90 93 22 05 	sts	0x0522, r25
    2af8:	80 93 21 05 	sts	0x0521, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    2afc:	20 93 23 05 	sts	0x0523, r18
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2b00:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <nrk_target_start>
    nrk_stack_pointer_init(); 
    2b04:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2b08:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <nrk_start_high_ready_task>
    2b0c:	ff cf       	rjmp	.-2      	; 0x2b0c <nrk_start+0xa2>

00002b0e <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2b0e:	0f 93       	push	r16
    2b10:	1f 93       	push	r17
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	a3 97       	sbiw	r28, 0x23	; 35
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2b26:	0e 94 66 19 	call	0x32cc	; 0x32cc <nrk_signal_create>
    2b2a:	80 93 20 05 	sts	0x0520, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2b2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b30:	21 f4       	brne	.+8      	; 0x2b3a <nrk_init+0x2c>
    2b32:	8e e0       	ldi	r24, 0x0E	; 14
    2b34:	60 e0       	ldi	r22, 0x00	; 0
    2b36:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2b3a:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2b3e:	80 ff       	sbrs	r24, 0
    2b40:	04 c0       	rjmp	.+8      	; 0x2b4a <nrk_init+0x3c>
    2b42:	86 e0       	ldi	r24, 0x06	; 6
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2b4a:	10 92 23 05 	sts	0x0523, r1
    nrk_cur_task_TCB = NULL;
    2b4e:	10 92 31 05 	sts	0x0531, r1
    2b52:	10 92 30 05 	sts	0x0530, r1
    
    nrk_high_ready_TCB = NULL;
    2b56:	10 92 22 05 	sts	0x0522, r1
    2b5a:	10 92 21 05 	sts	0x0521, r1
    nrk_high_ready_prio = 0; 
    2b5e:	10 92 32 05 	sts	0x0532, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2b62:	10 92 2f 05 	sts	0x052F, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
    2b68:	80 93 1c 05 	sts	0x051C, r24
    nrk_sem_list[i].value=-1;
    2b6c:	80 93 1e 05 	sts	0x051E, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2b70:	80 93 1d 05 	sts	0x051D, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2b74:	93 e6       	ldi	r25, 0x63	; 99
    2b76:	90 93 c1 04 	sts	0x04C1, r25
        nrk_task_TCB[i].task_ID = -1; 
    2b7a:	80 93 bf 04 	sts	0x04BF, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2b7e:	90 93 e2 04 	sts	0x04E2, r25
        nrk_task_TCB[i].task_ID = -1; 
    2b82:	80 93 e0 04 	sts	0x04E0, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2b86:	90 93 03 05 	sts	0x0503, r25
        nrk_task_TCB[i].task_ID = -1; 
    2b8a:	80 93 01 05 	sts	0x0501, r24
    2b8e:	e3 e3       	ldi	r30, 0x33	; 51
    2b90:	f5 e0       	ldi	r31, 0x05	; 5
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    2b92:	cf 01       	movw	r24, r30
    2b94:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2b96:	94 83       	std	Z+4, r25	; 0x04
    2b98:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2b9a:	f7 83       	std	Z+7, r31	; 0x07
    2b9c:	e6 83       	std	Z+6, r30	; 0x06
    2b9e:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    2ba0:	85 e0       	ldi	r24, 0x05	; 5
    2ba2:	e2 34       	cpi	r30, 0x42	; 66
    2ba4:	f8 07       	cpc	r31, r24
    2ba6:	a9 f7       	brne	.-22     	; 0x2b92 <nrk_init+0x84>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2ba8:	10 92 35 05 	sts	0x0535, r1
    2bac:	10 92 34 05 	sts	0x0534, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2bb0:	10 92 46 05 	sts	0x0546, r1
    2bb4:	10 92 45 05 	sts	0x0545, r1
	_head_node = NULL;
    2bb8:	10 92 26 05 	sts	0x0526, r1
    2bbc:	10 92 25 05 	sts	0x0525, r1
	_free_node = &_nrk_readyQ[0];
    2bc0:	3f 97       	sbiw	r30, 0x0f	; 15
    2bc2:	f0 93 b6 04 	sts	0x04B6, r31
    2bc6:	e0 93 b5 04 	sts	0x04B5, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2bca:	8e 01       	movw	r16, r28
    2bcc:	0f 5f       	subi	r16, 0xFF	; 255
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	c8 01       	movw	r24, r16
    2bd2:	6f e5       	ldi	r22, 0x5F	; 95
    2bd4:	72 e2       	ldi	r23, 0x22	; 34
    2bd6:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2bda:	c8 01       	movw	r24, r16
    2bdc:	64 e1       	ldi	r22, 0x14	; 20
    2bde:	74 e0       	ldi	r23, 0x04	; 4
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2be8:	85 e5       	ldi	r24, 0x55	; 85
    2bea:	80 93 14 04 	sts	0x0414, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2bee:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2bf0:	1c 86       	std	Y+12, r1	; 0x0c
    2bf2:	1d 86       	std	Y+13, r1	; 0x0d
    2bf4:	1e 86       	std	Y+14, r1	; 0x0e
    2bf6:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2bf8:	18 8a       	std	Y+16, r1	; 0x10
    2bfa:	19 8a       	std	Y+17, r1	; 0x11
    2bfc:	1a 8a       	std	Y+18, r1	; 0x12
    2bfe:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2c00:	1c 8a       	std	Y+20, r1	; 0x14
    2c02:	1d 8a       	std	Y+21, r1	; 0x15
    2c04:	1e 8a       	std	Y+22, r1	; 0x16
    2c06:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2c08:	18 8e       	std	Y+24, r1	; 0x18
    2c0a:	19 8e       	std	Y+25, r1	; 0x19
    2c0c:	1a 8e       	std	Y+26, r1	; 0x1a
    2c0e:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2c10:	1c 8e       	std	Y+28, r1	; 0x1c
    2c12:	1d 8e       	std	Y+29, r1	; 0x1d
    2c14:	1e 8e       	std	Y+30, r1	; 0x1e
    2c16:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2c18:	18 a2       	std	Y+32, r1	; 0x20
    2c1a:	19 a2       	std	Y+33, r1	; 0x21
    2c1c:	1a a2       	std	Y+34, r1	; 0x22
    2c1e:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2c24:	92 e0       	ldi	r25, 0x02	; 2
    2c26:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2c28:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2c2a:	c8 01       	movw	r24, r16
    2c2c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <nrk_activate_task>
	
}
    2c30:	a3 96       	adiw	r28, 0x23	; 35
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret

00002c46 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code) 
{
  nrk_cur_task_TCB->errno = error_code;
    2c46:	e0 91 30 05 	lds	r30, 0x0530
    2c4a:	f0 91 31 05 	lds	r31, 0x0531
    2c4e:	84 87       	std	Z+12, r24	; 0x0c
} 
    2c50:	08 95       	ret

00002c52 <nrk_errno_get>:

uint8_t nrk_errno_get () 
{
    2c52:	e0 91 30 05 	lds	r30, 0x0530
    2c56:	f0 91 31 05 	lds	r31, 0x0531
  return nrk_cur_task_TCB->errno;
}
    2c5a:	84 85       	ldd	r24, Z+12	; 0x0c
    2c5c:	08 95       	ret

00002c5e <nrk_error_get>:
} 


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code) 
{
  if (error_num == 0)
    2c5e:	20 91 13 04 	lds	r18, 0x0413
    2c62:	22 23       	and	r18, r18
    2c64:	11 f4       	brne	.+4      	; 0x2c6a <nrk_error_get+0xc>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	08 95       	ret
    return 0;
  *code = error_num;
    2c6a:	fb 01       	movw	r30, r22
    2c6c:	20 83       	st	Z, r18
  *task_id = error_task;
    2c6e:	20 91 eb 02 	lds	r18, 0x02EB
    2c72:	fc 01       	movw	r30, r24
    2c74:	20 83       	st	Z, r18
    2c76:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    2c78:	08 95       	ret

00002c7a <pause>:
}

}

void pause()
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2c84:	19 82       	std	Y+1, r1	; 0x01
    2c86:	07 c0       	rjmp	.+14     	; 0x2c96 <pause+0x1c>
      nrk_spin_wait_us (2000);
    2c88:	80 ed       	ldi	r24, 0xD0	; 208
    2c8a:	97 e0       	ldi	r25, 0x07	; 7
    2c8c:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
}

void pause()
{
volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	84 36       	cpi	r24, 0x64	; 100
    2c9a:	b0 f3       	brcs	.-20     	; 0x2c88 <pause+0xe>
      nrk_spin_wait_us (2000);
}
    2c9c:	0f 90       	pop	r0
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <blink_dot>:
   pause(); 
}

void blink_dot()
{
   nrk_led_set(1); 
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <nrk_led_set>
   pause(); 
    2cac:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
   nrk_led_clr(1);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
   pause(); 
    2cb8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
}
    2cbc:	08 95       	ret

00002cbe <blink_dash>:
}

void blink_dash()
{
uint8_t i;
   nrk_led_set (1); 
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <nrk_led_set>
   pause(); 
    2cc6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
   pause(); 
    2cca:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
   pause(); 
    2cce:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
   nrk_led_clr(1);
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
   pause(); 
    2cda:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
}
    2cde:	08 95       	ret

00002ce0 <blink_morse_code_error>:
   pause(); 
}


void blink_morse_code_error( uint8_t number )
{
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <blink_morse_code_error+0xc>
    2cec:	0f 92       	push	r0
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
uint8_t i;
char str[3];

sprintf( str,"%d",number );
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <blink_morse_code_error+0x14>
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <blink_morse_code_error+0x16>
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <blink_morse_code_error+0x18>
    2cf8:	ed b7       	in	r30, 0x3d	; 61
    2cfa:	fe b7       	in	r31, 0x3e	; 62
    2cfc:	31 96       	adiw	r30, 0x01	; 1
    2cfe:	8e 01       	movw	r16, r28
    2d00:	0f 5f       	subi	r16, 0xFF	; 255
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	ad b7       	in	r26, 0x3d	; 61
    2d06:	be b7       	in	r27, 0x3e	; 62
    2d08:	12 96       	adiw	r26, 0x02	; 2
    2d0a:	1c 93       	st	X, r17
    2d0c:	0e 93       	st	-X, r16
    2d0e:	11 97       	sbiw	r26, 0x01	; 1
    2d10:	28 e5       	ldi	r18, 0x58	; 88
    2d12:	31 e0       	ldi	r19, 0x01	; 1
    2d14:	33 83       	std	Z+3, r19	; 0x03
    2d16:	22 83       	std	Z+2, r18	; 0x02
    2d18:	84 83       	std	Z+4, r24	; 0x04
    2d1a:	15 82       	std	Z+5, r1	; 0x05
    2d1c:	0e 94 22 2a 	call	0x5444	; 0x5444 <sprintf>
    2d20:	ff 24       	eor	r15, r15

for(i=0; i<strlen(str); i++ )
    2d22:	ed b7       	in	r30, 0x3d	; 61
    2d24:	fe b7       	in	r31, 0x3e	; 62
    2d26:	36 96       	adiw	r30, 0x06	; 6
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	fe bf       	out	0x3e, r31	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	ed bf       	out	0x3d, r30	; 61
    2d32:	72 c0       	rjmp	.+228    	; 0x2e18 <blink_morse_code_error+0x138>
{
switch( str[i])
    2d34:	80 0f       	add	r24, r16
    2d36:	91 1f       	adc	r25, r17
    2d38:	dc 01       	movw	r26, r24
    2d3a:	8c 91       	ld	r24, X
    2d3c:	84 33       	cpi	r24, 0x34	; 52
    2d3e:	d1 f1       	breq	.+116    	; 0x2db4 <blink_morse_code_error+0xd4>
    2d40:	85 33       	cpi	r24, 0x35	; 53
    2d42:	70 f4       	brcc	.+28     	; 0x2d60 <blink_morse_code_error+0x80>
    2d44:	81 33       	cpi	r24, 0x31	; 49
    2d46:	f9 f0       	breq	.+62     	; 0x2d86 <blink_morse_code_error+0xa6>
    2d48:	82 33       	cpi	r24, 0x32	; 50
    2d4a:	20 f4       	brcc	.+8      	; 0x2d54 <blink_morse_code_error+0x74>
    2d4c:	80 33       	cpi	r24, 0x30	; 48
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <blink_morse_code_error+0x72>
    2d50:	5c c0       	rjmp	.+184    	; 0x2e0a <blink_morse_code_error+0x12a>
    2d52:	16 c0       	rjmp	.+44     	; 0x2d80 <blink_morse_code_error+0xa0>
    2d54:	82 33       	cpi	r24, 0x32	; 50
    2d56:	11 f1       	breq	.+68     	; 0x2d9c <blink_morse_code_error+0xbc>
    2d58:	83 33       	cpi	r24, 0x33	; 51
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <blink_morse_code_error+0x7e>
    2d5c:	56 c0       	rjmp	.+172    	; 0x2e0a <blink_morse_code_error+0x12a>
    2d5e:	23 c0       	rjmp	.+70     	; 0x2da6 <blink_morse_code_error+0xc6>
    2d60:	87 33       	cpi	r24, 0x37	; 55
    2d62:	c9 f1       	breq	.+114    	; 0x2dd6 <blink_morse_code_error+0xf6>
    2d64:	88 33       	cpi	r24, 0x38	; 56
    2d66:	30 f4       	brcc	.+12     	; 0x2d74 <blink_morse_code_error+0x94>
    2d68:	85 33       	cpi	r24, 0x35	; 53
    2d6a:	69 f1       	breq	.+90     	; 0x2dc6 <blink_morse_code_error+0xe6>
    2d6c:	86 33       	cpi	r24, 0x36	; 54
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <blink_morse_code_error+0x92>
    2d70:	4c c0       	rjmp	.+152    	; 0x2e0a <blink_morse_code_error+0x12a>
    2d72:	2c c0       	rjmp	.+88     	; 0x2dcc <blink_morse_code_error+0xec>
    2d74:	88 33       	cpi	r24, 0x38	; 56
    2d76:	b1 f1       	breq	.+108    	; 0x2de4 <blink_morse_code_error+0x104>
    2d78:	89 33       	cpi	r24, 0x39	; 57
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <blink_morse_code_error+0x9e>
    2d7c:	46 c0       	rjmp	.+140    	; 0x2e0a <blink_morse_code_error+0x12a>
    2d7e:	3b c0       	rjmp	.+118    	; 0x2df6 <blink_morse_code_error+0x116>
{
case '0': blink_dash(); blink_dash(); blink_dash(); blink_dash(); blink_dash(); break;
    2d80:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <blink_morse_code_error+0xaa>
case '1': blink_dot(); blink_dash(); blink_dash(); blink_dash(); blink_dash(); break;
    2d86:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2d8a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2d8e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2d92:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2d96:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2d9a:	37 c0       	rjmp	.+110    	; 0x2e0a <blink_morse_code_error+0x12a>
case '2': blink_dot(); blink_dot(); blink_dash(); blink_dash(); blink_dash(); break;
    2d9c:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2da0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2da4:	f4 cf       	rjmp	.-24     	; 0x2d8e <blink_morse_code_error+0xae>
case '3': blink_dot(); blink_dot(); blink_dot(); blink_dash(); blink_dash(); break;
    2da6:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2daa:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2dae:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2db2:	ef cf       	rjmp	.-34     	; 0x2d92 <blink_morse_code_error+0xb2>
case '4': blink_dot(); blink_dot(); blink_dot(); blink_dot(); blink_dash(); break;
    2db4:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2db8:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2dbc:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2dc0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2dc4:	e8 cf       	rjmp	.-48     	; 0x2d96 <blink_morse_code_error+0xb6>
case '5': blink_dot(); blink_dot(); blink_dot(); blink_dot(); blink_dot(); break;
    2dc6:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <blink_morse_code_error+0xf0>
case '6': blink_dash(); blink_dot(); blink_dot(); blink_dot(); blink_dot(); break;
    2dcc:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2dd0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <blink_morse_code_error+0xfe>
case '7': blink_dash(); blink_dash(); blink_dot(); blink_dot(); blink_dot(); break;
    2dd6:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2dda:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2dde:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2de2:	06 c0       	rjmp	.+12     	; 0x2df0 <blink_morse_code_error+0x110>
case '8': blink_dash(); blink_dash(); blink_dash(); blink_dot(); blink_dot(); break;
    2de4:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2de8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2dec:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2df0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
    2df4:	08 c0       	rjmp	.+16     	; 0x2e06 <blink_morse_code_error+0x126>
case '9': blink_dash(); blink_dash(); blink_dash(); blink_dash(); blink_dot(); break;
    2df6:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2dfa:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2dfe:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2e02:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <blink_dash>
    2e06:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <blink_dot>
}
pause();
    2e0a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
pause();
    2e0e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
pause();
    2e12:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <pause>
uint8_t i;
char str[3];

sprintf( str,"%d",number );

for(i=0; i<strlen(str); i++ )
    2e16:	f3 94       	inc	r15
    2e18:	f8 01       	movw	r30, r16
    2e1a:	01 90       	ld	r0, Z+
    2e1c:	00 20       	and	r0, r0
    2e1e:	e9 f7       	brne	.-6      	; 0x2e1a <blink_morse_code_error+0x13a>
    2e20:	31 97       	sbiw	r30, 0x01	; 1
    2e22:	e0 1b       	sub	r30, r16
    2e24:	f1 0b       	sbc	r31, r17
    2e26:	8f 2d       	mov	r24, r15
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	8e 17       	cp	r24, r30
    2e2c:	9f 07       	cpc	r25, r31
    2e2e:	08 f4       	brcc	.+2      	; 0x2e32 <blink_morse_code_error+0x152>
    2e30:	81 cf       	rjmp	.-254    	; 0x2d34 <blink_morse_code_error+0x54>
pause();
pause();
pause();
}

}
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	ff 90       	pop	r15
    2e42:	08 95       	ret

00002e44 <nrk_error_print>:
  *task_id = error_task;
  return 1;
}

int8_t nrk_error_print () 
{
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
  int8_t t,i;
  if (error_num == 0)
    2e48:	80 91 13 04 	lds	r24, 0x0413
    2e4c:	88 23       	and	r24, r24
    2e4e:	19 f4       	brne	.+6      	; 0x2e56 <nrk_error_print+0x12>
    }
  
#endif  /*  */
    error_num = 0;
  return t;
}
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	08 95       	ret
  int8_t t,i;
  if (error_num == 0)
    return 0;

   #ifdef NRK_HALT_ON_ERROR
     nrk_int_disable ();
    2e56:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
         nrk_watchdog_disable();
       #endif
   #endif 

   #ifndef NRK_REBOOT_ON_ERROR
      nrk_int_disable ();
    2e5a:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  while (1)
     {
    
#endif  
    
    nrk_kprintf (PSTR ("*NRK ERROR("));
    2e5e:	85 e8       	ldi	r24, 0x85	; 133
    2e60:	93 e0       	ldi	r25, 0x03	; 3
    2e62:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>
    printf ("%d", error_task);
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <nrk_error_print+0x24>
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <nrk_error_print+0x26>
    2e6a:	ed b7       	in	r30, 0x3d	; 61
    2e6c:	fe b7       	in	r31, 0x3e	; 62
    2e6e:	31 96       	adiw	r30, 0x01	; 1
    2e70:	88 e5       	ldi	r24, 0x58	; 88
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	ad b7       	in	r26, 0x3d	; 61
    2e76:	be b7       	in	r27, 0x3e	; 62
    2e78:	12 96       	adiw	r26, 0x02	; 2
    2e7a:	9c 93       	st	X, r25
    2e7c:	8e 93       	st	-X, r24
    2e7e:	11 97       	sbiw	r26, 0x01	; 1
    2e80:	80 91 eb 02 	lds	r24, 0x02EB
    2e84:	82 83       	std	Z+2, r24	; 0x02
    2e86:	13 82       	std	Z+3, r1	; 0x03
    2e88:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
    nrk_kprintf (PSTR ("): "));
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	81 e8       	ldi	r24, 0x81	; 129
    2e96:	93 e0       	ldi	r25, 0x03	; 3
    2e98:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>
    if (error_num > NRK_NUM_ERRORS)
    2e9c:	80 91 13 04 	lds	r24, 0x0413
    2ea0:	87 31       	cpi	r24, 0x17	; 23
    2ea2:	10 f0       	brcs	.+4      	; 0x2ea8 <nrk_error_print+0x64>
      error_num = NRK_UNKOWN;
    2ea4:	10 92 13 04 	sts	0x0413, r1
    switch (error_num)
    2ea8:	e0 91 13 04 	lds	r30, 0x0413
    2eac:	8e 2f       	mov	r24, r30
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	31 97       	sbiw	r30, 0x01	; 1
    2eb4:	e5 31       	cpi	r30, 0x15	; 21
    2eb6:	f1 05       	cpc	r31, r1
    2eb8:	08 f0       	brcs	.+2      	; 0x2ebc <nrk_error_print+0x78>
    2eba:	47 c0       	rjmp	.+142    	; 0x2f4a <nrk_error_print+0x106>
    2ebc:	ea 5b       	subi	r30, 0xBA	; 186
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	ee 0f       	add	r30, r30
    2ec2:	ff 1f       	adc	r31, r31
    2ec4:	05 90       	lpm	r0, Z+
    2ec6:	f4 91       	lpm	r31, Z
    2ec8:	e0 2d       	mov	r30, r0
    2eca:	09 94       	ijmp
       {
    case NRK_STACK_TOO_SMALL:
      nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2ecc:	8a e5       	ldi	r24, 0x5A	; 90
    2ece:	93 e0       	ldi	r25, 0x03	; 3
    2ed0:	3e c0       	rjmp	.+124    	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_STACK_OVERFLOW:
      nrk_kprintf (PSTR ("Task Stack Overflow"));
    2ed2:	86 e4       	ldi	r24, 0x46	; 70
    2ed4:	93 e0       	ldi	r25, 0x03	; 3
    2ed6:	3b c0       	rjmp	.+118    	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_INVALID_STACK_POINTER:
      nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2ed8:	80 e3       	ldi	r24, 0x30	; 48
    2eda:	93 e0       	ldi	r25, 0x03	; 3
    2edc:	38 c0       	rjmp	.+112    	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_RESERVE_ERROR:
      nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2ede:	85 e1       	ldi	r24, 0x15	; 21
    2ee0:	93 e0       	ldi	r25, 0x03	; 3
    2ee2:	35 c0       	rjmp	.+106    	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_RESERVE_VIOLATED:
      nrk_kprintf (PSTR ("Task Reserve Violated"));
    2ee4:	8f ef       	ldi	r24, 0xFF	; 255
    2ee6:	92 e0       	ldi	r25, 0x02	; 2
    2ee8:	32 c0       	rjmp	.+100    	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_WAKEUP_MISSED:
      nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2eea:	87 ee       	ldi	r24, 0xE7	; 231
    2eec:	92 e0       	ldi	r25, 0x02	; 2
    2eee:	2f c0       	rjmp	.+94     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_DUP_TASK_ID:
      nrk_kprintf (PSTR ("Duplicated Task ID"));
    2ef0:	84 ed       	ldi	r24, 0xD4	; 212
    2ef2:	92 e0       	ldi	r25, 0x02	; 2
    2ef4:	2c c0       	rjmp	.+88     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_BAD_STARTUP:
      nrk_kprintf (PSTR ("Unexpected Restart"));
    2ef6:	81 ec       	ldi	r24, 0xC1	; 193
    2ef8:	92 e0       	ldi	r25, 0x02	; 2
    2efa:	29 c0       	rjmp	.+82     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_STACK_SMASH:
      nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2efc:	83 ea       	ldi	r24, 0xA3	; 163
    2efe:	92 e0       	ldi	r25, 0x02	; 2
    2f00:	26 c0       	rjmp	.+76     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_EXTRA_TASK:
      nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2f02:	8e e7       	ldi	r24, 0x7E	; 126
    2f04:	92 e0       	ldi	r25, 0x02	; 2
    2f06:	23 c0       	rjmp	.+70     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_LOW_VOLTAGE:
      nrk_kprintf (PSTR ("Low Voltage"));
    2f08:	82 e7       	ldi	r24, 0x72	; 114
    2f0a:	92 e0       	ldi	r25, 0x02	; 2
    2f0c:	20 c0       	rjmp	.+64     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_SEG_FAULT:
      nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2f0e:	87 e5       	ldi	r24, 0x57	; 87
    2f10:	92 e0       	ldi	r25, 0x02	; 2
    2f12:	1d c0       	rjmp	.+58     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_TIMER_OVERFLOW:
      nrk_kprintf (PSTR ("Timer Overflow"));
    2f14:	88 e4       	ldi	r24, 0x48	; 72
    2f16:	92 e0       	ldi	r25, 0x02	; 2
    2f18:	1a c0       	rjmp	.+52     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_SW_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2f1a:	84 e3       	ldi	r24, 0x34	; 52
    2f1c:	92 e0       	ldi	r25, 0x02	; 2
    2f1e:	17 c0       	rjmp	.+46     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("Watchdog Restart"));
    2f20:	83 e2       	ldi	r24, 0x23	; 35
    2f22:	92 e0       	ldi	r25, 0x02	; 2
    2f24:	14 c0       	rjmp	.+40     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_DEVICE_DRIVER:
      nrk_kprintf (PSTR ("Device Driver Error"));
    2f26:	8f e0       	ldi	r24, 0x0F	; 15
    2f28:	92 e0       	ldi	r25, 0x02	; 2
    2f2a:	11 c0       	rjmp	.+34     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_UNIMPLEMENTED:
      nrk_kprintf (PSTR ("Kernel function not implemented"));
    2f2c:	8f ee       	ldi	r24, 0xEF	; 239
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	0e c0       	rjmp	.+28     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_SIGNAL_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Signal"));
    2f32:	87 ed       	ldi	r24, 0xD7	; 215
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	0b c0       	rjmp	.+22     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_SEMAPHORE_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2f38:	8c eb       	ldi	r24, 0xBC	; 188
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	08 c0       	rjmp	.+16     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_BOD_ERROR:
      nrk_kprintf (PSTR ("Brown Out Detect"));
    2f3e:	8b ea       	ldi	r24, 0xAB	; 171
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	05 c0       	rjmp	.+10     	; 0x2f4e <nrk_error_print+0x10a>
      break;
    case NRK_EXT_RST_ERROR:
      nrk_kprintf (PSTR ("External Reset"));
    2f44:	8c e9       	ldi	r24, 0x9C	; 156
    2f46:	91 e0       	ldi	r25, 0x01	; 1
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <nrk_error_print+0x10a>
      break;
    default:
      nrk_kprintf (PSTR ("UNKOWN"));
    2f4a:	85 e9       	ldi	r24, 0x95	; 149
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>
      }
    putchar ('\r');
    2f52:	60 91 52 05 	lds	r22, 0x0552
    2f56:	70 91 53 05 	lds	r23, 0x0553
    2f5a:	8d e0       	ldi	r24, 0x0D	; 13
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    putchar ('\n');
    2f62:	60 91 52 05 	lds	r22, 0x0552
    2f66:	70 91 53 05 	lds	r23, 0x0553
    2f6a:	8a e0       	ldi	r24, 0x0A	; 10
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    2f72:	10 e0       	ldi	r17, 0x00	; 0
    2f74:	21 c0       	rjmp	.+66     	; 0x2fb8 <nrk_error_print+0x174>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    for(i=0; i<20; i++ )
    {
    nrk_led_set (2);
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <nrk_led_set>
    nrk_led_clr (3);
    2f7e:	83 e0       	ldi	r24, 0x03	; 3
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    2f86:	00 e0       	ldi	r16, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    2f88:	88 ee       	ldi	r24, 0xE8	; 232
    2f8a:	93 e0       	ldi	r25, 0x03	; 3
    2f8c:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
     {
    for(i=0; i<20; i++ )
    {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    2f90:	0f 5f       	subi	r16, 0xFF	; 255
    2f92:	04 36       	cpi	r16, 0x64	; 100
    2f94:	c9 f7       	brne	.-14     	; 0x2f88 <nrk_error_print+0x144>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <nrk_led_set>
    nrk_led_clr (2);
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    2fa6:	00 e0       	ldi	r16, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    2fa8:	88 ee       	ldi	r24, 0xE8	; 232
    2faa:	93 e0       	ldi	r25, 0x03	; 3
    2fac:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    2fb0:	0f 5f       	subi	r16, 0xFF	; 255
    2fb2:	04 36       	cpi	r16, 0x64	; 100
    2fb4:	c9 f7       	brne	.-14     	; 0x2fa8 <nrk_error_print+0x164>
#endif  /*  */
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    for(i=0; i<20; i++ )
    2fb6:	1f 5f       	subi	r17, 0xFF	; 255
    2fb8:	14 31       	cpi	r17, 0x14	; 20
    2fba:	ec f2       	brlt	.-70     	; 0x2f76 <nrk_error_print+0x132>
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    }
    nrk_led_clr (3);
    2fbc:	83 e0       	ldi	r24, 0x03	; 3
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    nrk_led_clr (2);
    2fc4:	82 e0       	ldi	r24, 0x02	; 2
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    blink_morse_code_error( error_task );
    2fcc:	80 91 eb 02 	lds	r24, 0x02EB
    2fd0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <blink_morse_code_error>
    blink_morse_code_error( error_num);
    2fd4:	80 91 13 04 	lds	r24, 0x0413
    2fd8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <blink_morse_code_error>
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
    2fde:	cb cf       	rjmp	.-106    	; 0x2f76 <nrk_error_print+0x132>

00002fe0 <nrk_kernel_error_add>:
    nrk_error_print ();
#endif  /*  */
} 

void nrk_kernel_error_add (uint8_t n, uint8_t task) 
{
    2fe0:	ff 92       	push	r15
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	0f 92       	push	r0
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	18 2f       	mov	r17, r24
    2ff2:	f6 2e       	mov	r15, r22
  error_num = n;
    2ff4:	80 93 13 04 	sts	0x0413, r24
  error_task = task;
    2ff8:	60 93 eb 02 	sts	0x02EB, r22
#ifdef NRK_LOG_ERRORS
_nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2ffc:	0e 94 22 17 	call	0x2e44	; 0x2e44 <nrk_error_print>
    3000:	00 e0       	ldi	r16, 0x00	; 0
    3002:	25 c0       	rjmp	.+74     	; 0x304e <nrk_kernel_error_add+0x6e>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    for(i=0; i<20; i++ )
    {
    nrk_led_set (2);
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <nrk_led_set>
    nrk_led_clr (3);
    300c:	83 e0       	ldi	r24, 0x03	; 3
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    3014:	20 e0       	ldi	r18, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    3016:	88 ee       	ldi	r24, 0xE8	; 232
    3018:	93 e0       	ldi	r25, 0x03	; 3
    301a:	29 83       	std	Y+1, r18	; 0x01
    301c:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
     {
    for(i=0; i<20; i++ )
    {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    3020:	29 81       	ldd	r18, Y+1	; 0x01
    3022:	2f 5f       	subi	r18, 0xFF	; 255
    3024:	24 36       	cpi	r18, 0x64	; 100
    3026:	b9 f7       	brne	.-18     	; 0x3016 <nrk_kernel_error_add+0x36>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    3028:	83 e0       	ldi	r24, 0x03	; 3
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <nrk_led_set>
    nrk_led_clr (2);
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    3038:	20 e0       	ldi	r18, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    303a:	88 ee       	ldi	r24, 0xE8	; 232
    303c:	93 e0       	ldi	r25, 0x03	; 3
    303e:	29 83       	std	Y+1, r18	; 0x01
    3040:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    3044:	29 81       	ldd	r18, Y+1	; 0x01
    3046:	2f 5f       	subi	r18, 0xFF	; 255
    3048:	24 36       	cpi	r18, 0x64	; 100
    304a:	b9 f7       	brne	.-18     	; 0x303a <nrk_kernel_error_add+0x5a>
#endif
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    for(i=0; i<20; i++ )
    304c:	0f 5f       	subi	r16, 0xFF	; 255
    304e:	04 31       	cpi	r16, 0x14	; 20
    3050:	c8 f2       	brcs	.-78     	; 0x3004 <nrk_kernel_error_add+0x24>
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    }
    nrk_led_clr (3);
    3052:	83 e0       	ldi	r24, 0x03	; 3
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    nrk_led_clr (2);
    305a:	82 e0       	ldi	r24, 0x02	; 2
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 46 13 	call	0x268c	; 0x268c <nrk_led_clr>
    blink_morse_code_error( task );
    3062:	8f 2d       	mov	r24, r15
    3064:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <blink_morse_code_error>
    blink_morse_code_error( n );
    3068:	81 2f       	mov	r24, r17
    306a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <blink_morse_code_error>
    306e:	00 e0       	ldi	r16, 0x00	; 0
    3070:	c9 cf       	rjmp	.-110    	; 0x3004 <nrk_kernel_error_add+0x24>

00003072 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n) 
{
  error_num = n;
    3072:	80 93 13 04 	sts	0x0413, r24
  error_task = nrk_cur_task_TCB->task_ID;
    3076:	e0 91 30 05 	lds	r30, 0x0530
    307a:	f0 91 31 05 	lds	r31, 0x0531
    307e:	80 85       	ldd	r24, Z+8	; 0x08
    3080:	80 93 eb 02 	sts	0x02EB, r24
#ifdef NRK_LOG_ERRORS
_nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3084:	0e 94 22 17 	call	0x2e44	; 0x2e44 <nrk_error_print>
#endif  /*  */
} 
    3088:	08 95       	ret

0000308a <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
    308a:	99 27       	eor	r25, r25
    308c:	87 fd       	sbrc	r24, 7
    308e:	90 95       	com	r25
    3090:	fc 01       	movw	r30, r24
    3092:	25 e0       	ldi	r18, 0x05	; 5
    3094:	ee 0f       	add	r30, r30
    3096:	ff 1f       	adc	r31, r31
    3098:	2a 95       	dec	r18
    309a:	e1 f7       	brne	.-8      	; 0x3094 <nrk_stack_check_pid+0xa>
    309c:	e8 0f       	add	r30, r24
    309e:	f9 1f       	adc	r31, r25
    30a0:	e9 54       	subi	r30, 0x49	; 73
    30a2:	fb 4f       	sbci	r31, 0xFB	; 251
    30a4:	a2 81       	ldd	r26, Z+2	; 0x02
    30a6:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    30a8:	8c 91       	ld	r24, X
    30aa:	85 35       	cpi	r24, 0x55	; 85
    30ac:	21 f0       	breq	.+8      	; 0x30b6 <nrk_stack_check_pid+0x2c>
		 *stkc=STK_CANARY_VAL; 
    30ae:	85 e5       	ldi	r24, 0x55	; 85
    30b0:	8c 93       	st	X, r24
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    30b4:	08 95       	ret
    		  }  
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	21 e1       	ldi	r18, 0x11	; 17
    30bc:	80 30       	cpi	r24, 0x00	; 0
    30be:	92 07       	cpc	r25, r18
    30c0:	10 f4       	brcc	.+4      	; 0x30c6 <nrk_stack_check_pid+0x3c>
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	08 95       	ret
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    30c6:	82 e1       	ldi	r24, 0x12	; 18
    30c8:	0e 94 39 18 	call	0x3072	; 0x3072 <nrk_error_add>
    30cc:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    		}
#endif
return NRK_OK;
}
    30ce:	08 95       	ret

000030d0 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    30d0:	6f 92       	push	r6
    30d2:	7f 92       	push	r7
    30d4:	8f 92       	push	r8
    30d6:	9f 92       	push	r9
    30d8:	af 92       	push	r10
    30da:	bf 92       	push	r11
    30dc:	cf 92       	push	r12
    30de:	df 92       	push	r13
    30e0:	ef 92       	push	r14
    30e2:	ff 92       	push	r15
    30e4:	0f 93       	push	r16
    30e6:	1f 93       	push	r17
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
	unsigned int *stk;
	unsigned char *stkc;
	uint8_t i;

	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    30ec:	81 e9       	ldi	r24, 0x91	; 145
    30ee:	93 e0       	ldi	r25, 0x03	; 3
    30f0:	0e 94 cf 13 	call	0x279e	; 0x279e <nrk_kprintf>

	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <dump_stack_info+0x26>
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <dump_stack_info+0x28>
    30f8:	8b e5       	ldi	r24, 0x5B	; 91
    30fa:	91 e0       	ldi	r25, 0x01	; 1
    30fc:	ad b7       	in	r26, 0x3d	; 61
    30fe:	be b7       	in	r27, 0x3e	; 62
    3100:	12 96       	adiw	r26, 0x02	; 2
    3102:	9c 93       	st	X, r25
    3104:	8e 93       	st	-X, r24
    3106:	11 97       	sbiw	r26, 0x01	; 1
    3108:	e0 91 30 05 	lds	r30, 0x0530
    310c:	f0 91 31 05 	lds	r31, 0x0531
    3110:	80 85       	ldd	r24, Z+8	; 0x08
    3112:	99 27       	eor	r25, r25
    3114:	87 fd       	sbrc	r24, 7
    3116:	90 95       	com	r25
    3118:	14 96       	adiw	r26, 0x04	; 4
    311a:	9c 93       	st	X, r25
    311c:	8e 93       	st	-X, r24
    311e:	13 97       	sbiw	r26, 0x03	; 3
    3120:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3124:	e0 91 30 05 	lds	r30, 0x0530
    3128:	f0 91 31 05 	lds	r31, 0x0531
    312c:	c2 81       	ldd	r28, Z+2	; 0x02
    312e:	d3 81       	ldd	r29, Z+3	; 0x03
	stkc = (unsigned char*)stk;
	printf( "bottom = %x ",(uint16_t)stkc );
    3130:	84 e6       	ldi	r24, 0x64	; 100
    3132:	91 e0       	ldi	r25, 0x01	; 1
    3134:	ed b7       	in	r30, 0x3d	; 61
    3136:	fe b7       	in	r31, 0x3e	; 62
    3138:	92 83       	std	Z+2, r25	; 0x02
    313a:	81 83       	std	Z+1, r24	; 0x01
    313c:	d4 83       	std	Z+4, r29	; 0x04
    313e:	c3 83       	std	Z+3, r28	; 0x03
    3140:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
	printf( "canary = %x ",*stkc );
    3144:	ed b7       	in	r30, 0x3d	; 61
    3146:	fe b7       	in	r31, 0x3e	; 62
    3148:	31 96       	adiw	r30, 0x01	; 1
    314a:	61 e7       	ldi	r22, 0x71	; 113
    314c:	a6 2e       	mov	r10, r22
    314e:	61 e0       	ldi	r22, 0x01	; 1
    3150:	b6 2e       	mov	r11, r22
    3152:	ad b7       	in	r26, 0x3d	; 61
    3154:	be b7       	in	r27, 0x3e	; 62
    3156:	12 96       	adiw	r26, 0x02	; 2
    3158:	bc 92       	st	X, r11
    315a:	ae 92       	st	-X, r10
    315c:	11 97       	sbiw	r26, 0x01	; 1
    315e:	88 81       	ld	r24, Y
    3160:	82 83       	std	Z+2, r24	; 0x02
    3162:	13 82       	std	Z+3, r1	; 0x03
    3164:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
    3168:	5e e7       	ldi	r21, 0x7E	; 126
    316a:	c5 2e       	mov	r12, r21
    316c:	51 e0       	ldi	r21, 0x01	; 1
    316e:	d5 2e       	mov	r13, r21
    3170:	ed b7       	in	r30, 0x3d	; 61
    3172:	fe b7       	in	r31, 0x3e	; 62
    3174:	d2 82       	std	Z+2, r13	; 0x02
    3176:	c1 82       	std	Z+1, r12	; 0x01
    3178:	e0 91 30 05 	lds	r30, 0x0530
    317c:	f0 91 31 05 	lds	r31, 0x0531
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	ad b7       	in	r26, 0x3d	; 61
    3186:	be b7       	in	r27, 0x3e	; 62
    3188:	14 96       	adiw	r26, 0x04	; 4
    318a:	9c 93       	st	X, r25
    318c:	8e 93       	st	-X, r24
    318e:	13 97       	sbiw	r26, 0x03	; 3
    3190:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3194:	48 e8       	ldi	r20, 0x88	; 136
    3196:	e4 2e       	mov	r14, r20
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	f4 2e       	mov	r15, r20
    319c:	ed b7       	in	r30, 0x3d	; 61
    319e:	fe b7       	in	r31, 0x3e	; 62
    31a0:	f2 82       	std	Z+2, r15	; 0x02
    31a2:	e1 82       	std	Z+1, r14	; 0x01
    31a4:	80 91 30 05 	lds	r24, 0x0530
    31a8:	90 91 31 05 	lds	r25, 0x0531
    31ac:	94 83       	std	Z+4, r25	; 0x04
    31ae:	83 83       	std	Z+3, r24	; 0x03
    31b0:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
    31b4:	c7 eb       	ldi	r28, 0xB7	; 183
    31b6:	d4 e0       	ldi	r29, 0x04	; 4
    31b8:	00 e0       	ldi	r16, 0x00	; 0
    31ba:	10 e0       	ldi	r17, 0x00	; 0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    31c4:	38 e9       	ldi	r19, 0x98	; 152
    31c6:	83 2e       	mov	r8, r19
    31c8:	31 e0       	ldi	r19, 0x01	; 1
    31ca:	93 2e       	mov	r9, r19
		printf( "canary = %x ",*stkc );
    31cc:	35 01       	movw	r6, r10
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    31ce:	bc 2c       	mov	r11, r12
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    31d0:	ae 2c       	mov	r10, r14
    31d2:	cf 2c       	mov	r12, r15
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    31d4:	ea 80       	ldd	r14, Y+2	; 0x02
    31d6:	fb 80       	ldd	r15, Y+3	; 0x03
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    31d8:	00 d0       	rcall	.+0      	; 0x31da <dump_stack_info+0x10a>
    31da:	00 d0       	rcall	.+0      	; 0x31dc <dump_stack_info+0x10c>
    31dc:	00 d0       	rcall	.+0      	; 0x31de <dump_stack_info+0x10e>
    31de:	ed b7       	in	r30, 0x3d	; 61
    31e0:	fe b7       	in	r31, 0x3e	; 62
    31e2:	31 96       	adiw	r30, 0x01	; 1
    31e4:	ad b7       	in	r26, 0x3d	; 61
    31e6:	be b7       	in	r27, 0x3e	; 62
    31e8:	12 96       	adiw	r26, 0x02	; 2
    31ea:	9c 92       	st	X, r9
    31ec:	8e 92       	st	-X, r8
    31ee:	11 97       	sbiw	r26, 0x01	; 1
    31f0:	13 83       	std	Z+3, r17	; 0x03
    31f2:	02 83       	std	Z+2, r16	; 0x02
    31f4:	f5 82       	std	Z+5, r15	; 0x05
    31f6:	e4 82       	std	Z+4, r14	; 0x04
    31f8:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
		printf( "canary = %x ",*stkc );
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	ed b7       	in	r30, 0x3d	; 61
    3202:	fe b7       	in	r31, 0x3e	; 62
    3204:	31 96       	adiw	r30, 0x01	; 1
    3206:	ad b7       	in	r26, 0x3d	; 61
    3208:	be b7       	in	r27, 0x3e	; 62
    320a:	11 96       	adiw	r26, 0x01	; 1
    320c:	6c 92       	st	X, r6
    320e:	11 97       	sbiw	r26, 0x01	; 1
    3210:	12 96       	adiw	r26, 0x02	; 2
    3212:	7c 92       	st	X, r7
    3214:	d7 01       	movw	r26, r14
    3216:	8c 91       	ld	r24, X
    3218:	82 83       	std	Z+2, r24	; 0x02
    321a:	13 82       	std	Z+3, r1	; 0x03
    321c:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    3220:	ed b7       	in	r30, 0x3d	; 61
    3222:	fe b7       	in	r31, 0x3e	; 62
    3224:	b1 82       	std	Z+1, r11	; 0x01
    3226:	d2 82       	std	Z+2, r13	; 0x02
    3228:	88 81       	ld	r24, Y
    322a:	99 81       	ldd	r25, Y+1	; 0x01
    322c:	94 83       	std	Z+4, r25	; 0x04
    322e:	83 83       	std	Z+3, r24	; 0x03
    3230:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3234:	ad b7       	in	r26, 0x3d	; 61
    3236:	be b7       	in	r27, 0x3e	; 62
    3238:	11 96       	adiw	r26, 0x01	; 1
    323a:	ac 92       	st	X, r10
    323c:	11 97       	sbiw	r26, 0x01	; 1
    323e:	12 96       	adiw	r26, 0x02	; 2
    3240:	cc 92       	st	X, r12
    3242:	12 97       	sbiw	r26, 0x02	; 2
    3244:	14 96       	adiw	r26, 0x04	; 4
    3246:	dc 93       	st	X, r29
    3248:	ce 93       	st	-X, r28
    324a:	13 97       	sbiw	r26, 0x03	; 3
    324c:	0e 94 d5 29 	call	0x53aa	; 0x53aa <printf>
    3250:	0f 5f       	subi	r16, 0xFF	; 255
    3252:	1f 4f       	sbci	r17, 0xFF	; 255
    3254:	a1 96       	adiw	r28, 0x21	; 33
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	03 30       	cpi	r16, 0x03	; 3
    3260:	11 05       	cpc	r17, r1
    3262:	09 f0       	breq	.+2      	; 0x3266 <dump_stack_info+0x196>
    3264:	b7 cf       	rjmp	.-146    	; 0x31d4 <dump_stack_info+0x104>
		printf( "stk = %x ",(uint16_t)stkc );
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

	}

}
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	ff 90       	pop	r15
    3270:	ef 90       	pop	r14
    3272:	df 90       	pop	r13
    3274:	cf 90       	pop	r12
    3276:	bf 90       	pop	r11
    3278:	af 90       	pop	r10
    327a:	9f 90       	pop	r9
    327c:	8f 90       	pop	r8
    327e:	7f 90       	pop	r7
    3280:	6f 90       	pop	r6
    3282:	08 95       	ret

00003284 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
    3288:	e0 91 30 05 	lds	r30, 0x0530
    328c:	f0 91 31 05 	lds	r31, 0x0531
    3290:	c2 81       	ldd	r28, Z+2	; 0x02
    3292:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    3294:	88 81       	ld	r24, Y
    3296:	85 35       	cpi	r24, 0x55	; 85
    3298:	39 f0       	breq	.+14     	; 0x32a8 <nrk_stack_check+0x24>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    329a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	0e 94 39 18 	call	0x3072	; 0x3072 <nrk_error_add>
		 *stkc=STK_CANARY_VAL; 
    32a4:	85 e5       	ldi	r24, 0x55	; 85
    32a6:	88 83       	st	Y, r24
    		  } 
 
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
    32a8:	e0 91 30 05 	lds	r30, 0x0530
    32ac:	f0 91 31 05 	lds	r31, 0x0531
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	21 e1       	ldi	r18, 0x11	; 17
    32b6:	80 30       	cpi	r24, 0x00	; 0
    32b8:	92 07       	cpc	r25, r18
    32ba:	28 f0       	brcs	.+10     	; 0x32c6 <nrk_stack_check+0x42>
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    32bc:	0e 94 68 18 	call	0x30d0	; 0x30d0 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    32c0:	82 e1       	ldi	r24, 0x12	; 18
    32c2:	0e 94 39 18 	call	0x3072	; 0x3072 <nrk_error_add>




#endif
}
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	08 95       	ret

000032cc <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    32cc:	ef 92       	push	r14
    32ce:	ff 92       	push	r15
    32d0:	0f 93       	push	r16
    32d2:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    32d4:	e0 90 f4 02 	lds	r14, 0x02F4
    32d8:	f0 90 f5 02 	lds	r15, 0x02F5
    32dc:	00 91 f6 02 	lds	r16, 0x02F6
    32e0:	10 91 f7 02 	lds	r17, 0x02F7
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	a8 01       	movw	r20, r16
    32ea:	97 01       	movw	r18, r14
    32ec:	08 2e       	mov	r0, r24
    32ee:	04 c0       	rjmp	.+8      	; 0x32f8 <nrk_signal_create+0x2c>
    32f0:	56 95       	lsr	r21
    32f2:	47 95       	ror	r20
    32f4:	37 95       	ror	r19
    32f6:	27 95       	ror	r18
    32f8:	0a 94       	dec	r0
    32fa:	d2 f7       	brpl	.-12     	; 0x32f0 <nrk_signal_create+0x24>
    32fc:	21 70       	andi	r18, 0x01	; 1
    32fe:	30 70       	andi	r19, 0x00	; 0
    3300:	21 15       	cp	r18, r1
    3302:	31 05       	cpc	r19, r1
    3304:	c9 f4       	brne	.+50     	; 0x3338 <nrk_signal_create+0x6c>
		{    
			_nrk_signal_list|=SIG(i);
    3306:	21 e0       	ldi	r18, 0x01	; 1
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e0       	ldi	r20, 0x00	; 0
    330c:	50 e0       	ldi	r21, 0x00	; 0
    330e:	08 2e       	mov	r0, r24
    3310:	04 c0       	rjmp	.+8      	; 0x331a <nrk_signal_create+0x4e>
    3312:	22 0f       	add	r18, r18
    3314:	33 1f       	adc	r19, r19
    3316:	44 1f       	adc	r20, r20
    3318:	55 1f       	adc	r21, r21
    331a:	0a 94       	dec	r0
    331c:	d2 f7       	brpl	.-12     	; 0x3312 <nrk_signal_create+0x46>
    331e:	2e 29       	or	r18, r14
    3320:	3f 29       	or	r19, r15
    3322:	40 2b       	or	r20, r16
    3324:	51 2b       	or	r21, r17
    3326:	20 93 f4 02 	sts	0x02F4, r18
    332a:	30 93 f5 02 	sts	0x02F5, r19
    332e:	40 93 f6 02 	sts	0x02F6, r20
    3332:	50 93 f7 02 	sts	0x02F7, r21
			return i;
    3336:	05 c0       	rjmp	.+10     	; 0x3342 <nrk_signal_create+0x76>
    3338:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    333a:	80 32       	cpi	r24, 0x20	; 32
    333c:	91 05       	cpc	r25, r1
    333e:	a1 f6       	brne	.-88     	; 0x32e8 <nrk_signal_create+0x1c>
    3340:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return NRK_ERROR;


}
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	08 95       	ret

0000334c <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
    334c:	e0 91 30 05 	lds	r30, 0x0530
    3350:	f0 91 31 05 	lds	r31, 0x0531
    3354:	65 85       	ldd	r22, Z+13	; 0x0d
    3356:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    3358:	87 85       	ldd	r24, Z+15	; 0x0f
    335a:	90 89       	ldd	r25, Z+16	; 0x10
    335c:	08 95       	ret

0000335e <nrk_signal_unregister>:
	return NRK_OK;
}


int8_t nrk_signal_unregister(int8_t sig_id)
{
    335e:	ef 92       	push	r14
    3360:	ff 92       	push	r15
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3366:	21 e0       	ldi	r18, 0x01	; 1
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	04 c0       	rjmp	.+8      	; 0x3378 <nrk_signal_unregister+0x1a>
    3370:	22 0f       	add	r18, r18
    3372:	33 1f       	adc	r19, r19
    3374:	44 1f       	adc	r20, r20
    3376:	55 1f       	adc	r21, r21
    3378:	8a 95       	dec	r24
    337a:	d2 f7       	brpl	.-12     	; 0x3370 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    337c:	e0 91 30 05 	lds	r30, 0x0530
    3380:	f0 91 31 05 	lds	r31, 0x0531
    3384:	85 85       	ldd	r24, Z+13	; 0x0d
    3386:	96 85       	ldd	r25, Z+14	; 0x0e
    3388:	a7 85       	ldd	r26, Z+15	; 0x0f
    338a:	b0 89       	ldd	r27, Z+16	; 0x10
    338c:	79 01       	movw	r14, r18
    338e:	8a 01       	movw	r16, r20
    3390:	e8 22       	and	r14, r24
    3392:	f9 22       	and	r15, r25
    3394:	0a 23       	and	r16, r26
    3396:	1b 23       	and	r17, r27
    3398:	e1 14       	cp	r14, r1
    339a:	f1 04       	cpc	r15, r1
    339c:	01 05       	cpc	r16, r1
    339e:	11 05       	cpc	r17, r1
    33a0:	11 f4       	brne	.+4      	; 0x33a6 <nrk_signal_unregister+0x48>
    33a2:	8f ef       	ldi	r24, 0xFF	; 255
    33a4:	19 c0       	rjmp	.+50     	; 0x33d8 <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    33a6:	20 95       	com	r18
    33a8:	30 95       	com	r19
    33aa:	40 95       	com	r20
    33ac:	50 95       	com	r21
    33ae:	82 23       	and	r24, r18
    33b0:	93 23       	and	r25, r19
    33b2:	a4 23       	and	r26, r20
    33b4:	b5 23       	and	r27, r21
    33b6:	85 87       	std	Z+13, r24	; 0x0d
    33b8:	96 87       	std	Z+14, r25	; 0x0e
    33ba:	a7 87       	std	Z+15, r26	; 0x0f
    33bc:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    33be:	81 89       	ldd	r24, Z+17	; 0x11
    33c0:	92 89       	ldd	r25, Z+18	; 0x12
    33c2:	a3 89       	ldd	r26, Z+19	; 0x13
    33c4:	b4 89       	ldd	r27, Z+20	; 0x14
    33c6:	82 23       	and	r24, r18
    33c8:	93 23       	and	r25, r19
    33ca:	a4 23       	and	r26, r20
    33cc:	b5 23       	and	r27, r21
    33ce:	81 8b       	std	Z+17, r24	; 0x11
    33d0:	92 8b       	std	Z+18, r25	; 0x12
    33d2:	a3 8b       	std	Z+19, r26	; 0x13
    33d4:	b4 8b       	std	Z+20, r27	; 0x14
    33d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return NRK_ERROR;
return NRK_OK;
}
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	08 95       	ret

000033e2 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    33e2:	99 27       	eor	r25, r25
    33e4:	87 fd       	sbrc	r24, 7
    33e6:	90 95       	com	r25
    33e8:	20 91 f4 02 	lds	r18, 0x02F4
    33ec:	30 91 f5 02 	lds	r19, 0x02F5
    33f0:	40 91 f6 02 	lds	r20, 0x02F6
    33f4:	50 91 f7 02 	lds	r21, 0x02F7
    33f8:	08 2e       	mov	r0, r24
    33fa:	04 c0       	rjmp	.+8      	; 0x3404 <nrk_signal_register+0x22>
    33fc:	56 95       	lsr	r21
    33fe:	47 95       	ror	r20
    3400:	37 95       	ror	r19
    3402:	27 95       	ror	r18
    3404:	0a 94       	dec	r0
    3406:	d2 f7       	brpl	.-12     	; 0x33fc <nrk_signal_register+0x1a>
    3408:	21 70       	andi	r18, 0x01	; 1
    340a:	30 70       	andi	r19, 0x00	; 0
    340c:	21 15       	cp	r18, r1
    340e:	31 05       	cpc	r19, r1
    3410:	11 f4       	brne	.+4      	; 0x3416 <nrk_signal_register+0x34>
    3412:	8f ef       	ldi	r24, 0xFF	; 255
    3414:	08 95       	ret
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3416:	e0 91 30 05 	lds	r30, 0x0530
    341a:	f0 91 31 05 	lds	r31, 0x0531
    341e:	21 e0       	ldi	r18, 0x01	; 1
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	50 e0       	ldi	r21, 0x00	; 0
    3426:	04 c0       	rjmp	.+8      	; 0x3430 <nrk_signal_register+0x4e>
    3428:	22 0f       	add	r18, r18
    342a:	33 1f       	adc	r19, r19
    342c:	44 1f       	adc	r20, r20
    342e:	55 1f       	adc	r21, r21
    3430:	8a 95       	dec	r24
    3432:	d2 f7       	brpl	.-12     	; 0x3428 <nrk_signal_register+0x46>
    3434:	85 85       	ldd	r24, Z+13	; 0x0d
    3436:	96 85       	ldd	r25, Z+14	; 0x0e
    3438:	a7 85       	ldd	r26, Z+15	; 0x0f
    343a:	b0 89       	ldd	r27, Z+16	; 0x10
    343c:	82 2b       	or	r24, r18
    343e:	93 2b       	or	r25, r19
    3440:	a4 2b       	or	r26, r20
    3442:	b5 2b       	or	r27, r21
    3444:	85 87       	std	Z+13, r24	; 0x0d
    3446:	96 87       	std	Z+14, r25	; 0x0e
    3448:	a7 87       	std	Z+15, r26	; 0x0f
    344a:	b0 8b       	std	Z+16, r27	; 0x10
    344c:	81 e0       	ldi	r24, 0x01	; 1
		return NRK_OK;
	}
            
	return NRK_ERROR;
}
    344e:	08 95       	ret

00003450 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	08 95       	ret

00003456 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3456:	25 e0       	ldi	r18, 0x05	; 5
    3458:	8c 31       	cpi	r24, 0x1C	; 28
    345a:	92 07       	cpc	r25, r18
    345c:	11 f0       	breq	.+4      	; 0x3462 <nrk_get_resource_index+0xc>
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	08 95       	ret
    3462:	80 e0       	ldi	r24, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    3464:	08 95       	ret

00003466 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3466:	0e 94 2b 1a 	call	0x3456	; 0x3456 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    346a:	8f 3f       	cpi	r24, 0xFF	; 255
    346c:	11 f4       	brne	.+4      	; 0x3472 <nrk_sem_delete+0xc>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	03 c0       	rjmp	.+6      	; 0x3478 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3472:	81 30       	cpi	r24, 0x01	; 1
    3474:	29 f4       	brne	.+10     	; 0x3480 <nrk_sem_delete+0x1a>
    3476:	82 e0       	ldi	r24, 0x02	; 2
    3478:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_nrk_errno_set>
    347c:	8f ef       	ldi	r24, 0xFF	; 255
    347e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3480:	99 27       	eor	r25, r25
    3482:	87 fd       	sbrc	r24, 7
    3484:	90 95       	com	r25
    3486:	fc 01       	movw	r30, r24
    3488:	ee 0f       	add	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	e8 0f       	add	r30, r24
    348e:	f9 1f       	adc	r31, r25
    3490:	e4 5e       	subi	r30, 0xE4	; 228
    3492:	fa 4f       	sbci	r31, 0xFA	; 250
    3494:	8f ef       	ldi	r24, 0xFF	; 255
    3496:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3498:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    349a:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    349c:	80 91 2f 05 	lds	r24, 0x052F
    34a0:	81 50       	subi	r24, 0x01	; 1
    34a2:	80 93 2f 05 	sts	0x052F, r24
    34a6:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
    34a8:	08 95       	ret

000034aa <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    34aa:	0e 94 2b 1a 	call	0x3456	; 0x3456 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    34ae:	8f 3f       	cpi	r24, 0xFF	; 255
    34b0:	11 f4       	brne	.+4      	; 0x34b6 <nrk_sem_query+0xc>
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	03 c0       	rjmp	.+6      	; 0x34bc <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	29 f4       	brne	.+10     	; 0x34c4 <nrk_sem_query+0x1a>
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_nrk_errno_set>
    34c0:	8f ef       	ldi	r24, 0xFF	; 255
    34c2:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    34c4:	99 27       	eor	r25, r25
    34c6:	87 fd       	sbrc	r24, 7
    34c8:	90 95       	com	r25
    34ca:	fc 01       	movw	r30, r24
    34cc:	ee 0f       	add	r30, r30
    34ce:	ff 1f       	adc	r31, r31
    34d0:	e8 0f       	add	r30, r24
    34d2:	f9 1f       	adc	r31, r25
    34d4:	e4 5e       	subi	r30, 0xE4	; 228
    34d6:	fa 4f       	sbci	r31, 0xFA	; 250
    34d8:	82 81       	ldd	r24, Z+2	; 0x02
}
    34da:	08 95       	ret

000034dc <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    34dc:	ef 92       	push	r14
    34de:	ff 92       	push	r15
    34e0:	0f 93       	push	r16
    34e2:	1f 93       	push	r17
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	0f 92       	push	r0
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    34ee:	0e 94 2b 1a 	call	0x3456	; 0x3456 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    34f2:	8f 3f       	cpi	r24, 0xFF	; 255
    34f4:	11 f4       	brne	.+4      	; 0x34fa <nrk_sem_post+0x1e>
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	03 c0       	rjmp	.+6      	; 0x3500 <nrk_sem_post+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    34fa:	81 30       	cpi	r24, 0x01	; 1
    34fc:	29 f4       	brne	.+10     	; 0x3508 <nrk_sem_post+0x2c>
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_nrk_errno_set>
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	44 c0       	rjmp	.+136    	; 0x3590 <nrk_sem_post+0xb4>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3508:	28 2f       	mov	r18, r24
    350a:	33 27       	eor	r19, r19
    350c:	27 fd       	sbrc	r18, 7
    350e:	30 95       	com	r19
    3510:	89 01       	movw	r16, r18
    3512:	00 0f       	add	r16, r16
    3514:	11 1f       	adc	r17, r17
    3516:	02 0f       	add	r16, r18
    3518:	13 1f       	adc	r17, r19
    351a:	04 5e       	subi	r16, 0xE4	; 228
    351c:	1a 4f       	sbci	r17, 0xFA	; 250
    351e:	d8 01       	movw	r26, r16
    3520:	12 96       	adiw	r26, 0x02	; 2
    3522:	2c 91       	ld	r18, X
    3524:	12 97       	sbiw	r26, 0x02	; 2
    3526:	9c 91       	ld	r25, X
    3528:	29 17       	cp	r18, r25
    352a:	8c f5       	brge	.+98     	; 0x358e <nrk_sem_post+0xb2>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>

		nrk_sem_list[id].value++;
    3532:	f8 01       	movw	r30, r16
    3534:	92 81       	ldd	r25, Z+2	; 0x02
    3536:	9f 5f       	subi	r25, 0xFF	; 255
    3538:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    353a:	e0 91 30 05 	lds	r30, 0x0530
    353e:	f0 91 31 05 	lds	r31, 0x0531
    3542:	14 82       	std	Z+4, r1	; 0x04
    3544:	ee eb       	ldi	r30, 0xBE	; 190
    3546:	f4 e0       	ldi	r31, 0x04	; 4

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	28 2f       	mov	r18, r24
    354c:	33 27       	eor	r19, r19
    354e:	27 fd       	sbrc	r18, 7
    3550:	30 95       	com	r19
    3552:	43 2f       	mov	r20, r19
    3554:	53 2f       	mov	r21, r19
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3556:	93 e0       	ldi	r25, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3558:	80 81       	ld	r24, Z
    355a:	82 30       	cpi	r24, 0x02	; 2
    355c:	89 f4       	brne	.+34     	; 0x3580 <nrk_sem_post+0xa4>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    355e:	e2 84       	ldd	r14, Z+10	; 0x0a
    3560:	f3 84       	ldd	r15, Z+11	; 0x0b
    3562:	04 85       	ldd	r16, Z+12	; 0x0c
    3564:	15 85       	ldd	r17, Z+13	; 0x0d
    3566:	e2 16       	cp	r14, r18
    3568:	f3 06       	cpc	r15, r19
    356a:	04 07       	cpc	r16, r20
    356c:	15 07       	cpc	r17, r21
    356e:	41 f4       	brne	.+16     	; 0x3580 <nrk_sem_post+0xa4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3570:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3572:	17 86       	std	Z+15, r1	; 0x0f
    3574:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    3576:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3578:	12 86       	std	Z+10, r1	; 0x0a
    357a:	13 86       	std	Z+11, r1	; 0x0b
    357c:	14 86       	std	Z+12, r1	; 0x0c
    357e:	15 86       	std	Z+13, r1	; 0x0d
    3580:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3582:	85 e0       	ldi	r24, 0x05	; 5
    3584:	e1 32       	cpi	r30, 0x21	; 33
    3586:	f8 07       	cpc	r31, r24
    3588:	39 f7       	brne	.-50     	; 0x3558 <nrk_sem_post+0x7c>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    358a:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
    358e:	81 e0       	ldi	r24, 0x01	; 1
	}
		
return NRK_OK;
}
    3590:	0f 90       	pop	r0
    3592:	cf 91       	pop	r28
    3594:	df 91       	pop	r29
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	08 95       	ret

000035a0 <nrk_event_signal>:
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
{
    35a0:	ef 92       	push	r14
    35a2:	ff 92       	push	r15
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	0f 92       	push	r0
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    35b2:	51 e0       	ldi	r21, 0x01	; 1
    35b4:	e5 2e       	mov	r14, r21
    35b6:	f1 2c       	mov	r15, r1
    35b8:	01 2d       	mov	r16, r1
    35ba:	11 2d       	mov	r17, r1
    35bc:	04 c0       	rjmp	.+8      	; 0x35c6 <nrk_event_signal+0x26>
    35be:	ee 0c       	add	r14, r14
    35c0:	ff 1c       	adc	r15, r15
    35c2:	00 1f       	adc	r16, r16
    35c4:	11 1f       	adc	r17, r17
    35c6:	8a 95       	dec	r24
    35c8:	d2 f7       	brpl	.-12     	; 0x35be <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    35ca:	80 91 f4 02 	lds	r24, 0x02F4
    35ce:	90 91 f5 02 	lds	r25, 0x02F5
    35d2:	a0 91 f6 02 	lds	r26, 0x02F6
    35d6:	b0 91 f7 02 	lds	r27, 0x02F7
    35da:	8e 21       	and	r24, r14
    35dc:	9f 21       	and	r25, r15
    35de:	a0 23       	and	r26, r16
    35e0:	b1 23       	and	r27, r17
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	a1 05       	cpc	r26, r1
    35e6:	b1 05       	cpc	r27, r1
    35e8:	11 f4       	brne	.+4      	; 0x35ee <nrk_event_signal+0x4e>
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	42 c0       	rjmp	.+132    	; 0x3672 <nrk_event_signal+0xd2>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    35ee:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
    35f2:	ee eb       	ldi	r30, 0xBE	; 190
    35f4:	f4 e0       	ldi	r31, 0x04	; 4
	}
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
    35f6:	80 e0       	ldi	r24, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    35f8:	93 e0       	ldi	r25, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    35fa:	20 81       	ld	r18, Z
    35fc:	21 30       	cpi	r18, 0x01	; 1
    35fe:	b1 f4       	brne	.+44     	; 0x362c <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3600:	22 85       	ldd	r18, Z+10	; 0x0a
    3602:	33 85       	ldd	r19, Z+11	; 0x0b
    3604:	44 85       	ldd	r20, Z+12	; 0x0c
    3606:	55 85       	ldd	r21, Z+13	; 0x0d
    3608:	2e 21       	and	r18, r14
    360a:	3f 21       	and	r19, r15
    360c:	40 23       	and	r20, r16
    360e:	51 23       	and	r21, r17
    3610:	21 15       	cp	r18, r1
    3612:	31 05       	cpc	r19, r1
    3614:	41 05       	cpc	r20, r1
    3616:	51 05       	cpc	r21, r1
    3618:	49 f0       	breq	.+18     	; 0x362c <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    361a:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    361c:	17 86       	std	Z+15, r1	; 0x0f
    361e:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    3620:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3622:	e2 86       	std	Z+10, r14	; 0x0a
    3624:	f3 86       	std	Z+11, r15	; 0x0b
    3626:	04 87       	std	Z+12, r16	; 0x0c
    3628:	15 87       	std	Z+13, r17	; 0x0d
    362a:	81 e0       	ldi	r24, 0x01	; 1
					event_occured=1;
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    362c:	20 81       	ld	r18, Z
    362e:	22 30       	cpi	r18, 0x02	; 2
    3630:	91 f4       	brne	.+36     	; 0x3656 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3632:	22 85       	ldd	r18, Z+10	; 0x0a
    3634:	33 85       	ldd	r19, Z+11	; 0x0b
    3636:	44 85       	ldd	r20, Z+12	; 0x0c
    3638:	55 85       	ldd	r21, Z+13	; 0x0d
    363a:	2e 15       	cp	r18, r14
    363c:	3f 05       	cpc	r19, r15
    363e:	40 07       	cpc	r20, r16
    3640:	51 07       	cpc	r21, r17
    3642:	49 f4       	brne	.+18     	; 0x3656 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3644:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3646:	17 86       	std	Z+15, r1	; 0x0f
    3648:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    364a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    364c:	12 86       	std	Z+10, r1	; 0x0a
    364e:	13 86       	std	Z+11, r1	; 0x0b
    3650:	14 86       	std	Z+12, r1	; 0x0c
    3652:	15 86       	std	Z+13, r1	; 0x0d
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3658:	25 e0       	ldi	r18, 0x05	; 5
    365a:	e1 32       	cpi	r30, 0x21	; 33
    365c:	f2 07       	cpc	r31, r18
    365e:	69 f6       	brne	.-102    	; 0x35fa <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3660:	89 83       	std	Y+1, r24	; 0x01
    3662:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
	if(event_occured)
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	88 23       	and	r24, r24
    366a:	11 f0       	breq	.+4      	; 0x3670 <nrk_event_signal+0xd0>
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	04 c0       	rjmp	.+8      	; 0x3678 <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3670:	82 e0       	ldi	r24, 0x02	; 2
    3672:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_nrk_errno_set>
    3676:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
}
    3678:	0f 90       	pop	r0
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	1f 91       	pop	r17
    3680:	0f 91       	pop	r16
    3682:	ff 90       	pop	r15
    3684:	ef 90       	pop	r14
    3686:	08 95       	ret

00003688 <nrk_signal_delete>:
        return nrk_cur_task_TCB->registered_signal_mask;
}

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3688:	ef 92       	push	r14
    368a:	ff 92       	push	r15
    368c:	0f 93       	push	r16
    368e:	1f 93       	push	r17
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3694:	c8 2f       	mov	r28, r24
    3696:	dd 27       	eor	r29, r29
    3698:	c7 fd       	sbrc	r28, 7
    369a:	d0 95       	com	r29
    369c:	61 e0       	ldi	r22, 0x01	; 1
    369e:	e6 2e       	mov	r14, r22
    36a0:	f1 2c       	mov	r15, r1
    36a2:	01 2d       	mov	r16, r1
    36a4:	11 2d       	mov	r17, r1
    36a6:	0c 2e       	mov	r0, r28
    36a8:	04 c0       	rjmp	.+8      	; 0x36b2 <nrk_signal_delete+0x2a>
    36aa:	ee 0c       	add	r14, r14
    36ac:	ff 1c       	adc	r15, r15
    36ae:	00 1f       	adc	r16, r16
    36b0:	11 1f       	adc	r17, r17
    36b2:	0a 94       	dec	r0
    36b4:	d2 f7       	brpl	.-12     	; 0x36aa <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    36b6:	80 91 f4 02 	lds	r24, 0x02F4
    36ba:	90 91 f5 02 	lds	r25, 0x02F5
    36be:	a0 91 f6 02 	lds	r26, 0x02F6
    36c2:	b0 91 f7 02 	lds	r27, 0x02F7
    36c6:	8e 21       	and	r24, r14
    36c8:	9f 21       	and	r25, r15
    36ca:	a0 23       	and	r26, r16
    36cc:	b1 23       	and	r27, r17
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	a1 05       	cpc	r26, r1
    36d2:	b1 05       	cpc	r27, r1
    36d4:	11 f4       	brne	.+4      	; 0x36da <nrk_signal_delete+0x52>
    36d6:	8f ef       	ldi	r24, 0xFF	; 255
    36d8:	5c c0       	rjmp	.+184    	; 0x3792 <nrk_signal_delete+0x10a>

	nrk_int_disable();
    36da:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
    36de:	ee eb       	ldi	r30, 0xBE	; 190
    36e0:	f4 e0       	ldi	r31, 0x04	; 4
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    36e2:	a8 01       	movw	r20, r16
    36e4:	97 01       	movw	r18, r14
    36e6:	20 95       	com	r18
    36e8:	30 95       	com	r19
    36ea:	40 95       	com	r20
    36ec:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    36ee:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    36f0:	81 81       	ldd	r24, Z+1	; 0x01
    36f2:	8f 3f       	cpi	r24, 0xFF	; 255
    36f4:	39 f1       	breq	.+78     	; 0x3744 <nrk_signal_delete+0xbc>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    36f6:	86 81       	ldd	r24, Z+6	; 0x06
    36f8:	97 81       	ldd	r25, Z+7	; 0x07
    36fa:	a0 85       	ldd	r26, Z+8	; 0x08
    36fc:	b1 85       	ldd	r27, Z+9	; 0x09
    36fe:	8e 15       	cp	r24, r14
    3700:	9f 05       	cpc	r25, r15
    3702:	a0 07       	cpc	r26, r16
    3704:	b1 07       	cpc	r27, r17
    3706:	31 f4       	brne	.+12     	; 0x3714 <nrk_signal_delete+0x8c>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3708:	12 86       	std	Z+10, r1	; 0x0a
    370a:	13 86       	std	Z+11, r1	; 0x0b
    370c:	14 86       	std	Z+12, r1	; 0x0c
    370e:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    3710:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3712:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3714:	86 81       	ldd	r24, Z+6	; 0x06
    3716:	97 81       	ldd	r25, Z+7	; 0x07
    3718:	a0 85       	ldd	r26, Z+8	; 0x08
    371a:	b1 85       	ldd	r27, Z+9	; 0x09
    371c:	82 23       	and	r24, r18
    371e:	93 23       	and	r25, r19
    3720:	a4 23       	and	r26, r20
    3722:	b5 23       	and	r27, r21
    3724:	86 83       	std	Z+6, r24	; 0x06
    3726:	97 83       	std	Z+7, r25	; 0x07
    3728:	a0 87       	std	Z+8, r26	; 0x08
    372a:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    372c:	82 85       	ldd	r24, Z+10	; 0x0a
    372e:	93 85       	ldd	r25, Z+11	; 0x0b
    3730:	a4 85       	ldd	r26, Z+12	; 0x0c
    3732:	b5 85       	ldd	r27, Z+13	; 0x0d
    3734:	82 23       	and	r24, r18
    3736:	93 23       	and	r25, r19
    3738:	a4 23       	and	r26, r20
    373a:	b5 23       	and	r27, r21
    373c:	82 87       	std	Z+10, r24	; 0x0a
    373e:	93 87       	std	Z+11, r25	; 0x0b
    3740:	a4 87       	std	Z+12, r26	; 0x0c
    3742:	b5 87       	std	Z+13, r27	; 0x0d
    3744:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3746:	95 e0       	ldi	r25, 0x05	; 5
    3748:	e1 32       	cpi	r30, 0x21	; 33
    374a:	f9 07       	cpc	r31, r25
    374c:	89 f6       	brne	.-94     	; 0x36f0 <nrk_signal_delete+0x68>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    374e:	2e ef       	ldi	r18, 0xFE	; 254
    3750:	3f ef       	ldi	r19, 0xFF	; 255
    3752:	4f ef       	ldi	r20, 0xFF	; 255
    3754:	5f ef       	ldi	r21, 0xFF	; 255
    3756:	04 c0       	rjmp	.+8      	; 0x3760 <nrk_signal_delete+0xd8>
    3758:	22 0f       	add	r18, r18
    375a:	33 1f       	adc	r19, r19
    375c:	44 1f       	adc	r20, r20
    375e:	55 1f       	adc	r21, r21
    3760:	ca 95       	dec	r28
    3762:	d2 f7       	brpl	.-12     	; 0x3758 <nrk_signal_delete+0xd0>
    3764:	80 91 f4 02 	lds	r24, 0x02F4
    3768:	90 91 f5 02 	lds	r25, 0x02F5
    376c:	a0 91 f6 02 	lds	r26, 0x02F6
    3770:	b0 91 f7 02 	lds	r27, 0x02F7
    3774:	82 23       	and	r24, r18
    3776:	93 23       	and	r25, r19
    3778:	a4 23       	and	r26, r20
    377a:	b5 23       	and	r27, r21
    377c:	80 93 f4 02 	sts	0x02F4, r24
    3780:	90 93 f5 02 	sts	0x02F5, r25
    3784:	a0 93 f6 02 	sts	0x02F6, r26
    3788:	b0 93 f7 02 	sts	0x02F7, r27
	nrk_int_enable();
    378c:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
    3790:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	ef 90       	pop	r14
    379e:	08 95       	ret

000037a0 <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	0f 92       	push	r0
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    37ae:	0e 94 2b 1a 	call	0x3456	; 0x3456 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    37b2:	8f 3f       	cpi	r24, 0xFF	; 255
    37b4:	11 f4       	brne	.+4      	; 0x37ba <nrk_sem_pend+0x1a>
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	03 c0       	rjmp	.+6      	; 0x37c0 <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    37ba:	81 30       	cpi	r24, 0x01	; 1
    37bc:	29 f4       	brne	.+10     	; 0x37c8 <nrk_sem_pend+0x28>
    37be:	82 e0       	ldi	r24, 0x02	; 2
    37c0:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_nrk_errno_set>
    37c4:	8f ef       	ldi	r24, 0xFF	; 255
    37c6:	40 c0       	rjmp	.+128    	; 0x3848 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	08 2f       	mov	r16, r24
    37d2:	11 27       	eor	r17, r17
    37d4:	07 fd       	sbrc	r16, 7
    37d6:	10 95       	com	r17
    37d8:	f8 01       	movw	r30, r16
    37da:	ee 0f       	add	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	e0 0f       	add	r30, r16
    37e0:	f1 1f       	adc	r31, r17
    37e2:	e4 5e       	subi	r30, 0xE4	; 228
    37e4:	fa 4f       	sbci	r31, 0xFA	; 250
    37e6:	92 81       	ldd	r25, Z+2	; 0x02
    37e8:	99 23       	and	r25, r25
    37ea:	b1 f4       	brne	.+44     	; 0x3818 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    37ec:	e0 91 30 05 	lds	r30, 0x0530
    37f0:	f0 91 31 05 	lds	r31, 0x0531
    37f4:	97 81       	ldd	r25, Z+7	; 0x07
    37f6:	92 60       	ori	r25, 0x02	; 2
    37f8:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    37fa:	99 27       	eor	r25, r25
    37fc:	87 fd       	sbrc	r24, 7
    37fe:	90 95       	com	r25
    3800:	a9 2f       	mov	r26, r25
    3802:	b9 2f       	mov	r27, r25
    3804:	81 8b       	std	Z+17, r24	; 0x11
    3806:	92 8b       	std	Z+18, r25	; 0x12
    3808:	a3 8b       	std	Z+19, r26	; 0x13
    380a:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    380c:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3818:	f8 01       	movw	r30, r16
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	e0 0f       	add	r30, r16
    3820:	f1 1f       	adc	r31, r17
    3822:	e4 5e       	subi	r30, 0xE4	; 228
    3824:	fa 4f       	sbci	r31, 0xFA	; 250
    3826:	82 81       	ldd	r24, Z+2	; 0x02
    3828:	81 50       	subi	r24, 0x01	; 1
    382a:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    382c:	a0 91 30 05 	lds	r26, 0x0530
    3830:	b0 91 31 05 	lds	r27, 0x0531
    3834:	81 81       	ldd	r24, Z+1	; 0x01
    3836:	1b 96       	adiw	r26, 0x0b	; 11
    3838:	8c 93       	st	X, r24
    383a:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	14 96       	adiw	r26, 0x04	; 4
    3840:	8c 93       	st	X, r24
	nrk_int_enable();
    3842:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
    3846:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    3848:	0f 90       	pop	r0
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	1f 91       	pop	r17
    3850:	0f 91       	pop	r16
    3852:	08 95       	ret

00003854 <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3854:	e0 91 30 05 	lds	r30, 0x0530
    3858:	f0 91 31 05 	lds	r31, 0x0531
    385c:	25 85       	ldd	r18, Z+13	; 0x0d
    385e:	36 85       	ldd	r19, Z+14	; 0x0e
    3860:	47 85       	ldd	r20, Z+15	; 0x0f
    3862:	50 89       	ldd	r21, Z+16	; 0x10
    3864:	26 23       	and	r18, r22
    3866:	37 23       	and	r19, r23
    3868:	48 23       	and	r20, r24
    386a:	59 23       	and	r21, r25
    386c:	21 15       	cp	r18, r1
    386e:	31 05       	cpc	r19, r1
    3870:	41 05       	cpc	r20, r1
    3872:	51 05       	cpc	r21, r1
    3874:	29 f4       	brne	.+10     	; 0x3880 <nrk_event_wait+0x2c>
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e0       	ldi	r20, 0x00	; 0
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	23 c0       	rjmp	.+70     	; 0x38c6 <nrk_event_wait+0x72>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3880:	61 8b       	std	Z+17, r22	; 0x11
    3882:	72 8b       	std	Z+18, r23	; 0x12
    3884:	83 8b       	std	Z+19, r24	; 0x13
    3886:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3888:	21 e0       	ldi	r18, 0x01	; 1
    388a:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    388c:	00 90 20 05 	lds	r0, 0x0520
    3890:	04 c0       	rjmp	.+8      	; 0x389a <nrk_event_wait+0x46>
    3892:	96 95       	lsr	r25
    3894:	87 95       	ror	r24
    3896:	77 95       	ror	r23
    3898:	67 95       	ror	r22
    389a:	0a 94       	dec	r0
    389c:	d2 f7       	brpl	.-12     	; 0x3892 <nrk_event_wait+0x3e>
    389e:	61 70       	andi	r22, 0x01	; 1
    38a0:	70 70       	andi	r23, 0x00	; 0
    38a2:	61 15       	cp	r22, r1
    38a4:	71 05       	cpc	r23, r1
    38a6:	19 f0       	breq	.+6      	; 0x38ae <nrk_event_wait+0x5a>
		nrk_wait_until_nw();
    38a8:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <nrk_wait_until_nw>
    38ac:	04 c0       	rjmp	.+8      	; 0x38b6 <nrk_event_wait+0x62>
	else
		nrk_wait_until_ticks(0);
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    38b6:	e0 91 30 05 	lds	r30, 0x0530
    38ba:	f0 91 31 05 	lds	r31, 0x0531
    38be:	21 89       	ldd	r18, Z+17	; 0x11
    38c0:	32 89       	ldd	r19, Z+18	; 0x12
    38c2:	43 89       	ldd	r20, Z+19	; 0x13
    38c4:	54 89       	ldd	r21, Z+20	; 0x14
}
    38c6:	b9 01       	movw	r22, r18
    38c8:	ca 01       	movw	r24, r20
    38ca:	08 95       	ret

000038cc <nrk_get_high_ready_task_ID>:
//#define TIME_PAD  2

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    38cc:	e0 91 25 05 	lds	r30, 0x0525
    38d0:	f0 91 26 05 	lds	r31, 0x0526
  return (_head_node->task_ID);
}
    38d4:	80 81       	ld	r24, Z
    38d6:	08 95       	ret

000038d8 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
    38d8:	e0 91 25 05 	lds	r30, 0x0525
    38dc:	f0 91 26 05 	lds	r31, 0x0526
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    38e0:	03 c0       	rjmp	.+6      	; 0x38e8 <nrk_print_readyQ+0x10>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
    38e2:	03 80       	ldd	r0, Z+3	; 0x03
    38e4:	f4 81       	ldd	r31, Z+4	; 0x04
    38e6:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    38e8:	30 97       	sbiw	r30, 0x00	; 0
    38ea:	d9 f7       	brne	.-10     	; 0x38e2 <nrk_print_readyQ+0xa>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
  }
  //nrk_kprintf (PSTR ("\n\r"));
}
    38ec:	08 95       	ret

000038ee <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    38ee:	df 92       	push	r13
    38f0:	ef 92       	push	r14
    38f2:	ff 92       	push	r15
    38f4:	0f 93       	push	r16
    38f6:	1f 93       	push	r17
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
  nrk_queue *NextNode;
  nrk_queue *CurNode;

  //printf( "nrk_add_to_readyQ %d\n",task_ID );
  // nrk_queue full
  if (_free_node == NULL) {
    38fc:	e0 91 b5 04 	lds	r30, 0x04B5
    3900:	f0 91 b6 04 	lds	r31, 0x04B6
    3904:	30 97       	sbiw	r30, 0x00	; 0
    3906:	09 f4       	brne	.+2      	; 0x390a <nrk_add_to_readyQ+0x1c>
    3908:	99 c0       	rjmp	.+306    	; 0x3a3c <nrk_add_to_readyQ+0x14e>
    return;
  }


  NextNode = _head_node;
    390a:	60 91 25 05 	lds	r22, 0x0525
    390e:	70 91 26 05 	lds	r23, 0x0526
  CurNode = _free_node;

  if (_head_node != NULL) {
    3912:	61 15       	cp	r22, r1
    3914:	71 05       	cpc	r23, r1
    3916:	19 f4       	brne	.+6      	; 0x391e <nrk_add_to_readyQ+0x30>
    3918:	a0 e0       	ldi	r26, 0x00	; 0
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	55 c0       	rjmp	.+170    	; 0x39c8 <nrk_add_to_readyQ+0xda>
    391e:	db 01       	movw	r26, r22

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3920:	48 2f       	mov	r20, r24
    3922:	55 27       	eor	r21, r21
    3924:	47 fd       	sbrc	r20, 7
    3926:	50 95       	com	r21
    3928:	9a 01       	movw	r18, r20
    392a:	15 e0       	ldi	r17, 0x05	; 5
    392c:	22 0f       	add	r18, r18
    392e:	33 1f       	adc	r19, r19
    3930:	1a 95       	dec	r17
    3932:	e1 f7       	brne	.-8      	; 0x392c <nrk_add_to_readyQ+0x3e>
    3934:	24 0f       	add	r18, r20
    3936:	35 1f       	adc	r19, r21
    3938:	29 54       	subi	r18, 0x49	; 73
    393a:	3b 4f       	sbci	r19, 0xFB	; 251
    393c:	89 01       	movw	r16, r18
    393e:	06 5f       	subi	r16, 0xF6	; 246
    3940:	1f 4f       	sbci	r17, 0xFF	; 255
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3942:	44 e0       	ldi	r20, 0x04	; 4
    3944:	e4 2e       	mov	r14, r20
    3946:	f1 2c       	mov	r15, r1
    3948:	e2 0e       	add	r14, r18
    394a:	f3 1e       	adc	r15, r19
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    394c:	25 5f       	subi	r18, 0xF5	; 245
    394e:	3f 4f       	sbci	r19, 0xFF	; 255
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3950:	4c 91       	ld	r20, X
    3952:	50 e0       	ldi	r21, 0x00	; 0
    3954:	ea 01       	movw	r28, r20
    3956:	95 e0       	ldi	r25, 0x05	; 5
    3958:	cc 0f       	add	r28, r28
    395a:	dd 1f       	adc	r29, r29
    395c:	9a 95       	dec	r25
    395e:	e1 f7       	brne	.-8      	; 0x3958 <nrk_add_to_readyQ+0x6a>
    3960:	c4 0f       	add	r28, r20
    3962:	d5 1f       	adc	r29, r21
    3964:	c9 54       	subi	r28, 0x49	; 73
    3966:	db 4f       	sbci	r29, 0xFB	; 251
    3968:	9c 81       	ldd	r25, Y+4	; 0x04
    396a:	99 23       	and	r25, r25
    396c:	29 f0       	breq	.+10     	; 0x3978 <nrk_add_to_readyQ+0x8a>
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    396e:	db 84       	ldd	r13, Y+11	; 0x0b
    3970:	e8 01       	movw	r28, r16
    3972:	98 81       	ld	r25, Y
    3974:	d9 16       	cp	r13, r25
    3976:	40 f1       	brcs	.+80     	; 0x39c8 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3978:	e7 01       	movw	r28, r14
    397a:	98 81       	ld	r25, Y
    397c:	99 23       	and	r25, r25
    397e:	79 f0       	breq	.+30     	; 0x399e <nrk_add_to_readyQ+0xb0>
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3980:	ea 01       	movw	r28, r20
    3982:	95 e0       	ldi	r25, 0x05	; 5
    3984:	cc 0f       	add	r28, r28
    3986:	dd 1f       	adc	r29, r29
    3988:	9a 95       	dec	r25
    398a:	e1 f7       	brne	.-8      	; 0x3984 <nrk_add_to_readyQ+0x96>
    398c:	c4 0f       	add	r28, r20
    398e:	d5 1f       	adc	r29, r21
    3990:	c9 54       	subi	r28, 0x49	; 73
    3992:	db 4f       	sbci	r29, 0xFB	; 251
    3994:	da 84       	ldd	r13, Y+10	; 0x0a
    3996:	e9 01       	movw	r28, r18
    3998:	98 81       	ld	r25, Y
    399a:	d9 16       	cp	r13, r25
    399c:	a8 f0       	brcs	.+42     	; 0x39c8 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio_ceil)
          break;
      if (nrk_task_TCB[NextNode->task_ID].task_prio <
    399e:	ea 01       	movw	r28, r20
    39a0:	95 e0       	ldi	r25, 0x05	; 5
    39a2:	cc 0f       	add	r28, r28
    39a4:	dd 1f       	adc	r29, r29
    39a6:	9a 95       	dec	r25
    39a8:	e1 f7       	brne	.-8      	; 0x39a2 <nrk_add_to_readyQ+0xb4>
    39aa:	c4 0f       	add	r28, r20
    39ac:	d5 1f       	adc	r29, r21
    39ae:	c9 54       	subi	r28, 0x49	; 73
    39b0:	db 4f       	sbci	r29, 0xFB	; 251
    39b2:	4a 85       	ldd	r20, Y+10	; 0x0a
    39b4:	e8 01       	movw	r28, r16
    39b6:	98 81       	ld	r25, Y
    39b8:	49 17       	cp	r20, r25
    39ba:	30 f0       	brcs	.+12     	; 0x39c8 <nrk_add_to_readyQ+0xda>
          nrk_task_TCB[task_ID].task_prio)
        break;

      NextNode = NextNode->Next;
    39bc:	13 96       	adiw	r26, 0x03	; 3
    39be:	0d 90       	ld	r0, X+
    39c0:	bc 91       	ld	r27, X
    39c2:	a0 2d       	mov	r26, r0
  NextNode = _head_node;
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
    39c4:	10 97       	sbiw	r26, 0x00	; 0
    39c6:	21 f6       	brne	.-120    	; 0x3950 <nrk_add_to_readyQ+0x62>
    // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
    // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 

  }

  CurNode->task_ID = task_ID;
    39c8:	80 83       	st	Z, r24
  _free_node = _free_node->Next;
    39ca:	c3 81       	ldd	r28, Z+3	; 0x03
    39cc:	d4 81       	ldd	r29, Z+4	; 0x04
    39ce:	d0 93 b6 04 	sts	0x04B6, r29
    39d2:	c0 93 b5 04 	sts	0x04B5, r28

  if (NextNode == _head_node) {
    39d6:	a6 17       	cp	r26, r22
    39d8:	b7 07       	cpc	r27, r23
    39da:	b1 f4       	brne	.+44     	; 0x3a08 <nrk_add_to_readyQ+0x11a>
    //at start
    if (_head_node != NULL) {
    39dc:	10 97       	sbiw	r26, 0x00	; 0
    39de:	49 f0       	breq	.+18     	; 0x39f2 <nrk_add_to_readyQ+0x104>
      CurNode->Next = _head_node;
    39e0:	b4 83       	std	Z+4, r27	; 0x04
    39e2:	a3 83       	std	Z+3, r26	; 0x03
      CurNode->Prev = NULL;
    39e4:	12 82       	std	Z+2, r1	; 0x02
    39e6:	11 82       	std	Z+1, r1	; 0x01
      _head_node->Prev = CurNode;
    39e8:	12 96       	adiw	r26, 0x02	; 2
    39ea:	fc 93       	st	X, r31
    39ec:	ee 93       	st	-X, r30
    39ee:	11 97       	sbiw	r26, 0x01	; 1
    39f0:	06 c0       	rjmp	.+12     	; 0x39fe <nrk_add_to_readyQ+0x110>
    }
    else {
      CurNode->Next = NULL;
    39f2:	14 82       	std	Z+4, r1	; 0x04
    39f4:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = NULL;
    39f6:	12 82       	std	Z+2, r1	; 0x02
    39f8:	11 82       	std	Z+1, r1	; 0x01
      _free_node->Prev = CurNode;
    39fa:	fa 83       	std	Y+2, r31	; 0x02
    39fc:	e9 83       	std	Y+1, r30	; 0x01
    }
    _head_node = CurNode;
    39fe:	f0 93 26 05 	sts	0x0526, r31
    3a02:	e0 93 25 05 	sts	0x0525, r30
    3a06:	1a c0       	rjmp	.+52     	; 0x3a3c <nrk_add_to_readyQ+0x14e>
    3a08:	11 96       	adiw	r26, 0x01	; 1
    3a0a:	8d 91       	ld	r24, X+
    3a0c:	9c 91       	ld	r25, X
    3a0e:	12 97       	sbiw	r26, 0x02	; 2

  }
  else {
    if (NextNode != _free_node) {
    3a10:	ac 17       	cp	r26, r28
    3a12:	bd 07       	cpc	r27, r29
    3a14:	59 f0       	breq	.+22     	; 0x3a2c <nrk_add_to_readyQ+0x13e>
      // Insert  in middle

      CurNode->Prev = NextNode->Prev;
    3a16:	92 83       	std	Z+2, r25	; 0x02
    3a18:	81 83       	std	Z+1, r24	; 0x01
      CurNode->Next = NextNode;
    3a1a:	b4 83       	std	Z+4, r27	; 0x04
    3a1c:	a3 83       	std	Z+3, r26	; 0x03
      (NextNode->Prev)->Next = CurNode;
    3a1e:	11 96       	adiw	r26, 0x01	; 1
    3a20:	cd 91       	ld	r28, X+
    3a22:	dc 91       	ld	r29, X
    3a24:	12 97       	sbiw	r26, 0x02	; 2
    3a26:	fc 83       	std	Y+4, r31	; 0x04
    3a28:	eb 83       	std	Y+3, r30	; 0x03
    3a2a:	04 c0       	rjmp	.+8      	; 0x3a34 <nrk_add_to_readyQ+0x146>
      NextNode->Prev = CurNode;
    }
    else {
      //insert at end
      CurNode->Next = NULL;
    3a2c:	14 82       	std	Z+4, r1	; 0x04
    3a2e:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = _free_node->Prev;
    3a30:	92 83       	std	Z+2, r25	; 0x02
    3a32:	81 83       	std	Z+1, r24	; 0x01
      _free_node->Prev = CurNode;
    3a34:	12 96       	adiw	r26, 0x02	; 2
    3a36:	fc 93       	st	X, r31
    3a38:	ee 93       	st	-X, r30
    3a3a:	11 97       	sbiw	r26, 0x01	; 1
    }

  }

}
    3a3c:	df 91       	pop	r29
    3a3e:	cf 91       	pop	r28
    3a40:	1f 91       	pop	r17
    3a42:	0f 91       	pop	r16
    3a44:	ff 90       	pop	r15
    3a46:	ef 90       	pop	r14
    3a48:	df 90       	pop	r13
    3a4a:	08 95       	ret

00003a4c <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
     }
   */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

  if (_head_node == NULL)
    3a50:	e0 91 25 05 	lds	r30, 0x0525
    3a54:	f0 91 26 05 	lds	r31, 0x0526
    3a58:	30 97       	sbiw	r30, 0x00	; 0
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <nrk_rem_from_readyQ+0x12>
    3a5c:	4d c0       	rjmp	.+154    	; 0x3af8 <nrk_rem_from_readyQ+0xac>
    return;

  CurNode = _head_node;

  if (_head_node->task_ID == task_ID) {
    3a5e:	48 2f       	mov	r20, r24
    3a60:	55 27       	eor	r21, r21
    3a62:	47 fd       	sbrc	r20, 7
    3a64:	50 95       	com	r21
    3a66:	80 81       	ld	r24, Z
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	84 17       	cp	r24, r20
    3a6c:	95 07       	cpc	r25, r21
    3a6e:	79 f4       	brne	.+30     	; 0x3a8e <nrk_rem_from_readyQ+0x42>
    //REmove from start
    _head_node = _head_node->Next;
    3a70:	a3 81       	ldd	r26, Z+3	; 0x03
    3a72:	b4 81       	ldd	r27, Z+4	; 0x04
    3a74:	b0 93 26 05 	sts	0x0526, r27
    3a78:	a0 93 25 05 	sts	0x0525, r26
    _head_node->Prev = NULL;
    3a7c:	12 96       	adiw	r26, 0x02	; 2
    3a7e:	1c 92       	st	X, r1
    3a80:	1e 92       	st	-X, r1
    3a82:	11 97       	sbiw	r26, 0x01	; 1
    3a84:	0e c0       	rjmp	.+28     	; 0x3aa2 <nrk_rem_from_readyQ+0x56>
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
      CurNode = CurNode->Next;
    3a86:	e2 2f       	mov	r30, r18
    3a88:	f9 2f       	mov	r31, r25
    //REmove from start
    _head_node = _head_node->Next;
    _head_node->Prev = NULL;
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3a8a:	30 97       	sbiw	r30, 0x00	; 0
    3a8c:	a9 f1       	breq	.+106    	; 0x3af8 <nrk_rem_from_readyQ+0xac>
    3a8e:	60 81       	ld	r22, Z
    3a90:	70 e0       	ldi	r23, 0x00	; 0
    3a92:	23 81       	ldd	r18, Z+3	; 0x03
    3a94:	94 81       	ldd	r25, Z+4	; 0x04
    3a96:	64 17       	cp	r22, r20
    3a98:	75 07       	cpc	r23, r21
    3a9a:	a9 f7       	brne	.-22     	; 0x3a86 <nrk_rem_from_readyQ+0x3a>
    3a9c:	20 c0       	rjmp	.+64     	; 0x3ade <nrk_rem_from_readyQ+0x92>
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    if (CurNode->Next != NULL)
      (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3a9e:	ba 83       	std	Y+2, r27	; 0x02
    3aa0:	a9 83       	std	Y+1, r26	; 0x01
  }



  // Add to free list
  if (_free_node == NULL) {
    3aa2:	a0 91 b5 04 	lds	r26, 0x04B5
    3aa6:	b0 91 b6 04 	lds	r27, 0x04B6
    3aaa:	10 97       	sbiw	r26, 0x00	; 0
    3aac:	39 f4       	brne	.+14     	; 0x3abc <nrk_rem_from_readyQ+0x70>
    _free_node = CurNode;
    3aae:	f0 93 b6 04 	sts	0x04B6, r31
    3ab2:	e0 93 b5 04 	sts	0x04B5, r30
    _free_node->Next = NULL;
    3ab6:	14 82       	std	Z+4, r1	; 0x04
    3ab8:	13 82       	std	Z+3, r1	; 0x03
    3aba:	0a c0       	rjmp	.+20     	; 0x3ad0 <nrk_rem_from_readyQ+0x84>
  }
  else {
    CurNode->Next = _free_node;
    3abc:	b4 83       	std	Z+4, r27	; 0x04
    3abe:	a3 83       	std	Z+3, r26	; 0x03
    _free_node->Prev = CurNode;
    3ac0:	12 96       	adiw	r26, 0x02	; 2
    3ac2:	fc 93       	st	X, r31
    3ac4:	ee 93       	st	-X, r30
    3ac6:	11 97       	sbiw	r26, 0x01	; 1
    _free_node = CurNode;
    3ac8:	f0 93 b6 04 	sts	0x04B6, r31
    3acc:	e0 93 b5 04 	sts	0x04B5, r30
  }
  _free_node->Prev = NULL;
    3ad0:	e0 91 b5 04 	lds	r30, 0x04B5
    3ad4:	f0 91 b6 04 	lds	r31, 0x04B6
    3ad8:	12 82       	std	Z+2, r1	; 0x02
    3ada:	11 82       	std	Z+1, r1	; 0x01
    3adc:	0d c0       	rjmp	.+26     	; 0x3af8 <nrk_rem_from_readyQ+0xac>
      CurNode = CurNode->Next;
    if (CurNode == NULL)
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3ade:	a1 81       	ldd	r26, Z+1	; 0x01
    3ae0:	b2 81       	ldd	r27, Z+2	; 0x02
    3ae2:	13 96       	adiw	r26, 0x03	; 3
    3ae4:	2c 93       	st	X, r18
    3ae6:	13 97       	sbiw	r26, 0x03	; 3
    3ae8:	14 96       	adiw	r26, 0x04	; 4
    3aea:	9c 93       	st	X, r25
    3aec:	14 97       	sbiw	r26, 0x04	; 4
    if (CurNode->Next != NULL)
    3aee:	c3 81       	ldd	r28, Z+3	; 0x03
    3af0:	d4 81       	ldd	r29, Z+4	; 0x04
    3af2:	20 97       	sbiw	r28, 0x00	; 0
    3af4:	a1 f6       	brne	.-88     	; 0x3a9e <nrk_rem_from_readyQ+0x52>
    3af6:	d5 cf       	rjmp	.-86     	; 0x3aa2 <nrk_rem_from_readyQ+0x56>
    CurNode->Next = _free_node;
    _free_node->Prev = CurNode;
    _free_node = CurNode;
  }
  _free_node->Prev = NULL;
}
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

00003afe <nrk_get_pid>:
  return NRK_OK;
}


uint8_t nrk_get_pid ()
{
    3afe:	e0 91 30 05 	lds	r30, 0x0530
    3b02:	f0 91 31 05 	lds	r31, 0x0531
  return nrk_cur_task_TCB->task_ID;
}
    3b06:	80 85       	ldd	r24, Z+8	; 0x08
    3b08:	08 95       	ret

00003b0a <_nrk_wait_for_scheduler>:
inline void _nrk_wait_for_scheduler ()
{

  //TIMSK = BM (OCIE1A);
  do {
    nrk_idle ();                // wait for the interrupt to tick...
    3b0a:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <nrk_idle>
  } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
    3b0e:	e0 91 30 05 	lds	r30, 0x0530
    3b12:	f0 91 31 05 	lds	r31, 0x0531
    3b16:	85 81       	ldd	r24, Z+5	; 0x05
    3b18:	88 23       	and	r24, r24
    3b1a:	b9 f7       	brne	.-18     	; 0x3b0a <_nrk_wait_for_scheduler>

  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3b1c:	08 95       	ret

00003b1e <nrk_wait>:
  return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    3b1e:	ef 92       	push	r14
    3b20:	ff 92       	push	r15
    3b22:	1f 93       	push	r17
    3b24:	df 93       	push	r29
    3b26:	cf 93       	push	r28
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	28 97       	sbiw	r28, 0x08	; 8
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	f8 94       	cli
    3b32:	de bf       	out	0x3e, r29	; 62
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	cd bf       	out	0x3d, r28	; 61
    3b38:	29 83       	std	Y+1, r18	; 0x01
    3b3a:	3a 83       	std	Y+2, r19	; 0x02
    3b3c:	4b 83       	std	Y+3, r20	; 0x03
    3b3e:	5c 83       	std	Y+4, r21	; 0x04
    3b40:	6d 83       	std	Y+5, r22	; 0x05
    3b42:	7e 83       	std	Y+6, r23	; 0x06
    3b44:	8f 83       	std	Y+7, r24	; 0x07
    3b46:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;

  nrk_stack_check ();
    3b48:	0e 94 42 19 	call	0x3284	; 0x3284 <nrk_stack_check>

  nrk_int_disable ();
    3b4c:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3b50:	e0 91 30 05 	lds	r30, 0x0530
    3b54:	f0 91 31 05 	lds	r31, 0x0531
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = 1;
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	90 a3       	std	Z+32, r25	; 0x20
    3b62:	87 8f       	std	Z+31, r24	; 0x1f
  timer = _nrk_os_timer_get ();
    3b64:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    3b68:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
  
  nw = _nrk_time_to_ticks (&t);
    3b6a:	ce 01       	movw	r24, r28
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_nrk_time_to_ticks>
// printf( "t2 %u %u\r\n",timer, nw);
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    3b72:	e0 91 30 05 	lds	r30, 0x0530
    3b76:	f0 91 31 05 	lds	r31, 0x0531
    3b7a:	e1 2e       	mov	r14, r17
    3b7c:	ff 24       	eor	r15, r15
    3b7e:	8e 0d       	add	r24, r14
    3b80:	9f 1d       	adc	r25, r15
    3b82:	96 8b       	std	Z+22, r25	; 0x16
    3b84:	85 8b       	std	Z+21, r24	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3b86:	18 3f       	cpi	r17, 0xF8	; 248
    3b88:	78 f4       	brcc	.+30     	; 0x3ba8 <nrk_wait+0x8a>
  {
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3b8a:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <_nrk_get_next_wakeup>
    3b8e:	08 94       	sec
    3b90:	e1 1c       	adc	r14, r1
    3b92:	f1 1c       	adc	r15, r1
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	e8 16       	cp	r14, r24
    3b98:	f9 06       	cpc	r15, r25
    3b9a:	34 f4       	brge	.+12     	; 0x3ba8 <nrk_wait+0x8a>
      timer += TIME_PAD;
    3b9c:	81 2f       	mov	r24, r17
    3b9e:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3ba0:	80 93 99 04 	sts	0x0499, r24
      _nrk_set_next_wakeup (timer);
    3ba4:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
    }
  } 
  nrk_int_enable ();
    3ba8:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    3bac:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	28 96       	adiw	r28, 0x08	; 8
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	1f 91       	pop	r17
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	08 95       	ret

00003bca <nrk_wait_until>:
  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3bca:	8f 92       	push	r8
    3bcc:	9f 92       	push	r9
    3bce:	af 92       	push	r10
    3bd0:	bf 92       	push	r11
    3bd2:	cf 92       	push	r12
    3bd4:	df 92       	push	r13
    3bd6:	ef 92       	push	r14
    3bd8:	ff 92       	push	r15
    3bda:	0f 93       	push	r16
    3bdc:	1f 93       	push	r17
    3bde:	df 93       	push	r29
    3be0:	cf 93       	push	r28
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	60 97       	sbiw	r28, 0x10	; 16
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	29 87       	std	Y+9, r18	; 0x09
    3bf4:	3a 87       	std	Y+10, r19	; 0x0a
    3bf6:	4b 87       	std	Y+11, r20	; 0x0b
    3bf8:	5c 87       	std	Y+12, r21	; 0x0c
    3bfa:	6d 87       	std	Y+13, r22	; 0x0d
    3bfc:	7e 87       	std	Y+14, r23	; 0x0e
    3bfe:	8f 87       	std	Y+15, r24	; 0x0f
    3c00:	98 8b       	std	Y+16, r25	; 0x10
  //c = _nrk_os_timer_get ();
  //do{
  //}while(_nrk_os_timer_get()==c);
 
  //ttt=c+1; 
  nrk_time_get (&ct);
    3c02:	ce 01       	movw	r24, r28
    3c04:	01 96       	adiw	r24, 0x01	; 1
    3c06:	0e 94 08 22 	call	0x4410	; 0x4410 <nrk_time_get>

  v = nrk_time_sub (&t, t, ct);
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	09 96       	adiw	r24, 0x09	; 9
    3c0e:	09 85       	ldd	r16, Y+9	; 0x09
    3c10:	1a 85       	ldd	r17, Y+10	; 0x0a
    3c12:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c14:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c16:	4d 85       	ldd	r20, Y+13	; 0x0d
    3c18:	5e 85       	ldd	r21, Y+14	; 0x0e
    3c1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3c1c:	78 89       	ldd	r23, Y+16	; 0x10
    3c1e:	89 80       	ldd	r8, Y+1	; 0x01
    3c20:	9a 80       	ldd	r9, Y+2	; 0x02
    3c22:	ab 80       	ldd	r10, Y+3	; 0x03
    3c24:	bc 80       	ldd	r11, Y+4	; 0x04
    3c26:	cd 80       	ldd	r12, Y+5	; 0x05
    3c28:	de 80       	ldd	r13, Y+6	; 0x06
    3c2a:	ef 80       	ldd	r14, Y+7	; 0x07
    3c2c:	f8 84       	ldd	r15, Y+8	; 0x08
    3c2e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <nrk_time_sub>
  //nrk_time_compact_nanos(&t);
  if (v == NRK_ERROR)
    3c32:	8f 3f       	cpi	r24, 0xFF	; 255
    3c34:	59 f0       	breq	.+22     	; 0x3c4c <nrk_wait_until+0x82>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
  nrk_wait (t);
    3c36:	29 85       	ldd	r18, Y+9	; 0x09
    3c38:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c3a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c3c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c3e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3c40:	7e 85       	ldd	r23, Y+14	; 0x0e
    3c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c44:	98 89       	ldd	r25, Y+16	; 0x10
    3c46:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <nrk_wait>
    3c4a:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    3c4c:	60 96       	adiw	r28, 0x10	; 16
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    3c58:	cf 91       	pop	r28
    3c5a:	df 91       	pop	r29
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	ff 90       	pop	r15
    3c62:	ef 90       	pop	r14
    3c64:	df 90       	pop	r13
    3c66:	cf 90       	pop	r12
    3c68:	bf 90       	pop	r11
    3c6a:	af 90       	pop	r10
    3c6c:	9f 90       	pop	r9
    3c6e:	8f 90       	pop	r8
    3c70:	08 95       	ret

00003c72 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3c72:	1f 93       	push	r17
  uint8_t timer;
  nrk_int_disable ();
    3c74:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3c78:	e0 91 30 05 	lds	r30, 0x0530
    3c7c:	f0 91 31 05 	lds	r31, 0x0531
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->nw_flag = 1;
    3c84:	86 83       	std	Z+6, r24	; 0x06
  timer = _nrk_os_timer_get ();
    3c86:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    3c8a:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3c8c:	88 3f       	cpi	r24, 0xF8	; 248
    3c8e:	80 f4       	brcc	.+32     	; 0x3cb0 <nrk_wait_until_nw+0x3e>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3c90:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <_nrk_get_next_wakeup>
    3c94:	21 2f       	mov	r18, r17
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	2f 5f       	subi	r18, 0xFF	; 255
    3c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	28 17       	cp	r18, r24
    3ca0:	39 07       	cpc	r19, r25
    3ca2:	34 f4       	brge	.+12     	; 0x3cb0 <nrk_wait_until_nw+0x3e>
      timer += TIME_PAD;
    3ca4:	81 2f       	mov	r24, r17
    3ca6:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3ca8:	80 93 99 04 	sts	0x0499, r24
      _nrk_set_next_wakeup (timer);
    3cac:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3cb0:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3cb4:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	1f 91       	pop	r17
    3cbc:	08 95       	ret

00003cbe <nrk_set_next_wakeup>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3cbe:	1f 93       	push	r17
    3cc0:	df 93       	push	r29
    3cc2:	cf 93       	push	r28
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	28 97       	sbiw	r28, 0x08	; 8
    3cca:	0f b6       	in	r0, 0x3f	; 63
    3ccc:	f8 94       	cli
    3cce:	de bf       	out	0x3e, r29	; 62
    3cd0:	0f be       	out	0x3f, r0	; 63
    3cd2:	cd bf       	out	0x3d, r28	; 61
    3cd4:	29 83       	std	Y+1, r18	; 0x01
    3cd6:	3a 83       	std	Y+2, r19	; 0x02
    3cd8:	4b 83       	std	Y+3, r20	; 0x03
    3cda:	5c 83       	std	Y+4, r21	; 0x04
    3cdc:	6d 83       	std	Y+5, r22	; 0x05
    3cde:	7e 83       	std	Y+6, r23	; 0x06
    3ce0:	8f 83       	std	Y+7, r24	; 0x07
    3ce2:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;
  nrk_int_disable ();
    3ce4:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  timer = _nrk_os_timer_get ();
    3ce8:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    3cec:	18 2f       	mov	r17, r24
  nw = _nrk_time_to_ticks (&t);
    3cee:	ce 01       	movw	r24, r28
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <_nrk_time_to_ticks>
  if (nw <= TIME_PAD)
    3cf6:	83 30       	cpi	r24, 0x03	; 3
    3cf8:	91 05       	cpc	r25, r1
    3cfa:	10 f4       	brcc	.+4      	; 0x3d00 <nrk_set_next_wakeup+0x42>
    3cfc:	8f ef       	ldi	r24, 0xFF	; 255
    3cfe:	0b c0       	rjmp	.+22     	; 0x3d16 <nrk_set_next_wakeup+0x58>
    return NRK_ERROR;
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    3d00:	e0 91 30 05 	lds	r30, 0x0530
    3d04:	f0 91 31 05 	lds	r31, 0x0531
    3d08:	81 0f       	add	r24, r17
    3d0a:	91 1d       	adc	r25, r1
    3d0c:	96 8b       	std	Z+22, r25	; 0x16
    3d0e:	85 8b       	std	Z+21, r24	; 0x15
			_nrk_prev_timer_val=timer;
			_nrk_set_next_wakeup(timer);
		}
*/
//      nrk_cur_task_TCB->nw_flag=1;
  nrk_int_enable ();
    3d10:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
    3d14:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    3d16:	28 96       	adiw	r28, 0x08	; 8
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	cf 91       	pop	r28
    3d24:	df 91       	pop	r29
    3d26:	1f 91       	pop	r17
    3d28:	08 95       	ret

00003d2a <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3d2a:	1f 93       	push	r17
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	ec 01       	movw	r28, r24
  uint8_t timer;
  nrk_int_disable ();
    3d32:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3d36:	e0 91 30 05 	lds	r30, 0x0530
    3d3a:	f0 91 31 05 	lds	r31, 0x0531
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->next_wakeup = ticks;
    3d42:	d6 8b       	std	Z+22, r29	; 0x16
    3d44:	c5 8b       	std	Z+21, r28	; 0x15
  // printf( "t %u\r\n",ticks );
  timer = _nrk_os_timer_get ();
    3d46:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    3d4a:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3d4c:	88 3f       	cpi	r24, 0xF8	; 248
    3d4e:	80 f4       	brcc	.+32     	; 0x3d70 <nrk_wait_until_ticks+0x46>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3d50:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <_nrk_get_next_wakeup>
    3d54:	21 2f       	mov	r18, r17
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	2f 5f       	subi	r18, 0xFF	; 255
    3d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	28 17       	cp	r18, r24
    3d60:	39 07       	cpc	r19, r25
    3d62:	34 f4       	brge	.+12     	; 0x3d70 <nrk_wait_until_ticks+0x46>
      timer += TIME_PAD;
    3d64:	81 2f       	mov	r24, r17
    3d66:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3d68:	80 93 99 04 	sts	0x0499, r24
      _nrk_set_next_wakeup (timer);
    3d6c:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3d70:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3d74:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	1f 91       	pop	r17
    3d80:	08 95       	ret

00003d82 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	7c 01       	movw	r14, r24
  uint8_t timer;
  nrk_int_disable ();
    3d8e:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3d92:	e0 91 30 05 	lds	r30, 0x0530
    3d96:	f0 91 31 05 	lds	r31, 0x0531
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    3d9e:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    3da2:	18 2f       	mov	r17, r24
  nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3da4:	e0 91 30 05 	lds	r30, 0x0530
    3da8:	f0 91 31 05 	lds	r31, 0x0531
    3dac:	c8 2f       	mov	r28, r24
    3dae:	d0 e0       	ldi	r29, 0x00	; 0
    3db0:	ec 0e       	add	r14, r28
    3db2:	fd 1e       	adc	r15, r29
    3db4:	f6 8a       	std	Z+22, r15	; 0x16
    3db6:	e5 8a       	std	Z+21, r14	; 0x15

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3db8:	88 3f       	cpi	r24, 0xF8	; 248
    3dba:	68 f4       	brcc	.+26     	; 0x3dd6 <nrk_wait_ticks+0x54>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3dbc:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <_nrk_get_next_wakeup>
    3dc0:	21 96       	adiw	r28, 0x01	; 1
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	c8 17       	cp	r28, r24
    3dc6:	d9 07       	cpc	r29, r25
    3dc8:	34 f4       	brge	.+12     	; 0x3dd6 <nrk_wait_ticks+0x54>
      timer += TIME_PAD;
    3dca:	81 2f       	mov	r24, r17
    3dcc:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3dce:	80 93 99 04 	sts	0x0499, r24
      _nrk_set_next_wakeup (timer);
    3dd2:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3dd6:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3dda:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	1f 91       	pop	r17
    3de6:	ff 90       	pop	r15
    3de8:	ef 90       	pop	r14
    3dea:	08 95       	ret

00003dec <nrk_wait_until_next_n_periods>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3dec:	1f 93       	push	r17
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	ec 01       	movw	r28, r24
  uint8_t timer;

  nrk_stack_check ();
    3df4:	0e 94 42 19 	call	0x3284	; 0x3284 <nrk_stack_check>

  if (p == 0)
    3df8:	20 97       	sbiw	r28, 0x00	; 0
    3dfa:	11 f4       	brne	.+4      	; 0x3e00 <nrk_wait_until_next_n_periods+0x14>
    3dfc:	c1 e0       	ldi	r28, 0x01	; 1
    3dfe:	d0 e0       	ldi	r29, 0x00	; 0
    p = 1;
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    3e00:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3e04:	e0 91 30 05 	lds	r30, 0x0530
    3e08:	f0 91 31 05 	lds	r31, 0x0531
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = p;
    3e10:	d0 a3       	std	Z+32, r29	; 0x20
    3e12:	c7 8f       	std	Z+31, r28	; 0x1f
  timer = _nrk_os_timer_get ();
    3e14:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    3e18:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3e1a:	88 3f       	cpi	r24, 0xF8	; 248
    3e1c:	80 f4       	brcc	.+32     	; 0x3e3e <nrk_wait_until_next_n_periods+0x52>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3e1e:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <_nrk_get_next_wakeup>
    3e22:	21 2f       	mov	r18, r17
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	2f 5f       	subi	r18, 0xFF	; 255
    3e28:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	28 17       	cp	r18, r24
    3e2e:	39 07       	cpc	r19, r25
    3e30:	34 f4       	brge	.+12     	; 0x3e3e <nrk_wait_until_next_n_periods+0x52>
      timer += TIME_PAD;
    3e32:	81 2f       	mov	r24, r17
    3e34:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3e36:	80 93 99 04 	sts	0x0499, r24
      _nrk_set_next_wakeup (timer);
    3e3a:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    3e3e:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    3e42:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	08 95       	ret

00003e50 <nrk_wait_until_next_period>:
  nrk_wait_until_next_period ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3e50:	1f 93       	push	r17
  uint8_t timer;

  nrk_stack_check ();
    3e52:	0e 94 42 19 	call	0x3284	; 0x3284 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    3e56:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
  nrk_cur_task_TCB->num_periods = 1;
    3e5a:	e0 91 30 05 	lds	r30, 0x0530
    3e5e:	f0 91 31 05 	lds	r31, 0x0531
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	90 a3       	std	Z+32, r25	; 0x20
    3e68:	87 8f       	std	Z+31, r24	; 0x1f
  nrk_cur_task_TCB->suspend_flag = 1;
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    3e6e:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    3e72:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3e74:	88 3f       	cpi	r24, 0xF8	; 248
    3e76:	80 f4       	brcc	.+32     	; 0x3e98 <nrk_wait_until_next_period+0x48>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3e78:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <_nrk_get_next_wakeup>
    3e7c:	21 2f       	mov	r18, r17
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	2f 5f       	subi	r18, 0xFF	; 255
    3e82:	3f 4f       	sbci	r19, 0xFF	; 255
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	28 17       	cp	r18, r24
    3e88:	39 07       	cpc	r19, r25
    3e8a:	34 f4       	brge	.+12     	; 0x3e98 <nrk_wait_until_next_period+0x48>
      timer += TIME_PAD;
    3e8c:	81 2f       	mov	r24, r17
    3e8e:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3e90:	80 93 99 04 	sts	0x0499, r24
      _nrk_set_next_wakeup (timer);
    3e94:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    3e98:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    3e9c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	1f 91       	pop	r17
    3ea4:	08 95       	ret

00003ea6 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
  nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3ea6:	e0 91 30 05 	lds	r30, 0x0530
    3eaa:	f0 91 31 05 	lds	r31, 0x0531
    3eae:	80 85       	ldd	r24, Z+8	; 0x08
    3eb0:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <nrk_rem_from_readyQ>
  nrk_cur_task_TCB->task_state = FINISHED;
    3eb4:	e0 91 30 05 	lds	r30, 0x0530
    3eb8:	f0 91 31 05 	lds	r31, 0x0531
    3ebc:	84 e0       	ldi	r24, 0x04	; 4
    3ebe:	81 87       	std	Z+9, r24	; 0x09

  // HAHA, there is NO next period...
  nrk_wait_until_next_period ();
    3ec0:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <nrk_wait_until_next_period>
  return NRK_OK;
}
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	08 95       	ret

00003ec8 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3ec8:	ef 92       	push	r14
    3eca:	ff 92       	push	r15
    3ecc:	0f 93       	push	r16
    3ece:	1f 93       	push	r17
    3ed0:	cf 93       	push	r28
    3ed2:	df 93       	push	r29
    3ed4:	ec 01       	movw	r28, r24
  uint8_t rtype;
  void *topOfStackPtr;

  topOfStackPtr =
    (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
    3ed6:	69 81       	ldd	r22, Y+1	; 0x01
    3ed8:	7a 81       	ldd	r23, Y+2	; 0x02
    3eda:	4b 81       	ldd	r20, Y+3	; 0x03
    3edc:	5c 81       	ldd	r21, Y+4	; 0x04
    3ede:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee2:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <nrk_task_stk_init>
    3ee6:	bc 01       	movw	r22, r24

  //printf("activate %d\n",(int)Task.task_ID);
  if (Task->FirstActivation == TRUE) {
    3ee8:	8f 81       	ldd	r24, Y+7	; 0x07
    3eea:	88 23       	and	r24, r24
    3eec:	69 f0       	breq	.+26     	; 0x3f08 <nrk_activate_task+0x40>
    rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3eee:	4b 81       	ldd	r20, Y+3	; 0x03
    3ef0:	5c 81       	ldd	r21, Y+4	; 0x04
    3ef2:	ce 01       	movw	r24, r28
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	00 e0       	ldi	r16, 0x00	; 0
    3efa:	10 e0       	ldi	r17, 0x00	; 0
    3efc:	ee 24       	eor	r14, r14
    3efe:	ff 24       	eor	r15, r15
    3f00:	0e 94 95 14 	call	0x292a	; 0x292a <nrk_TCB_init>
    Task->FirstActivation = FALSE;
    3f04:	1f 82       	std	Y+7, r1	; 0x07
    3f06:	15 c0       	rjmp	.+42     	; 0x3f32 <nrk_activate_task+0x6a>

  }
  else {
    if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3f08:	88 81       	ld	r24, Y
    3f0a:	99 27       	eor	r25, r25
    3f0c:	87 fd       	sbrc	r24, 7
    3f0e:	90 95       	com	r25
    3f10:	fc 01       	movw	r30, r24
    3f12:	25 e0       	ldi	r18, 0x05	; 5
    3f14:	ee 0f       	add	r30, r30
    3f16:	ff 1f       	adc	r31, r31
    3f18:	2a 95       	dec	r18
    3f1a:	e1 f7       	brne	.-8      	; 0x3f14 <nrk_activate_task+0x4c>
    3f1c:	e8 0f       	add	r30, r24
    3f1e:	f9 1f       	adc	r31, r25
    3f20:	e9 54       	subi	r30, 0x49	; 73
    3f22:	fb 4f       	sbci	r31, 0xFB	; 251
    3f24:	81 85       	ldd	r24, Z+9	; 0x09
    3f26:	83 30       	cpi	r24, 0x03	; 3
    3f28:	11 f0       	breq	.+4      	; 0x3f2e <nrk_activate_task+0x66>
    3f2a:	8f ef       	ldi	r24, 0xFF	; 255
    3f2c:	1b c0       	rjmp	.+54     	; 0x3f64 <nrk_activate_task+0x9c>
      return NRK_ERROR;
    //Re-init some parts of TCB

    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3f2e:	71 83       	std	Z+1, r23	; 0x01
    3f30:	60 83       	st	Z, r22
  // If Idle Task then Add to ready Q
  //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
  //nrk_add_to_readyQ(Task->task_ID);
  //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
  //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
  if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
    3f32:	88 81       	ld	r24, Y
    3f34:	28 2f       	mov	r18, r24
    3f36:	33 27       	eor	r19, r19
    3f38:	27 fd       	sbrc	r18, 7
    3f3a:	30 95       	com	r19
    3f3c:	f9 01       	movw	r30, r18
    3f3e:	05 e0       	ldi	r16, 0x05	; 5
    3f40:	ee 0f       	add	r30, r30
    3f42:	ff 1f       	adc	r31, r31
    3f44:	0a 95       	dec	r16
    3f46:	e1 f7       	brne	.-8      	; 0x3f40 <nrk_activate_task+0x78>
    3f48:	e2 0f       	add	r30, r18
    3f4a:	f3 1f       	adc	r31, r19
    3f4c:	e9 54       	subi	r30, 0x49	; 73
    3f4e:	fb 4f       	sbci	r31, 0xFB	; 251
    3f50:	25 89       	ldd	r18, Z+21	; 0x15
    3f52:	36 89       	ldd	r19, Z+22	; 0x16
    3f54:	21 15       	cp	r18, r1
    3f56:	31 05       	cpc	r19, r1
    3f58:	21 f4       	brne	.+8      	; 0x3f62 <nrk_activate_task+0x9a>
    nrk_task_TCB[Task->task_ID].task_state = READY;
    3f5a:	92 e0       	ldi	r25, 0x02	; 2
    3f5c:	91 87       	std	Z+9, r25	; 0x09
    nrk_add_to_readyQ (Task->task_ID);
    3f5e:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_add_to_readyQ>
    3f62:	81 e0       	ldi	r24, 0x01	; 1
  }

  return NRK_OK;
}
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	1f 91       	pop	r17
    3f6a:	0f 91       	pop	r16
    3f6c:	ff 90       	pop	r15
    3f6e:	ef 90       	pop	r14
    3f70:	08 95       	ret

00003f72 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3f72:	8f 92       	push	r8
    3f74:	9f 92       	push	r9
    3f76:	af 92       	push	r10
    3f78:	bf 92       	push	r11
    3f7a:	cf 92       	push	r12
    3f7c:	df 92       	push	r13
    3f7e:	ef 92       	push	r14
    3f80:	ff 92       	push	r15
    3f82:	0f 93       	push	r16
    3f84:	1f 93       	push	r17
    3f86:	df 93       	push	r29
    3f88:	cf 93       	push	r28
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
    3f8e:	60 97       	sbiw	r28, 0x10	; 16
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	f8 94       	cli
    3f94:	de bf       	out	0x3e, r29	; 62
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	cd bf       	out	0x3d, r28	; 61
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	09 83       	std	Y+1, r16	; 0x01
    3f9e:	1a 83       	std	Y+2, r17	; 0x02
    3fa0:	2b 83       	std	Y+3, r18	; 0x03
    3fa2:	3c 83       	std	Y+4, r19	; 0x04
    3fa4:	4d 83       	std	Y+5, r20	; 0x05
    3fa6:	5e 83       	std	Y+6, r21	; 0x06
    3fa8:	6f 83       	std	Y+7, r22	; 0x07
    3faa:	78 87       	std	Y+8, r23	; 0x08
    3fac:	89 86       	std	Y+9, r8	; 0x09
    3fae:	9a 86       	std	Y+10, r9	; 0x0a
    3fb0:	ab 86       	std	Y+11, r10	; 0x0b
    3fb2:	bc 86       	std	Y+12, r11	; 0x0c
    3fb4:	cd 86       	std	Y+13, r12	; 0x0d
    3fb6:	de 86       	std	Y+14, r13	; 0x0e
    3fb8:	ef 86       	std	Y+15, r14	; 0x0f
    3fba:	f8 8a       	std	Y+16, r15	; 0x10
    3fbc:	a9 80       	ldd	r10, Y+1	; 0x01
    3fbe:	ba 80       	ldd	r11, Y+2	; 0x02
    3fc0:	cb 80       	ldd	r12, Y+3	; 0x03
    3fc2:	dc 80       	ldd	r13, Y+4	; 0x04
    3fc4:	2d 81       	ldd	r18, Y+5	; 0x05
    3fc6:	3e 81       	ldd	r19, Y+6	; 0x06
    3fc8:	4f 81       	ldd	r20, Y+7	; 0x07
    3fca:	58 85       	ldd	r21, Y+8	; 0x08
    3fcc:	e9 84       	ldd	r14, Y+9	; 0x09
    3fce:	fa 84       	ldd	r15, Y+10	; 0x0a
    3fd0:	0b 85       	ldd	r16, Y+11	; 0x0b
    3fd2:	1c 85       	ldd	r17, Y+12	; 0x0c
    3fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd8:	af 85       	ldd	r26, Y+15	; 0x0f
    3fda:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3fdc:	ae 14       	cp	r10, r14
    3fde:	bf 04       	cpc	r11, r15
    3fe0:	c0 06       	cpc	r12, r16
    3fe2:	d1 06       	cpc	r13, r17
    3fe4:	08 f4       	brcc	.+2      	; 0x3fe8 <nrk_time_sub+0x76>
    3fe6:	40 c0       	rjmp	.+128    	; 0x4068 <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    3fe8:	ea 14       	cp	r14, r10
    3fea:	fb 04       	cpc	r15, r11
    3fec:	0c 05       	cpc	r16, r12
    3fee:	1d 05       	cpc	r17, r13
    3ff0:	91 f4       	brne	.+36     	; 0x4016 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3ff2:	28 17       	cp	r18, r24
    3ff4:	39 07       	cpc	r19, r25
    3ff6:	4a 07       	cpc	r20, r26
    3ff8:	5b 07       	cpc	r21, r27
    3ffa:	b0 f1       	brcs	.+108    	; 0x4068 <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3ffc:	28 1b       	sub	r18, r24
    3ffe:	39 0b       	sbc	r19, r25
    4000:	4a 0b       	sbc	r20, r26
    4002:	5b 0b       	sbc	r21, r27
    4004:	24 83       	std	Z+4, r18	; 0x04
    4006:	35 83       	std	Z+5, r19	; 0x05
    4008:	46 83       	std	Z+6, r20	; 0x06
    400a:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    400c:	10 82       	st	Z, r1
    400e:	11 82       	std	Z+1, r1	; 0x01
    4010:	12 82       	std	Z+2, r1	; 0x02
    4012:	13 82       	std	Z+3, r1	; 0x03
    4014:	1e c0       	rjmp	.+60     	; 0x4052 <nrk_time_sub+0xe0>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    4016:	28 17       	cp	r18, r24
    4018:	39 07       	cpc	r19, r25
    401a:	4a 07       	cpc	r20, r26
    401c:	5b 07       	cpc	r21, r27
    401e:	d8 f4       	brcc	.+54     	; 0x4056 <nrk_time_sub+0xe4>
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    4020:	08 94       	sec
    4022:	a1 08       	sbc	r10, r1
    4024:	b1 08       	sbc	r11, r1
    4026:	c1 08       	sbc	r12, r1
    4028:	d1 08       	sbc	r13, r1
    402a:	ae 18       	sub	r10, r14
    402c:	bf 08       	sbc	r11, r15
    402e:	c0 0a       	sbc	r12, r16
    4030:	d1 0a       	sbc	r13, r17
    4032:	a0 82       	st	Z, r10
    4034:	b1 82       	std	Z+1, r11	; 0x01
    4036:	c2 82       	std	Z+2, r12	; 0x02
    4038:	d3 82       	std	Z+3, r13	; 0x03
	result->nano_secs=high.nano_secs-low.nano_secs;
    403a:	20 50       	subi	r18, 0x00	; 0
    403c:	36 43       	sbci	r19, 0x36	; 54
    403e:	45 46       	sbci	r20, 0x65	; 101
    4040:	54 4c       	sbci	r21, 0xC4	; 196
    4042:	28 1b       	sub	r18, r24
    4044:	39 0b       	sbc	r19, r25
    4046:	4a 0b       	sbc	r20, r26
    4048:	5b 0b       	sbc	r21, r27
    404a:	24 83       	std	Z+4, r18	; 0x04
    404c:	35 83       	std	Z+5, r19	; 0x05
    404e:	46 83       	std	Z+6, r20	; 0x06
    4050:	57 83       	std	Z+7, r21	; 0x07
    4052:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
    4054:	0a c0       	rjmp	.+20     	; 0x406a <nrk_time_sub+0xf8>
}

result->secs=high.secs-low.secs;
    4056:	ae 18       	sub	r10, r14
    4058:	bf 08       	sbc	r11, r15
    405a:	c0 0a       	sbc	r12, r16
    405c:	d1 0a       	sbc	r13, r17
    405e:	a0 82       	st	Z, r10
    4060:	b1 82       	std	Z+1, r11	; 0x01
    4062:	c2 82       	std	Z+2, r12	; 0x02
    4064:	d3 82       	std	Z+3, r13	; 0x03
    4066:	ed cf       	rjmp	.-38     	; 0x4042 <nrk_time_sub+0xd0>
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    4068:	8f ef       	ldi	r24, 0xFF	; 255
}
    406a:	60 96       	adiw	r28, 0x10	; 16
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	cd bf       	out	0x3d, r28	; 61
    4076:	cf 91       	pop	r28
    4078:	df 91       	pop	r29
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	df 90       	pop	r13
    4084:	cf 90       	pop	r12
    4086:	bf 90       	pop	r11
    4088:	af 90       	pop	r10
    408a:	9f 90       	pop	r9
    408c:	8f 90       	pop	r8
    408e:	08 95       	ret

00004090 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4090:	8f 92       	push	r8
    4092:	9f 92       	push	r9
    4094:	af 92       	push	r10
    4096:	bf 92       	push	r11
    4098:	cf 92       	push	r12
    409a:	df 92       	push	r13
    409c:	ef 92       	push	r14
    409e:	ff 92       	push	r15
    40a0:	0f 93       	push	r16
    40a2:	1f 93       	push	r17
    40a4:	df 93       	push	r29
    40a6:	cf 93       	push	r28
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	60 97       	sbiw	r28, 0x10	; 16
    40ae:	0f b6       	in	r0, 0x3f	; 63
    40b0:	f8 94       	cli
    40b2:	de bf       	out	0x3e, r29	; 62
    40b4:	0f be       	out	0x3f, r0	; 63
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	fc 01       	movw	r30, r24
    40ba:	09 83       	std	Y+1, r16	; 0x01
    40bc:	1a 83       	std	Y+2, r17	; 0x02
    40be:	2b 83       	std	Y+3, r18	; 0x03
    40c0:	3c 83       	std	Y+4, r19	; 0x04
    40c2:	4d 83       	std	Y+5, r20	; 0x05
    40c4:	5e 83       	std	Y+6, r21	; 0x06
    40c6:	6f 83       	std	Y+7, r22	; 0x07
    40c8:	78 87       	std	Y+8, r23	; 0x08
    40ca:	89 86       	std	Y+9, r8	; 0x09
    40cc:	9a 86       	std	Y+10, r9	; 0x0a
    40ce:	ab 86       	std	Y+11, r10	; 0x0b
    40d0:	bc 86       	std	Y+12, r11	; 0x0c
    40d2:	cd 86       	std	Y+13, r12	; 0x0d
    40d4:	de 86       	std	Y+14, r13	; 0x0e
    40d6:	ef 86       	std	Y+15, r14	; 0x0f
    40d8:	f8 8a       	std	Y+16, r15	; 0x10
    40da:	ed 80       	ldd	r14, Y+5	; 0x05
    40dc:	fe 80       	ldd	r15, Y+6	; 0x06
    40de:	0f 81       	ldd	r16, Y+7	; 0x07
    40e0:	18 85       	ldd	r17, Y+8	; 0x08
    40e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e6:	af 85       	ldd	r26, Y+15	; 0x0f
    40e8:	b8 89       	ldd	r27, Y+16	; 0x10
result->secs=a.secs+b.secs;
    40ea:	29 85       	ldd	r18, Y+9	; 0x09
    40ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    40ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    40f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    40f2:	a9 80       	ldd	r10, Y+1	; 0x01
    40f4:	ba 80       	ldd	r11, Y+2	; 0x02
    40f6:	cb 80       	ldd	r12, Y+3	; 0x03
    40f8:	dc 80       	ldd	r13, Y+4	; 0x04
    40fa:	2a 0d       	add	r18, r10
    40fc:	3b 1d       	adc	r19, r11
    40fe:	4c 1d       	adc	r20, r12
    4100:	5d 1d       	adc	r21, r13
    4102:	20 83       	st	Z, r18
    4104:	31 83       	std	Z+1, r19	; 0x01
    4106:	42 83       	std	Z+2, r20	; 0x02
    4108:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    410a:	8e 0d       	add	r24, r14
    410c:	9f 1d       	adc	r25, r15
    410e:	a0 1f       	adc	r26, r16
    4110:	b1 1f       	adc	r27, r17
    4112:	84 83       	std	Z+4, r24	; 0x04
    4114:	95 83       	std	Z+5, r25	; 0x05
    4116:	a6 83       	std	Z+6, r26	; 0x06
    4118:	b7 83       	std	Z+7, r27	; 0x07
    411a:	10 c0       	rjmp	.+32     	; 0x413c <nrk_time_add+0xac>
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    411c:	20 81       	ld	r18, Z
    411e:	31 81       	ldd	r19, Z+1	; 0x01
    4120:	42 81       	ldd	r20, Z+2	; 0x02
    4122:	53 81       	ldd	r21, Z+3	; 0x03
    4124:	2f 5f       	subi	r18, 0xFF	; 255
    4126:	3f 4f       	sbci	r19, 0xFF	; 255
    4128:	4f 4f       	sbci	r20, 0xFF	; 255
    412a:	5f 4f       	sbci	r21, 0xFF	; 255
    412c:	20 83       	st	Z, r18
    412e:	31 83       	std	Z+1, r19	; 0x01
    4130:	42 83       	std	Z+2, r20	; 0x02
    4132:	53 83       	std	Z+3, r21	; 0x03
    4134:	80 50       	subi	r24, 0x00	; 0
    4136:	9a 4c       	sbci	r25, 0xCA	; 202
    4138:	aa 49       	sbci	r26, 0x9A	; 154
    413a:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    413c:	80 30       	cpi	r24, 0x00	; 0
    413e:	2a ec       	ldi	r18, 0xCA	; 202
    4140:	92 07       	cpc	r25, r18
    4142:	2a e9       	ldi	r18, 0x9A	; 154
    4144:	a2 07       	cpc	r26, r18
    4146:	2b e3       	ldi	r18, 0x3B	; 59
    4148:	b2 07       	cpc	r27, r18
    414a:	40 f7       	brcc	.-48     	; 0x411c <nrk_time_add+0x8c>
    414c:	84 83       	std	Z+4, r24	; 0x04
    414e:	95 83       	std	Z+5, r25	; 0x05
    4150:	a6 83       	std	Z+6, r26	; 0x06
    4152:	b7 83       	std	Z+7, r27	; 0x07
{
result->secs=a.secs+b.secs;
result->nano_secs=a.nano_secs+b.nano_secs;
nrk_time_compact_nanos(result);
return NRK_OK;
}
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	60 96       	adiw	r28, 0x10	; 16
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	cf 91       	pop	r28
    4164:	df 91       	pop	r29
    4166:	1f 91       	pop	r17
    4168:	0f 91       	pop	r16
    416a:	ff 90       	pop	r15
    416c:	ef 90       	pop	r14
    416e:	df 90       	pop	r13
    4170:	cf 90       	pop	r12
    4172:	bf 90       	pop	r11
    4174:	af 90       	pop	r10
    4176:	9f 90       	pop	r9
    4178:	8f 90       	pop	r8
    417a:	08 95       	ret

0000417c <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    417c:	fc 01       	movw	r30, r24
    417e:	84 81       	ldd	r24, Z+4	; 0x04
    4180:	95 81       	ldd	r25, Z+5	; 0x05
    4182:	a6 81       	ldd	r26, Z+6	; 0x06
    4184:	b7 81       	ldd	r27, Z+7	; 0x07
  while(t->nano_secs>=NANOS_PER_SEC)
    4186:	10 c0       	rjmp	.+32     	; 0x41a8 <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    4188:	20 81       	ld	r18, Z
    418a:	31 81       	ldd	r19, Z+1	; 0x01
    418c:	42 81       	ldd	r20, Z+2	; 0x02
    418e:	53 81       	ldd	r21, Z+3	; 0x03
    4190:	2f 5f       	subi	r18, 0xFF	; 255
    4192:	3f 4f       	sbci	r19, 0xFF	; 255
    4194:	4f 4f       	sbci	r20, 0xFF	; 255
    4196:	5f 4f       	sbci	r21, 0xFF	; 255
    4198:	20 83       	st	Z, r18
    419a:	31 83       	std	Z+1, r19	; 0x01
    419c:	42 83       	std	Z+2, r20	; 0x02
    419e:	53 83       	std	Z+3, r21	; 0x03
    41a0:	80 50       	subi	r24, 0x00	; 0
    41a2:	9a 4c       	sbci	r25, 0xCA	; 202
    41a4:	aa 49       	sbci	r26, 0x9A	; 154
    41a6:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    41a8:	80 30       	cpi	r24, 0x00	; 0
    41aa:	2a ec       	ldi	r18, 0xCA	; 202
    41ac:	92 07       	cpc	r25, r18
    41ae:	2a e9       	ldi	r18, 0x9A	; 154
    41b0:	a2 07       	cpc	r26, r18
    41b2:	2b e3       	ldi	r18, 0x3B	; 59
    41b4:	b2 07       	cpc	r27, r18
    41b6:	40 f7       	brcc	.-48     	; 0x4188 <nrk_time_compact_nanos+0xc>
    41b8:	84 83       	std	Z+4, r24	; 0x04
    41ba:	95 83       	std	Z+5, r25	; 0x05
    41bc:	a6 83       	std	Z+6, r26	; 0x06
    41be:	b7 83       	std	Z+7, r27	; 0x07
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    41c0:	08 95       	ret

000041c2 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    41c2:	60 93 27 05 	sts	0x0527, r22
    41c6:	70 93 28 05 	sts	0x0528, r23
    41ca:	80 93 29 05 	sts	0x0529, r24
    41ce:	90 93 2a 05 	sts	0x052A, r25
  nrk_system_time.nano_secs=nano_secs;
    41d2:	20 93 2b 05 	sts	0x052B, r18
    41d6:	30 93 2c 05 	sts	0x052C, r19
    41da:	40 93 2d 05 	sts	0x052D, r20
    41de:	50 93 2e 05 	sts	0x052E, r21
}
    41e2:	08 95       	ret

000041e4 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    41e4:	af 92       	push	r10
    41e6:	bf 92       	push	r11
    41e8:	cf 92       	push	r12
    41ea:	df 92       	push	r13
    41ec:	ef 92       	push	r14
    41ee:	ff 92       	push	r15
    41f0:	0f 93       	push	r16
    41f2:	1f 93       	push	r17
    41f4:	fc 01       	movw	r30, r24
uint16_t ticks;
//uint16_t tmp;
uint8_t i;
// FIXME: This will overflow

if(t->secs>0)
    41f6:	20 81       	ld	r18, Z
    41f8:	31 81       	ldd	r19, Z+1	; 0x01
    41fa:	42 81       	ldd	r20, Z+2	; 0x02
    41fc:	53 81       	ldd	r21, Z+3	; 0x03
    41fe:	21 15       	cp	r18, r1
    4200:	31 05       	cpc	r19, r1
    4202:	41 05       	cpc	r20, r1
    4204:	51 05       	cpc	r21, r1
    4206:	51 f1       	breq	.+84     	; 0x425c <_nrk_time_to_ticks+0x78>
{
   if(t->secs>42) return 0;
    4208:	2b 32       	cpi	r18, 0x2B	; 43
    420a:	31 05       	cpc	r19, r1
    420c:	41 05       	cpc	r20, r1
    420e:	51 05       	cpc	r21, r1
    4210:	18 f0       	brcs	.+6      	; 0x4218 <_nrk_time_to_ticks+0x34>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	2c c0       	rjmp	.+88     	; 0x4270 <_nrk_time_to_ticks+0x8c>
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	10 c0       	rjmp	.+32     	; 0x423c <_nrk_time_to_ticks+0x58>
   for(i=0; i<t->secs; i++ ) t->nano_secs+=NANOS_PER_SEC;
    421c:	a1 2c       	mov	r10, r1
    421e:	9a ec       	ldi	r25, 0xCA	; 202
    4220:	b9 2e       	mov	r11, r25
    4222:	9a e9       	ldi	r25, 0x9A	; 154
    4224:	c9 2e       	mov	r12, r25
    4226:	9b e3       	ldi	r25, 0x3B	; 59
    4228:	d9 2e       	mov	r13, r25
    422a:	ea 0c       	add	r14, r10
    422c:	fb 1c       	adc	r15, r11
    422e:	0c 1d       	adc	r16, r12
    4230:	1d 1d       	adc	r17, r13
    4232:	e4 82       	std	Z+4, r14	; 0x04
    4234:	f5 82       	std	Z+5, r15	; 0x05
    4236:	06 83       	std	Z+6, r16	; 0x06
    4238:	17 83       	std	Z+7, r17	; 0x07
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	a8 2e       	mov	r10, r24
    423e:	bb 24       	eor	r11, r11
    4240:	cc 24       	eor	r12, r12
    4242:	dd 24       	eor	r13, r13
    4244:	e4 80       	ldd	r14, Z+4	; 0x04
    4246:	f5 80       	ldd	r15, Z+5	; 0x05
    4248:	06 81       	ldd	r16, Z+6	; 0x06
    424a:	17 81       	ldd	r17, Z+7	; 0x07
    424c:	a2 16       	cp	r10, r18
    424e:	b3 06       	cpc	r11, r19
    4250:	c4 06       	cpc	r12, r20
    4252:	d5 06       	cpc	r13, r21
    4254:	18 f3       	brcs	.-58     	; 0x421c <_nrk_time_to_ticks+0x38>
   ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4256:	c8 01       	movw	r24, r16
    4258:	b7 01       	movw	r22, r14
    425a:	04 c0       	rjmp	.+8      	; 0x4264 <_nrk_time_to_ticks+0x80>
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    425c:	64 81       	ldd	r22, Z+4	; 0x04
    425e:	75 81       	ldd	r23, Z+5	; 0x05
    4260:	86 81       	ldd	r24, Z+6	; 0x06
    4262:	97 81       	ldd	r25, Z+7	; 0x07
    4264:	23 eb       	ldi	r18, 0xB3	; 179
    4266:	36 ee       	ldi	r19, 0xE6	; 230
    4268:	4e e0       	ldi	r20, 0x0E	; 14
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	0e 94 c6 28 	call	0x518c	; 0x518c <__udivmodsi4>
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4270:	c9 01       	movw	r24, r18
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	ff 90       	pop	r15
    4278:	ef 90       	pop	r14
    427a:	df 90       	pop	r13
    427c:	cf 90       	pop	r12
    427e:	bf 90       	pop	r11
    4280:	af 90       	pop	r10
    4282:	08 95       	ret

00004284 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4284:	ef 92       	push	r14
    4286:	ff 92       	push	r15
    4288:	0f 93       	push	r16
    428a:	1f 93       	push	r17
    428c:	df 93       	push	r29
    428e:	cf 93       	push	r28
    4290:	cd b7       	in	r28, 0x3d	; 61
    4292:	de b7       	in	r29, 0x3e	; 62
    4294:	28 97       	sbiw	r28, 0x08	; 8
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	7b 01       	movw	r14, r22
    42a2:	8c 01       	movw	r16, r24
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    42a4:	73 70       	andi	r23, 0x03	; 3
    42a6:	80 70       	andi	r24, 0x00	; 0
    42a8:	90 70       	andi	r25, 0x00	; 0
    42aa:	23 eb       	ldi	r18, 0xB3	; 179
    42ac:	36 ee       	ldi	r19, 0xE6	; 230
    42ae:	4e e0       	ldi	r20, 0x0E	; 14
    42b0:	50 e0       	ldi	r21, 0x00	; 0
    42b2:	0e 94 80 28 	call	0x5100	; 0x5100 <__mulsi3>
    42b6:	6d 83       	std	Y+5, r22	; 0x05
    42b8:	7e 83       	std	Y+6, r23	; 0x06
    42ba:	8f 83       	std	Y+7, r24	; 0x07
    42bc:	98 87       	std	Y+8, r25	; 0x08
    42be:	a8 01       	movw	r20, r16
    42c0:	97 01       	movw	r18, r14
    42c2:	ea e0       	ldi	r30, 0x0A	; 10
    42c4:	56 95       	lsr	r21
    42c6:	47 95       	ror	r20
    42c8:	37 95       	ror	r19
    42ca:	27 95       	ror	r18
    42cc:	ea 95       	dec	r30
    42ce:	d1 f7       	brne	.-12     	; 0x42c4 <_nrk_ticks_to_time+0x40>
    42d0:	29 83       	std	Y+1, r18	; 0x01
    42d2:	3a 83       	std	Y+2, r19	; 0x02
    42d4:	4b 83       	std	Y+3, r20	; 0x03
    42d6:	5c 83       	std	Y+4, r21	; 0x04
    42d8:	3a 81       	ldd	r19, Y+2	; 0x02
    42da:	4b 81       	ldd	r20, Y+3	; 0x03
    42dc:	5c 81       	ldd	r21, Y+4	; 0x04
}
    42de:	28 96       	adiw	r28, 0x08	; 8
    42e0:	0f b6       	in	r0, 0x3f	; 63
    42e2:	f8 94       	cli
    42e4:	de bf       	out	0x3e, r29	; 62
    42e6:	0f be       	out	0x3f, r0	; 63
    42e8:	cd bf       	out	0x3d, r28	; 61
    42ea:	cf 91       	pop	r28
    42ec:	df 91       	pop	r29
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	ff 90       	pop	r15
    42f4:	ef 90       	pop	r14
    42f6:	08 95       	ret

000042f8 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t t)
{
    42f8:	af 92       	push	r10
    42fa:	bf 92       	push	r11
    42fc:	cf 92       	push	r12
    42fe:	df 92       	push	r13
    4300:	ef 92       	push	r14
    4302:	ff 92       	push	r15
    4304:	0f 93       	push	r16
    4306:	1f 93       	push	r17
    4308:	df 93       	push	r29
    430a:	cf 93       	push	r28
    430c:	cd b7       	in	r28, 0x3d	; 61
    430e:	de b7       	in	r29, 0x3e	; 62
    4310:	28 97       	sbiw	r28, 0x08	; 8
    4312:	0f b6       	in	r0, 0x3f	; 63
    4314:	f8 94       	cli
    4316:	de bf       	out	0x3e, r29	; 62
    4318:	0f be       	out	0x3f, r0	; 63
    431a:	cd bf       	out	0x3d, r28	; 61
    431c:	29 83       	std	Y+1, r18	; 0x01
    431e:	3a 83       	std	Y+2, r19	; 0x02
    4320:	4b 83       	std	Y+3, r20	; 0x03
    4322:	5c 83       	std	Y+4, r21	; 0x04
    4324:	6d 83       	std	Y+5, r22	; 0x05
    4326:	7e 83       	std	Y+6, r23	; 0x06
    4328:	8f 83       	std	Y+7, r24	; 0x07
    432a:	98 87       	std	Y+8, r25	; 0x08
    432c:	e9 80       	ldd	r14, Y+1	; 0x01
    432e:	fa 80       	ldd	r15, Y+2	; 0x02
    4330:	0b 81       	ldd	r16, Y+3	; 0x03
    4332:	1c 81       	ldd	r17, Y+4	; 0x04
    4334:	ad 80       	ldd	r10, Y+5	; 0x05
    4336:	be 80       	ldd	r11, Y+6	; 0x06
    4338:	cf 80       	ldd	r12, Y+7	; 0x07
    433a:	d8 84       	ldd	r13, Y+8	; 0x08
uint32_t ticks;
uint32_t tmp;

if(t.secs>=1)
    433c:	e1 14       	cp	r14, r1
    433e:	f1 04       	cpc	r15, r1
    4340:	01 05       	cpc	r16, r1
    4342:	11 05       	cpc	r17, r1
    4344:	19 f1       	breq	.+70     	; 0x438c <_nrk_time_to_ticks_long+0x94>
{
t.nano_secs+=NANOS_PER_SEC;
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	9a ec       	ldi	r25, 0xCA	; 202
    434a:	aa e9       	ldi	r26, 0x9A	; 154
    434c:	bb e3       	ldi	r27, 0x3B	; 59
    434e:	a8 0e       	add	r10, r24
    4350:	b9 1e       	adc	r11, r25
    4352:	ca 1e       	adc	r12, r26
    4354:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    4356:	c6 01       	movw	r24, r12
    4358:	b5 01       	movw	r22, r10
    435a:	23 eb       	ldi	r18, 0xB3	; 179
    435c:	36 ee       	ldi	r19, 0xE6	; 230
    435e:	4e e0       	ldi	r20, 0x0E	; 14
    4360:	50 e0       	ldi	r21, 0x00	; 0
    4362:	0e 94 c6 28 	call	0x518c	; 0x518c <__udivmodsi4>
    4366:	c9 01       	movw	r24, r18
    4368:	da 01       	movw	r26, r20
ticks+=t.secs*TICKS_PER_SEC;
    436a:	08 94       	sec
    436c:	e1 08       	sbc	r14, r1
    436e:	f1 08       	sbc	r15, r1
    4370:	01 09       	sbc	r16, r1
    4372:	11 09       	sbc	r17, r1
    4374:	fa e0       	ldi	r31, 0x0A	; 10
    4376:	ee 0c       	add	r14, r14
    4378:	ff 1c       	adc	r15, r15
    437a:	00 1f       	adc	r16, r16
    437c:	11 1f       	adc	r17, r17
    437e:	fa 95       	dec	r31
    4380:	d1 f7       	brne	.-12     	; 0x4376 <_nrk_time_to_ticks_long+0x7e>
    4382:	e8 0e       	add	r14, r24
    4384:	f9 1e       	adc	r15, r25
    4386:	0a 1f       	adc	r16, r26
    4388:	1b 1f       	adc	r17, r27
    438a:	0c c0       	rjmp	.+24     	; 0x43a4 <_nrk_time_to_ticks_long+0xac>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    438c:	c6 01       	movw	r24, r12
    438e:	b5 01       	movw	r22, r10
    4390:	23 eb       	ldi	r18, 0xB3	; 179
    4392:	36 ee       	ldi	r19, 0xE6	; 230
    4394:	4e e0       	ldi	r20, 0x0E	; 14
    4396:	50 e0       	ldi	r21, 0x00	; 0
    4398:	0e 94 c6 28 	call	0x518c	; 0x518c <__udivmodsi4>
    439c:	e2 2e       	mov	r14, r18
    439e:	f3 2e       	mov	r15, r19
    43a0:	04 2f       	mov	r16, r20
    43a2:	15 2f       	mov	r17, r21
    43a4:	c8 01       	movw	r24, r16
    43a6:	b7 01       	movw	r22, r14
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    43a8:	04 c0       	rjmp	.+8      	; 0x43b2 <_nrk_time_to_ticks_long+0xba>
    43aa:	60 50       	subi	r22, 0x00	; 0
    43ac:	74 40       	sbci	r23, 0x04	; 4
    43ae:	80 40       	sbci	r24, 0x00	; 0
    43b0:	90 40       	sbci	r25, 0x00	; 0
    43b2:	61 30       	cpi	r22, 0x01	; 1
    43b4:	a4 e0       	ldi	r26, 0x04	; 4
    43b6:	7a 07       	cpc	r23, r26
    43b8:	a0 e0       	ldi	r26, 0x00	; 0
    43ba:	8a 07       	cpc	r24, r26
    43bc:	a0 e0       	ldi	r26, 0x00	; 0
    43be:	9a 07       	cpc	r25, r26
    43c0:	a0 f7       	brcc	.-24     	; 0x43aa <_nrk_time_to_ticks_long+0xb2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    43c2:	23 eb       	ldi	r18, 0xB3	; 179
    43c4:	36 ee       	ldi	r19, 0xE6	; 230
    43c6:	4e e0       	ldi	r20, 0x0E	; 14
    43c8:	50 e0       	ldi	r21, 0x00	; 0
    43ca:	0e 94 80 28 	call	0x5100	; 0x5100 <__mulsi3>
    43ce:	67 5a       	subi	r22, 0xA7	; 167
    43d0:	7c 48       	sbci	r23, 0x8C	; 140
    43d2:	88 4f       	sbci	r24, 0xF8	; 248
    43d4:	9f 4f       	sbci	r25, 0xFF	; 255
    43d6:	6a 15       	cp	r22, r10
    43d8:	7b 05       	cpc	r23, r11
    43da:	8c 05       	cpc	r24, r12
    43dc:	9d 05       	cpc	r25, r13
    43de:	28 f4       	brcc	.+10     	; 0x43ea <_nrk_time_to_ticks_long+0xf2>
    43e0:	08 94       	sec
    43e2:	e1 1c       	adc	r14, r1
    43e4:	f1 1c       	adc	r15, r1
    43e6:	01 1d       	adc	r16, r1
    43e8:	11 1d       	adc	r17, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    43ea:	b7 01       	movw	r22, r14
    43ec:	c8 01       	movw	r24, r16
    43ee:	28 96       	adiw	r28, 0x08	; 8
    43f0:	0f b6       	in	r0, 0x3f	; 63
    43f2:	f8 94       	cli
    43f4:	de bf       	out	0x3e, r29	; 62
    43f6:	0f be       	out	0x3f, r0	; 63
    43f8:	cd bf       	out	0x3d, r28	; 61
    43fa:	cf 91       	pop	r28
    43fc:	df 91       	pop	r29
    43fe:	1f 91       	pop	r17
    4400:	0f 91       	pop	r16
    4402:	ff 90       	pop	r15
    4404:	ef 90       	pop	r14
    4406:	df 90       	pop	r13
    4408:	cf 90       	pop	r12
    440a:	bf 90       	pop	r11
    440c:	af 90       	pop	r10
    440e:	08 95       	ret

00004410 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    4410:	ef 92       	push	r14
    4412:	ff 92       	push	r15
    4414:	0f 93       	push	r16
    4416:	1f 93       	push	r17
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
    441c:	ec 01       	movw	r28, r24
 t->secs=nrk_system_time.secs;
    441e:	80 91 27 05 	lds	r24, 0x0527
    4422:	90 91 28 05 	lds	r25, 0x0528
    4426:	a0 91 29 05 	lds	r26, 0x0529
    442a:	b0 91 2a 05 	lds	r27, 0x052A
    442e:	88 83       	st	Y, r24
    4430:	99 83       	std	Y+1, r25	; 0x01
    4432:	aa 83       	std	Y+2, r26	; 0x02
    4434:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs=nrk_system_time.nano_secs;
    4436:	e0 90 2b 05 	lds	r14, 0x052B
    443a:	f0 90 2c 05 	lds	r15, 0x052C
    443e:	00 91 2d 05 	lds	r16, 0x052D
    4442:	10 91 2e 05 	lds	r17, 0x052E
    4446:	ec 82       	std	Y+4, r14	; 0x04
    4448:	fd 82       	std	Y+5, r15	; 0x05
    444a:	0e 83       	std	Y+6, r16	; 0x06
    444c:	1f 83       	std	Y+7, r17	; 0x07

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    444e:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    4452:	68 2f       	mov	r22, r24
    4454:	70 e0       	ldi	r23, 0x00	; 0
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	23 eb       	ldi	r18, 0xB3	; 179
    445c:	36 ee       	ldi	r19, 0xE6	; 230
    445e:	4e e0       	ldi	r20, 0x0E	; 14
    4460:	50 e0       	ldi	r21, 0x00	; 0
    4462:	0e 94 80 28 	call	0x5100	; 0x5100 <__mulsi3>
    4466:	6e 0d       	add	r22, r14
    4468:	7f 1d       	adc	r23, r15
    446a:	80 1f       	adc	r24, r16
    446c:	91 1f       	adc	r25, r17
    446e:	6c 83       	std	Y+4, r22	; 0x04
    4470:	7d 83       	std	Y+5, r23	; 0x05
    4472:	8e 83       	std	Y+6, r24	; 0x06
    4474:	9f 83       	std	Y+7, r25	; 0x07
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4476:	10 c0       	rjmp	.+32     	; 0x4498 <nrk_time_get+0x88>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    4478:	28 81       	ld	r18, Y
    447a:	39 81       	ldd	r19, Y+1	; 0x01
    447c:	4a 81       	ldd	r20, Y+2	; 0x02
    447e:	5b 81       	ldd	r21, Y+3	; 0x03
    4480:	2f 5f       	subi	r18, 0xFF	; 255
    4482:	3f 4f       	sbci	r19, 0xFF	; 255
    4484:	4f 4f       	sbci	r20, 0xFF	; 255
    4486:	5f 4f       	sbci	r21, 0xFF	; 255
    4488:	28 83       	st	Y, r18
    448a:	39 83       	std	Y+1, r19	; 0x01
    448c:	4a 83       	std	Y+2, r20	; 0x02
    448e:	5b 83       	std	Y+3, r21	; 0x03
    4490:	60 50       	subi	r22, 0x00	; 0
    4492:	7a 4c       	sbci	r23, 0xCA	; 202
    4494:	8a 49       	sbci	r24, 0x9A	; 154
    4496:	9b 43       	sbci	r25, 0x3B	; 59
{
 t->secs=nrk_system_time.secs;
 t->nano_secs=nrk_system_time.nano_secs;

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4498:	60 30       	cpi	r22, 0x00	; 0
    449a:	2a ec       	ldi	r18, 0xCA	; 202
    449c:	72 07       	cpc	r23, r18
    449e:	2a e9       	ldi	r18, 0x9A	; 154
    44a0:	82 07       	cpc	r24, r18
    44a2:	2b e3       	ldi	r18, 0x3B	; 59
    44a4:	92 07       	cpc	r25, r18
    44a6:	40 f7       	brcc	.-48     	; 0x4478 <nrk_time_get+0x68>
    44a8:	6c 83       	std	Y+4, r22	; 0x04
    44aa:	7d 83       	std	Y+5, r23	; 0x05
    44ac:	8e 83       	std	Y+6, r24	; 0x06
    44ae:	9f 83       	std	Y+7, r25	; 0x07
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }
}
    44b0:	df 91       	pop	r29
    44b2:	cf 91       	pop	r28
    44b4:	1f 91       	pop	r17
    44b6:	0f 91       	pop	r16
    44b8:	ff 90       	pop	r15
    44ba:	ef 90       	pop	r14
    44bc:	08 95       	ret

000044be <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    44be:	0f 93       	push	r16
    44c0:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    44c2:	01 e0       	ldi	r16, 0x01	; 1
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    44c4:	12 e0       	ldi	r17, 0x02	; 2
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    44c6:	0e 94 42 19 	call	0x3284	; 0x3284 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    44ca:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <_nrk_get_next_wakeup>
    44ce:	85 31       	cpi	r24, 0x15	; 21
    44d0:	28 f4       	brcc	.+10     	; 0x44dc <nrk_idle_task+0x1e>
    {
	    _nrk_cpu_state=CPU_IDLE;
    44d2:	00 93 24 05 	sts	0x0524, r16
	    nrk_idle();
    44d6:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <nrk_idle>
    44da:	08 c0       	rjmp	.+16     	; 0x44ec <nrk_idle_task+0x2e>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    44dc:	8a e0       	ldi	r24, 0x0A	; 10
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	0e 94 8b 24 	call	0x4916	; 0x4916 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    44e4:	10 93 24 05 	sts	0x0524, r17
	    nrk_sleep();
    44e8:	0e 94 93 26 	call	0x4d26	; 0x4d26 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    44ec:	80 91 14 04 	lds	r24, 0x0414
    44f0:	85 35       	cpi	r24, 0x55	; 85
    44f2:	19 f0       	breq	.+6      	; 0x44fa <nrk_idle_task+0x3c>
    44f4:	88 e0       	ldi	r24, 0x08	; 8
    44f6:	0e 94 39 18 	call	0x3072	; 0x3072 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    44fa:	80 91 7e 10 	lds	r24, 0x107E
    44fe:	85 35       	cpi	r24, 0x55	; 85
    4500:	11 f3       	breq	.-60     	; 0x44c6 <nrk_idle_task+0x8>
    4502:	88 e0       	ldi	r24, 0x08	; 8
    4504:	0e 94 39 18 	call	0x3072	; 0x3072 <nrk_error_add>
    4508:	de cf       	rjmp	.-68     	; 0x44c6 <nrk_idle_task+0x8>

0000450a <_nrk_scheduler>:
// 750 measure to 100uS
// 800 * .125 = 100us
#define CONTEXT_SWAP_TIME_BOUND    750
uint8_t t;
void inline _nrk_scheduler()
{	   
    450a:	2f 92       	push	r2
    450c:	3f 92       	push	r3
    450e:	4f 92       	push	r4
    4510:	5f 92       	push	r5
    4512:	6f 92       	push	r6
    4514:	7f 92       	push	r7
    4516:	8f 92       	push	r8
    4518:	9f 92       	push	r9
    451a:	af 92       	push	r10
    451c:	bf 92       	push	r11
    451e:	cf 92       	push	r12
    4520:	df 92       	push	r13
    4522:	ef 92       	push	r14
    4524:	ff 92       	push	r15
    4526:	0f 93       	push	r16
    4528:	1f 93       	push	r17
    452a:	cf 93       	push	r28
    452c:	df 93       	push	r29
	int8_t task_ID;
	uint16_t next_wake;
	uint16_t start_time_stamp;

	nrk_int_disable();   // this should be removed...  Not needed
    452e:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	_nrk_high_speed_timer_reset();
    4532:	0e 94 bc 24 	call	0x4978	; 0x4978 <_nrk_high_speed_timer_reset>
	start_time_stamp=_nrk_high_speed_timer_get();
    4536:	0e 94 02 25 	call	0x4a04	; 0x4a04 <_nrk_high_speed_timer_get>
    453a:	2c 01       	movw	r4, r24
#endif
	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    453c:	8a ef       	ldi	r24, 0xFA	; 250
    453e:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
	if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
	#endif
	//while(_nrk_time_trigger>0)
	//{
	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4542:	60 91 99 04 	lds	r22, 0x0499
    4546:	70 e0       	ldi	r23, 0x00	; 0
    4548:	80 e0       	ldi	r24, 0x00	; 0
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	23 eb       	ldi	r18, 0xB3	; 179
    454e:	36 ee       	ldi	r19, 0xE6	; 230
    4550:	4e e0       	ldi	r20, 0x0E	; 14
    4552:	50 e0       	ldi	r21, 0x00	; 0
    4554:	0e 94 80 28 	call	0x5100	; 0x5100 <__mulsi3>
    4558:	7b 01       	movw	r14, r22
    455a:	8c 01       	movw	r16, r24
    455c:	80 91 2b 05 	lds	r24, 0x052B
    4560:	90 91 2c 05 	lds	r25, 0x052C
    4564:	a0 91 2d 05 	lds	r26, 0x052D
    4568:	b0 91 2e 05 	lds	r27, 0x052E
    456c:	e8 0e       	add	r14, r24
    456e:	f9 1e       	adc	r15, r25
    4570:	0a 1f       	adc	r16, r26
    4572:	1b 1f       	adc	r17, r27
	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4574:	c8 01       	movw	r24, r16
    4576:	b7 01       	movw	r22, r14
    4578:	0e 94 c6 28 	call	0x518c	; 0x518c <__udivmodsi4>
    457c:	e6 1a       	sub	r14, r22
    457e:	f7 0a       	sbc	r15, r23
    4580:	08 0b       	sbc	r16, r24
    4582:	19 0b       	sbc	r17, r25
    4584:	80 91 27 05 	lds	r24, 0x0527
    4588:	90 91 28 05 	lds	r25, 0x0528
    458c:	a0 91 29 05 	lds	r26, 0x0529
    4590:	b0 91 2a 05 	lds	r27, 0x052A
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4594:	16 c0       	rjmp	.+44     	; 0x45c2 <_nrk_scheduler+0xb8>
	{
		nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4596:	80 e0       	ldi	r24, 0x00	; 0
    4598:	96 e3       	ldi	r25, 0x36	; 54
    459a:	a5 e6       	ldi	r26, 0x65	; 101
    459c:	b4 ec       	ldi	r27, 0xC4	; 196
    459e:	e8 0e       	add	r14, r24
    45a0:	f9 1e       	adc	r15, r25
    45a2:	0a 1f       	adc	r16, r26
    45a4:	1b 1f       	adc	r17, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    45a6:	c8 01       	movw	r24, r16
    45a8:	b7 01       	movw	r22, r14
    45aa:	23 eb       	ldi	r18, 0xB3	; 179
    45ac:	36 ee       	ldi	r19, 0xE6	; 230
    45ae:	4e e0       	ldi	r20, 0x0E	; 14
    45b0:	50 e0       	ldi	r21, 0x00	; 0
    45b2:	0e 94 c6 28 	call	0x518c	; 0x518c <__udivmodsi4>
    45b6:	e6 1a       	sub	r14, r22
    45b8:	f7 0a       	sbc	r15, r23
    45ba:	08 0b       	sbc	r16, r24
    45bc:	19 0b       	sbc	r17, r25
    45be:	d6 01       	movw	r26, r12
    45c0:	c5 01       	movw	r24, r10
    45c2:	5c 01       	movw	r10, r24
    45c4:	6d 01       	movw	r12, r26
    45c6:	08 94       	sec
    45c8:	a1 1c       	adc	r10, r1
    45ca:	b1 1c       	adc	r11, r1
    45cc:	c1 1c       	adc	r12, r1
    45ce:	d1 1c       	adc	r13, r1
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	e2 16       	cp	r14, r18
    45d4:	2a ec       	ldi	r18, 0xCA	; 202
    45d6:	f2 06       	cpc	r15, r18
    45d8:	2a e9       	ldi	r18, 0x9A	; 154
    45da:	02 07       	cpc	r16, r18
    45dc:	2b e3       	ldi	r18, 0x3B	; 59
    45de:	12 07       	cpc	r17, r18
    45e0:	d0 f6       	brcc	.-76     	; 0x4596 <_nrk_scheduler+0x8c>
    45e2:	e0 92 2b 05 	sts	0x052B, r14
    45e6:	f0 92 2c 05 	sts	0x052C, r15
    45ea:	00 93 2d 05 	sts	0x052D, r16
    45ee:	10 93 2e 05 	sts	0x052E, r17
    45f2:	80 93 27 05 	sts	0x0527, r24
    45f6:	90 93 28 05 	sts	0x0528, r25
    45fa:	a0 93 29 05 	sts	0x0529, r26
    45fe:	b0 93 2a 05 	sts	0x052A, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
	}
	//  _nrk_time_trigger--;
	//}  
	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4602:	e0 91 30 05 	lds	r30, 0x0530
    4606:	f0 91 31 05 	lds	r31, 0x0531
    460a:	85 81       	ldd	r24, Z+5	; 0x05
    460c:	88 23       	and	r24, r24
    460e:	b9 f0       	breq	.+46     	; 0x463e <_nrk_scheduler+0x134>
    4610:	81 85       	ldd	r24, Z+9	; 0x09
    4612:	84 30       	cpi	r24, 0x04	; 4
    4614:	a1 f0       	breq	.+40     	; 0x463e <_nrk_scheduler+0x134>
	{
	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
    4616:	87 81       	ldd	r24, Z+7	; 0x07
    4618:	82 30       	cpi	r24, 0x02	; 2
    461a:	29 f0       	breq	.+10     	; 0x4626 <_nrk_scheduler+0x11c>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
    461c:	88 23       	and	r24, r24
    461e:	41 f0       	breq	.+16     	; 0x4630 <_nrk_scheduler+0x126>
    4620:	86 81       	ldd	r24, Z+6	; 0x06
    4622:	88 23       	and	r24, r24
    4624:	11 f4       	brne	.+4      	; 0x462a <_nrk_scheduler+0x120>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4626:	85 e0       	ldi	r24, 0x05	; 5
    4628:	01 c0       	rjmp	.+2      	; 0x462c <_nrk_scheduler+0x122>
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
			nrk_cur_task_TCB->task_state = SUSPENDED;
    462a:	83 e0       	ldi	r24, 0x03	; 3
    462c:	81 87       	std	Z+9, r24	; 0x09
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
    462e:	04 c0       	rjmp	.+8      	; 0x4638 <_nrk_scheduler+0x12e>
			nrk_cur_task_TCB->task_state = SUSPENDED;
		else	
		{
			nrk_cur_task_TCB->task_state = SUSPENDED;
    4630:	83 e0       	ldi	r24, 0x03	; 3
    4632:	81 87       	std	Z+9, r24	; 0x09
			nrk_cur_task_TCB->event_suspend=0;
    4634:	17 82       	std	Z+7, r1	; 0x07
			nrk_cur_task_TCB->nw_flag=0;
    4636:	16 82       	std	Z+6, r1	; 0x06
		}
		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4638:	80 85       	ldd	r24, Z+8	; 0x08
    463a:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <nrk_rem_from_readyQ>

	// Update cpu used value for ended task
	// If the task has used its reserve, suspend task
	// Don't disable IdleTask which is 0
	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    463e:	e0 91 30 05 	lds	r30, 0x0530
    4642:	f0 91 31 05 	lds	r31, 0x0531
    4646:	85 8d       	ldd	r24, Z+29	; 0x1d
    4648:	96 8d       	ldd	r25, Z+30	; 0x1e
    464a:	00 97       	sbiw	r24, 0x00	; 0
    464c:	91 f1       	breq	.+100    	; 0x46b2 <_nrk_scheduler+0x1a8>
    464e:	60 85       	ldd	r22, Z+8	; 0x08
    4650:	66 23       	and	r22, r22
    4652:	79 f1       	breq	.+94     	; 0x46b2 <_nrk_scheduler+0x1a8>
    4654:	81 85       	ldd	r24, Z+9	; 0x09
    4656:	84 30       	cpi	r24, 0x04	; 4
    4658:	61 f1       	breq	.+88     	; 0x46b2 <_nrk_scheduler+0x1a8>
	{
		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    465a:	21 8d       	ldd	r18, Z+25	; 0x19
    465c:	32 8d       	ldd	r19, Z+26	; 0x1a
    465e:	80 91 99 04 	lds	r24, 0x0499
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	28 17       	cp	r18, r24
    4666:	39 07       	cpc	r19, r25
    4668:	50 f4       	brcc	.+20     	; 0x467e <_nrk_scheduler+0x174>
		{
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    466a:	82 e0       	ldi	r24, 0x02	; 2
    466c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
			nrk_cur_task_TCB->cpu_remaining=0;
    4670:	e0 91 30 05 	lds	r30, 0x0530
    4674:	f0 91 31 05 	lds	r31, 0x0531
    4678:	12 8e       	std	Z+26, r1	; 0x1a
    467a:	11 8e       	std	Z+25, r1	; 0x19
    467c:	04 c0       	rjmp	.+8      	; 0x4686 <_nrk_scheduler+0x17c>
		}else
			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    467e:	28 1b       	sub	r18, r24
    4680:	39 0b       	sbc	r19, r25
    4682:	32 8f       	std	Z+26, r19	; 0x1a
    4684:	21 8f       	std	Z+25, r18	; 0x19

		task_ID= nrk_cur_task_TCB->task_ID;
    4686:	e0 91 30 05 	lds	r30, 0x0530
    468a:	f0 91 31 05 	lds	r31, 0x0531
    468e:	10 85       	ldd	r17, Z+8	; 0x08

		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
    4690:	81 8d       	ldd	r24, Z+25	; 0x19
    4692:	92 8d       	ldd	r25, Z+26	; 0x1a
    4694:	00 97       	sbiw	r24, 0x00	; 0
    4696:	69 f4       	brne	.+26     	; 0x46b2 <_nrk_scheduler+0x1a8>
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4698:	83 e0       	ldi	r24, 0x03	; 3
    469a:	61 2f       	mov	r22, r17
    469c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
			nrk_cur_task_TCB->task_state = SUSPENDED;
    46a0:	e0 91 30 05 	lds	r30, 0x0530
    46a4:	f0 91 31 05 	lds	r31, 0x0531
    46a8:	83 e0       	ldi	r24, 0x03	; 3
    46aa:	81 87       	std	Z+9, r24	; 0x09
			nrk_rem_from_readyQ(task_ID);
    46ac:	81 2f       	mov	r24, r17
    46ae:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <nrk_rem_from_readyQ>
    46b2:	cc eb       	ldi	r28, 0xBC	; 188
    46b4:	d4 e0       	ldi	r29, 0x04	; 4
    46b6:	a0 e6       	ldi	r26, 0x60	; 96
    46b8:	ea 2e       	mov	r14, r26
    46ba:	aa ee       	ldi	r26, 0xEA	; 234
    46bc:	fa 2e       	mov	r15, r26
    46be:	10 e0       	ldi	r17, 0x00	; 0
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
					nrk_task_TCB[task_ID].num_periods=1;
    46c0:	f1 e0       	ldi	r31, 0x01	; 1
    46c2:	cf 2e       	mov	r12, r31
    46c4:	d1 2c       	mov	r13, r1
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    46c6:	ea ef       	ldi	r30, 0xFA	; 250
    46c8:	ae 2e       	mov	r10, r30
    46ca:	b1 2c       	mov	r11, r1
				nrk_task_TCB[task_ID].nw_flag=0;
				nrk_task_TCB[task_ID].suspend_flag=0;
				if(nrk_task_TCB[task_ID].num_periods==1) 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					nrk_task_TCB[task_ID].task_state = READY;
    46cc:	02 e0       	ldi	r16, 0x02	; 2
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    46ce:	71 e0       	ldi	r23, 0x01	; 1
    46d0:	67 2e       	mov	r6, r23
    46d2:	71 2c       	mov	r7, r1
    46d4:	81 2c       	mov	r8, r1
    46d6:	91 2c       	mov	r9, r1
	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    46d8:	8b 81       	ldd	r24, Y+3	; 0x03
    46da:	8f 3f       	cpi	r24, 0xFF	; 255
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <_nrk_scheduler+0x1d6>
    46de:	87 c0       	rjmp	.+270    	; 0x47ee <_nrk_scheduler+0x2e4>
		nrk_task_TCB[task_ID].suspend_flag=0;
    46e0:	18 82       	st	Y, r1
		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    46e2:	88 23       	and	r24, r24
    46e4:	69 f1       	breq	.+90     	; 0x4740 <_nrk_scheduler+0x236>
    46e6:	8c 81       	ldd	r24, Y+4	; 0x04
    46e8:	84 30       	cpi	r24, 0x04	; 4
    46ea:	51 f1       	breq	.+84     	; 0x4740 <_nrk_scheduler+0x236>
		{
			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    46ec:	28 89       	ldd	r18, Y+16	; 0x10
    46ee:	39 89       	ldd	r19, Y+17	; 0x11
    46f0:	80 91 99 04 	lds	r24, 0x0499
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	28 17       	cp	r18, r24
    46f8:	39 07       	cpc	r19, r25
    46fa:	28 f0       	brcs	.+10     	; 0x4706 <_nrk_scheduler+0x1fc>
				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    46fc:	28 1b       	sub	r18, r24
    46fe:	39 0b       	sbc	r19, r25
    4700:	39 8b       	std	Y+17, r19	; 0x11
    4702:	28 8b       	std	Y+16, r18	; 0x10
    4704:	02 c0       	rjmp	.+4      	; 0x470a <_nrk_scheduler+0x200>
			else {
				nrk_task_TCB[task_ID].next_wakeup=0;
    4706:	19 8a       	std	Y+17, r1	; 0x11
    4708:	18 8a       	std	Y+16, r1	; 0x10
			}
			// Do next period book keeping.
			// next_period needs to be set such that the period is kept consistent even if other
			// wait until functions are called.
			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    470a:	6a 89       	ldd	r22, Y+18	; 0x12
    470c:	7b 89       	ldd	r23, Y+19	; 0x13
    470e:	68 17       	cp	r22, r24
    4710:	79 07       	cpc	r23, r25
    4712:	28 f4       	brcc	.+10     	; 0x471e <_nrk_scheduler+0x214>
				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
			else {
				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4714:	6e 89       	ldd	r22, Y+22	; 0x16
    4716:	7f 89       	ldd	r23, Y+23	; 0x17
    4718:	86 17       	cp	r24, r22
    471a:	97 07       	cpc	r25, r23
    471c:	28 f4       	brcc	.+10     	; 0x4728 <_nrk_scheduler+0x21e>
					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    471e:	68 1b       	sub	r22, r24
    4720:	79 0b       	sbc	r23, r25
    4722:	7b 8b       	std	Y+19, r23	; 0x13
    4724:	6a 8b       	std	Y+18, r22	; 0x12
    4726:	04 c0       	rjmp	.+8      	; 0x4730 <_nrk_scheduler+0x226>
				else
					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4728:	0e 94 9f 28 	call	0x513e	; 0x513e <__udivmodhi4>
    472c:	9b 8b       	std	Y+19, r25	; 0x13
    472e:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4730:	8a 89       	ldd	r24, Y+18	; 0x12
    4732:	9b 89       	ldd	r25, Y+19	; 0x13
    4734:	00 97       	sbiw	r24, 0x00	; 0
    4736:	21 f4       	brne	.+8      	; 0x4740 <_nrk_scheduler+0x236>
    4738:	8e 89       	ldd	r24, Y+22	; 0x16
    473a:	9f 89       	ldd	r25, Y+23	; 0x17
    473c:	9b 8b       	std	Y+19, r25	; 0x13
    473e:	8a 8b       	std	Y+18, r24	; 0x12
					
		}


		// Look for Next Task that Might Wakeup to interrupt current task
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
    4740:	8c 81       	ldd	r24, Y+4	; 0x04
    4742:	83 30       	cpi	r24, 0x03	; 3
    4744:	09 f0       	breq	.+2      	; 0x4748 <_nrk_scheduler+0x23e>
    4746:	53 c0       	rjmp	.+166    	; 0x47ee <_nrk_scheduler+0x2e4>
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
    4748:	88 89       	ldd	r24, Y+16	; 0x10
    474a:	99 89       	ldd	r25, Y+17	; 0x11
    474c:	00 97       	sbiw	r24, 0x00	; 0
    474e:	09 f0       	breq	.+2      	; 0x4752 <_nrk_scheduler+0x248>
    4750:	46 c0       	rjmp	.+140    	; 0x47de <_nrk_scheduler+0x2d4>
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4752:	8a 81       	ldd	r24, Y+2	; 0x02
    4754:	88 23       	and	r24, r24
    4756:	91 f0       	breq	.+36     	; 0x477c <_nrk_scheduler+0x272>
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	88 23       	and	r24, r24
    475c:	79 f0       	breq	.+30     	; 0x477c <_nrk_scheduler+0x272>
    475e:	d4 01       	movw	r26, r8
    4760:	c3 01       	movw	r24, r6
    4762:	00 90 20 05 	lds	r0, 0x0520
    4766:	04 c0       	rjmp	.+8      	; 0x4770 <_nrk_scheduler+0x266>
    4768:	88 0f       	add	r24, r24
    476a:	99 1f       	adc	r25, r25
    476c:	aa 1f       	adc	r26, r26
    476e:	bb 1f       	adc	r27, r27
    4770:	0a 94       	dec	r0
    4772:	d2 f7       	brpl	.-12     	; 0x4768 <_nrk_scheduler+0x25e>
    4774:	8c 87       	std	Y+12, r24	; 0x0c
    4776:	9d 87       	std	Y+13, r25	; 0x0d
    4778:	ae 87       	std	Y+14, r26	; 0x0e
    477a:	bf 87       	std	Y+15, r27	; 0x0f
				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
				nrk_task_TCB[task_ID].event_suspend=0;
    477c:	1a 82       	std	Y+2, r1	; 0x02
				nrk_task_TCB[task_ID].nw_flag=0;
    477e:	19 82       	std	Y+1, r1	; 0x01
				nrk_task_TCB[task_ID].suspend_flag=0;
    4780:	18 82       	st	Y, r1
				if(nrk_task_TCB[task_ID].num_periods==1) 
    4782:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4784:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4786:	8e 89       	ldd	r24, Y+22	; 0x16
    4788:	9f 89       	ldd	r25, Y+23	; 0x17
    478a:	48 8d       	ldd	r20, Y+24	; 0x18
    478c:	59 8d       	ldd	r21, Y+25	; 0x19
    478e:	21 30       	cpi	r18, 0x01	; 1
    4790:	31 05       	cpc	r19, r1
    4792:	79 f4       	brne	.+30     	; 0x47b2 <_nrk_scheduler+0x2a8>
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4794:	5d 8b       	std	Y+21, r21	; 0x15
    4796:	4c 8b       	std	Y+20, r20	; 0x14
					nrk_task_TCB[task_ID].task_state = READY;
    4798:	0c 83       	std	Y+4, r16	; 0x04
					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    479a:	2a 89       	ldd	r18, Y+18	; 0x12
    479c:	3b 89       	ldd	r19, Y+19	; 0x13
    479e:	39 8b       	std	Y+17, r19	; 0x11
    47a0:	28 8b       	std	Y+16, r18	; 0x10
					// If there is no period set, don't wakeup periodically
					if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    47a2:	00 97       	sbiw	r24, 0x00	; 0
    47a4:	11 f4       	brne	.+4      	; 0x47aa <_nrk_scheduler+0x2a0>
    47a6:	b9 8a       	std	Y+17, r11	; 0x11
    47a8:	a8 8a       	std	Y+16, r10	; 0x10
					nrk_add_to_readyQ(task_ID);				
    47aa:	81 2f       	mov	r24, r17
    47ac:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_add_to_readyQ>
    47b0:	16 c0       	rjmp	.+44     	; 0x47de <_nrk_scheduler+0x2d4>
				} else 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    47b2:	5d 8b       	std	Y+21, r21	; 0x15
    47b4:	4c 8b       	std	Y+20, r20	; 0x14
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    47b6:	21 50       	subi	r18, 0x01	; 1
    47b8:	30 40       	sbci	r19, 0x00	; 0
    47ba:	a9 01       	movw	r20, r18
    47bc:	48 9f       	mul	r20, r24
    47be:	90 01       	movw	r18, r0
    47c0:	49 9f       	mul	r20, r25
    47c2:	30 0d       	add	r19, r0
    47c4:	58 9f       	mul	r21, r24
    47c6:	30 0d       	add	r19, r0
    47c8:	11 24       	eor	r1, r1
    47ca:	39 8b       	std	Y+17, r19	; 0x11
    47cc:	28 8b       	std	Y+16, r18	; 0x10
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    47ce:	3b 8b       	std	Y+19, r19	; 0x13
    47d0:	2a 8b       	std	Y+18, r18	; 0x12
					if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    47d2:	00 97       	sbiw	r24, 0x00	; 0
    47d4:	11 f4       	brne	.+4      	; 0x47da <_nrk_scheduler+0x2d0>
    47d6:	b9 8a       	std	Y+17, r11	; 0x11
    47d8:	a8 8a       	std	Y+16, r10	; 0x10
					nrk_task_TCB[task_ID].num_periods=1;
    47da:	db 8e       	std	Y+27, r13	; 0x1b
    47dc:	ca 8e       	std	Y+26, r12	; 0x1a
		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
		//			nrk_task_TCB[task_ID].num_periods=1; 
				}
			}

			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
    47de:	28 88       	ldd	r2, Y+16	; 0x10
    47e0:	39 88       	ldd	r3, Y+17	; 0x11
    47e2:	21 14       	cp	r2, r1
    47e4:	31 04       	cpc	r3, r1
    47e6:	19 f0       	breq	.+6      	; 0x47ee <_nrk_scheduler+0x2e4>
    47e8:	2e 14       	cp	r2, r14
    47ea:	3f 04       	cpc	r3, r15
    47ec:	08 f0       	brcs	.+2      	; 0x47f0 <_nrk_scheduler+0x2e6>
    47ee:	17 01       	movw	r2, r14

	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    47f0:	1f 5f       	subi	r17, 0xFF	; 255
    47f2:	a1 96       	adiw	r28, 0x21	; 33
    47f4:	13 30       	cpi	r17, 0x03	; 3
    47f6:	11 f0       	breq	.+4      	; 0x47fc <_nrk_scheduler+0x2f2>
    47f8:	71 01       	movw	r14, r2
    47fa:	6e cf       	rjmp	.-292    	; 0x46d8 <_nrk_scheduler+0x1ce>


	#ifdef NRK_STATS_TRACKER
		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
	#endif
	task_ID = nrk_get_high_ready_task_ID();  
    47fc:	0e 94 66 1c 	call	0x38cc	; 0x38cc <nrk_get_high_ready_task_ID>
    4800:	18 2f       	mov	r17, r24
	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4802:	99 27       	eor	r25, r25
    4804:	87 fd       	sbrc	r24, 7
    4806:	90 95       	com	r25
    4808:	fc 01       	movw	r30, r24
    480a:	65 e0       	ldi	r22, 0x05	; 5
    480c:	ee 0f       	add	r30, r30
    480e:	ff 1f       	adc	r31, r31
    4810:	6a 95       	dec	r22
    4812:	e1 f7       	brne	.-8      	; 0x480c <_nrk_scheduler+0x302>
    4814:	e8 0f       	add	r30, r24
    4816:	f9 1f       	adc	r31, r25
    4818:	e9 54       	subi	r30, 0x49	; 73
    481a:	fb 4f       	sbci	r31, 0xFB	; 251
    481c:	42 85       	ldd	r20, Z+10	; 0x0a
    481e:	40 93 32 05 	sts	0x0532, r20
	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4822:	81 e2       	ldi	r24, 0x21	; 33
    4824:	18 02       	muls	r17, r24
    4826:	c0 01       	movw	r24, r0
    4828:	11 24       	eor	r1, r1
    482a:	89 54       	subi	r24, 0x49	; 73
    482c:	9b 4f       	sbci	r25, 0xFB	; 251
    482e:	90 93 22 05 	sts	0x0522, r25
    4832:	80 93 21 05 	sts	0x0521, r24
	// task_ID holds the highest priority READY task ID
	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 

	// Now we pick the next wakeup (either the end of the current task, or the possible resume
	// of a suspended task) 
	if(task_ID!=NRK_IDLE_TASK_ID) 
    4836:	11 23       	and	r17, r17
    4838:	a1 f0       	breq	.+40     	; 0x4862 <_nrk_scheduler+0x358>
	{
		// You are a non-Idle Task
		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    483a:	25 8d       	ldd	r18, Z+29	; 0x1d
    483c:	36 8d       	ldd	r19, Z+30	; 0x1e
    483e:	21 15       	cp	r18, r1
    4840:	31 05       	cpc	r19, r1
    4842:	51 f0       	breq	.+20     	; 0x4858 <_nrk_scheduler+0x34e>
    4844:	21 8d       	ldd	r18, Z+25	; 0x19
    4846:	32 8d       	ldd	r19, Z+26	; 0x1a
    4848:	2a 3f       	cpi	r18, 0xFA	; 250
    484a:	31 05       	cpc	r19, r1
    484c:	28 f4       	brcc	.+10     	; 0x4858 <_nrk_scheduler+0x34e>
    484e:	22 15       	cp	r18, r2
    4850:	33 05       	cpc	r19, r3
    4852:	28 f5       	brcc	.+74     	; 0x489e <_nrk_scheduler+0x394>
    4854:	19 01       	movw	r2, r18
    4856:	23 c0       	rjmp	.+70     	; 0x489e <_nrk_scheduler+0x394>
    4858:	5b ef       	ldi	r21, 0xFB	; 251
    485a:	25 16       	cp	r2, r21
    485c:	31 04       	cpc	r3, r1
    485e:	f8 f0       	brcs	.+62     	; 0x489e <_nrk_scheduler+0x394>
    4860:	17 c0       	rjmp	.+46     	; 0x4890 <_nrk_scheduler+0x386>
		// Make sure you wake up from the idle task a little earlier
		// if you would go into deep sleep...
		// After waking from deep sleep, the next context swap must be at least
  		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
		#ifndef NRK_NO_POWER_DOWN	
		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
    4862:	a5 e1       	ldi	r26, 0x15	; 21
    4864:	2a 16       	cp	r2, r26
    4866:	31 04       	cpc	r3, r1
    4868:	d0 f0       	brcs	.+52     	; 0x489e <_nrk_scheduler+0x394>
		{
			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    486a:	91 01       	movw	r18, r2
    486c:	24 51       	subi	r18, 0x14	; 20
    486e:	30 40       	sbci	r19, 0x00	; 0
    4870:	2a 3f       	cpi	r18, 0xFA	; 250
    4872:	31 05       	cpc	r19, r1
    4874:	40 f4       	brcc	.+16     	; 0x4886 <_nrk_scheduler+0x37c>
    4876:	19 01       	movw	r2, r18
    4878:	23 31       	cpi	r18, 0x13	; 19
    487a:	31 05       	cpc	r19, r1
    487c:	80 f4       	brcc	.+32     	; 0x489e <_nrk_scheduler+0x394>
    487e:	53 e1       	ldi	r21, 0x13	; 19
    4880:	25 2e       	mov	r2, r21
    4882:	31 2c       	mov	r3, r1
    4884:	0c c0       	rjmp	.+24     	; 0x489e <_nrk_scheduler+0x394>
					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
				}
				else {
					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
				}
			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
    4886:	2e e0       	ldi	r18, 0x0E	; 14
    4888:	22 16       	cp	r2, r18
    488a:	21 e0       	ldi	r18, 0x01	; 1
    488c:	32 06       	cpc	r3, r18
    488e:	21 f0       	breq	.+8      	; 0x4898 <_nrk_scheduler+0x38e>
    4890:	3a ef       	ldi	r19, 0xFA	; 250
    4892:	23 2e       	mov	r2, r19
    4894:	31 2c       	mov	r3, r1
    4896:	03 c0       	rjmp	.+6      	; 0x489e <_nrk_scheduler+0x394>
    4898:	26 ee       	ldi	r18, 0xE6	; 230
    489a:	22 2e       	mov	r2, r18
    489c:	31 2c       	mov	r3, r1
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
	if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME; 
#endif
	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
	nrk_cur_task_prio = nrk_high_ready_prio;
    489e:	40 93 23 05 	sts	0x0523, r20
	nrk_cur_task_TCB  = nrk_high_ready_TCB;
    48a2:	90 93 31 05 	sts	0x0531, r25
    48a6:	80 93 30 05 	sts	0x0530, r24
		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
		}
	#endif
	//printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

	_nrk_prev_timer_val=next_wake;
    48aa:	20 92 99 04 	sts	0x0499, r2


	if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal? 
    48ae:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	01 96       	adiw	r24, 0x01	; 1
    48b6:	82 15       	cp	r24, r2
    48b8:	93 05       	cpc	r25, r3
    48ba:	50 f0       	brcs	.+20     	; 0x48d0 <_nrk_scheduler+0x3c6>
		if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
		#endif
		// This is bad news, but keeps things running
		// +2 just in case we are on the edge of the last tick
		next_wake=_nrk_os_timer_get()+2;
    48bc:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_nrk_os_timer_get>
    48c0:	28 2e       	mov	r2, r24
    48c2:	33 24       	eor	r3, r3
    48c4:	42 e0       	ldi	r20, 0x02	; 2
    48c6:	50 e0       	ldi	r21, 0x00	; 0
    48c8:	24 0e       	add	r2, r20
    48ca:	35 1e       	adc	r3, r21
		_nrk_prev_timer_val=next_wake;
    48cc:	20 92 99 04 	sts	0x0499, r2
	} 

	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    48d0:	11 23       	and	r17, r17
    48d2:	11 f0       	breq	.+4      	; 0x48d8 <_nrk_scheduler+0x3ce>
    48d4:	10 92 24 05 	sts	0x0524, r1
	
	_nrk_set_next_wakeup(next_wake);
    48d8:	82 2d       	mov	r24, r2
    48da:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <_nrk_set_next_wakeup>
	
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	// Bound Context Swap to 100us 
	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    48de:	c2 01       	movw	r24, r4
    48e0:	6e ee       	ldi	r22, 0xEE	; 238
    48e2:	72 e0       	ldi	r23, 0x02	; 2
    48e4:	0e 94 c2 24 	call	0x4984	; 0x4984 <nrk_high_speed_timer_wait>
#endif	
	nrk_stack_pointer_restore();
    48e8:	0e 94 d5 26 	call	0x4daa	; 0x4daa <nrk_stack_pointer_restore>
	//nrk_int_enable();
	nrk_start_high_ready_task();
    48ec:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <nrk_start_high_ready_task>

}
    48f0:	df 91       	pop	r29
    48f2:	cf 91       	pop	r28
    48f4:	1f 91       	pop	r17
    48f6:	0f 91       	pop	r16
    48f8:	ff 90       	pop	r15
    48fa:	ef 90       	pop	r14
    48fc:	df 90       	pop	r13
    48fe:	cf 90       	pop	r12
    4900:	bf 90       	pop	r11
    4902:	af 90       	pop	r10
    4904:	9f 90       	pop	r9
    4906:	8f 90       	pop	r8
    4908:	7f 90       	pop	r7
    490a:	6f 90       	pop	r6
    490c:	5f 90       	pop	r5
    490e:	4f 90       	pop	r4
    4910:	3f 90       	pop	r3
    4912:	2f 90       	pop	r2
    4914:	08 95       	ret

00004916 <nrk_spin_wait_us>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    491e:	01 97       	sbiw	r24, 0x01	; 1
    4920:	d1 f7       	brne	.-12     	; 0x4916 <nrk_spin_wait_us>

}
    4922:	08 95       	ret

00004924 <_nrk_setup_timer>:
void _nrk_setup_timer() {
	int32_t temp=0;
  _nrk_prev_timer_val=254;
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS0);
    4924:	88 e0       	ldi	r24, 0x08	; 8
    4926:	80 bf       	out	0x30, r24	; 48
  OCR0 = _nrk_prev_timer_val;
    4928:	8e ef       	ldi	r24, 0xFE	; 254
    492a:	81 bf       	out	0x31, r24	; 49
  TIFR =   BM(OCF0) | BM(TOV0);       // Clear interrupt flag
    492c:	23 e0       	ldi	r18, 0x03	; 3
    492e:	26 bf       	out	0x36, r18	; 54
 // TIMSK =  BM(OCIE0) | BM(TOIE0) ;//| BM(TICIE1);    // Enable interrupt
  //TCCR0 = BM(WGM01) | BM(CS02) | BM(CS00); //|      // reset counter on interrupt, set divider to 128
  TCCR0 = BM(WGM01) | BM(CS01) | BM(CS00); //|      // reset counter on interrupt, set divider to 128
    4930:	8b e0       	ldi	r24, 0x0B	; 11
    4932:	83 bf       	out	0x33, r24	; 51
  SFIOR |= TSM;              // reset prescaler
    4934:	90 b5       	in	r25, 0x20	; 32
    4936:	97 60       	ori	r25, 0x07	; 7
    4938:	90 bd       	out	0x20, r25	; 32

  // Clear interrupt flag
  TIFR =   BM(OCF0) | BM(TOV0);       
    493a:	26 bf       	out	0x36, r18	; 54
  // reset counter on interrupt, set divider to 128
  TCCR0 = BM(WGM01) | BM(CS01) | BM(CS00); 
    493c:	83 bf       	out	0x33, r24	; 51
  // reset prescaler
  SFIOR |= TSM;              
    493e:	90 b5       	in	r25, 0x20	; 32
    4940:	97 60       	ori	r25, 0x07	; 7
    4942:	90 bd       	out	0x20, r25	; 32

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4944:	1f bc       	out	0x2f, r1	; 47
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4946:	91 e0       	ldi	r25, 0x01	; 1
    4948:	9e bd       	out	0x2e, r25	; 46
  TCNT1=0;  // 16 bit
    494a:	1d bc       	out	0x2d, r1	; 45
    494c:	1c bc       	out	0x2c, r1	; 44
  SFIOR |= BM(PSR321);              // reset prescaler
    494e:	90 b5       	in	r25, 0x20	; 32
    4950:	91 60       	ori	r25, 0x01	; 1
    4952:	90 bd       	out	0x20, r25	; 32
}

inline void _nrk_os_timer_reset()
{

    SFIOR |= BM(PSR0);              // reset prescaler
    4954:	90 b5       	in	r25, 0x20	; 32
    4956:	92 60       	ori	r25, 0x02	; 2
    4958:	90 bd       	out	0x20, r25	; 32
    TCNT0 = 0;                  // reset counter
    495a:	12 be       	out	0x32, r1	; 50
    _nrk_time_trigger=0;
    _nrk_prev_timer_val=0;
    495c:	10 92 99 04 	sts	0x0499, r1
  //ASSR = 0;
}
                                 //must also include timer3 
void _nrk_os_timer_start()
{
  TCCR0 = BM(WGM01) | BM(CS01) | BM(CS00); // set divider to 32 
    4960:	83 bf       	out	0x33, r24	; 51
  TIMSK =  TIMSK| BM(OCIE0) | BM(TOIE0) ;//| BM(TICIE1);    // Enable interrupt
    4962:	87 b7       	in	r24, 0x37	; 55
    4964:	83 60       	ori	r24, 0x03	; 3
    4966:	87 bf       	out	0x37, r24	; 55
  TCNT1=0;  // 16 bit
  SFIOR |= BM(PSR321);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_os_timer_start();
  _nrk_time_trigger=0;
    4968:	10 92 97 04 	sts	0x0497, r1
}
    496c:	08 95       	ret

0000496e <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    496e:	1e bc       	out	0x2e, r1	; 46
}
    4970:	08 95       	ret

00004972 <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	8e bd       	out	0x2e, r24	; 46
}
    4976:	08 95       	ret

00004978 <_nrk_high_speed_timer_reset>:


void _nrk_high_speed_timer_reset()
{
  //nrk_int_disable();
  SFIOR |= BM(PSR321);              // reset prescaler
    4978:	80 b5       	in	r24, 0x20	; 32
    497a:	81 60       	ori	r24, 0x01	; 1
    497c:	80 bd       	out	0x20, r24	; 32
  TCNT1=0;
    497e:	1d bc       	out	0x2d, r1	; 45
    4980:	1c bc       	out	0x2c, r1	; 44
  //nrk_int_enable();
}
    4982:	08 95       	ret

00004984 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4984:	ef 92       	push	r14
    4986:	ff 92       	push	r15
    4988:	0f 93       	push	r16
    498a:	1f 93       	push	r17
    498c:	df 93       	push	r29
    498e:	cf 93       	push	r28
    4990:	00 d0       	rcall	.+0      	; 0x4992 <nrk_high_speed_timer_wait+0xe>
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
uint32_t tmp;
if(start>65400) start=0;
    4996:	2f ef       	ldi	r18, 0xFF	; 255
    4998:	89 37       	cpi	r24, 0x79	; 121
    499a:	92 07       	cpc	r25, r18
    499c:	10 f0       	brcs	.+4      	; 0x49a2 <nrk_high_speed_timer_wait+0x1e>
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	90 e0       	ldi	r25, 0x00	; 0
tmp=(uint32_t)start+(uint32_t)ticks;
    49a2:	9c 01       	movw	r18, r24
    49a4:	40 e0       	ldi	r20, 0x00	; 0
    49a6:	50 e0       	ldi	r21, 0x00	; 0
    49a8:	7b 01       	movw	r14, r22
    49aa:	00 e0       	ldi	r16, 0x00	; 0
    49ac:	10 e0       	ldi	r17, 0x00	; 0
    49ae:	2e 0d       	add	r18, r14
    49b0:	3f 1d       	adc	r19, r15
    49b2:	40 1f       	adc	r20, r16
    49b4:	51 1f       	adc	r21, r17
if(tmp>65536) 
    49b6:	21 30       	cpi	r18, 0x01	; 1
    49b8:	60 e0       	ldi	r22, 0x00	; 0
    49ba:	36 07       	cpc	r19, r22
    49bc:	61 e0       	ldi	r22, 0x01	; 1
    49be:	46 07       	cpc	r20, r22
    49c0:	60 e0       	ldi	r22, 0x00	; 0
    49c2:	56 07       	cpc	r21, r22
    49c4:	68 f0       	brcs	.+26     	; 0x49e0 <nrk_high_speed_timer_wait+0x5c>

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    49c6:	6c b5       	in	r22, 0x2c	; 44
    49c8:	7d b5       	in	r23, 0x2d	; 45
    49ca:	7a 83       	std	Y+2, r23	; 0x02
    49cc:	69 83       	std	Y+1, r22	; 0x01
  //nrk_int_enable();
  return tmp;
    49ce:	69 81       	ldd	r22, Y+1	; 0x01
    49d0:	7a 81       	ldd	r23, Y+2	; 0x02
if(start>65400) start=0;
tmp=(uint32_t)start+(uint32_t)ticks;
if(tmp>65536) 
	{
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
    49d2:	86 17       	cp	r24, r22
    49d4:	97 07       	cpc	r25, r23
    49d6:	b8 f3       	brcs	.-18     	; 0x49c6 <nrk_high_speed_timer_wait+0x42>
uint32_t tmp;
if(start>65400) start=0;
tmp=(uint32_t)start+(uint32_t)ticks;
if(tmp>65536) 
	{
	tmp-=65536;
    49d8:	20 50       	subi	r18, 0x00	; 0
    49da:	30 40       	sbci	r19, 0x00	; 0
    49dc:	41 40       	sbci	r20, 0x01	; 1
    49de:	50 40       	sbci	r21, 0x00	; 0

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    49e0:	8c b5       	in	r24, 0x2c	; 44
    49e2:	9d b5       	in	r25, 0x2d	; 45
    49e4:	9a 83       	std	Y+2, r25	; 0x02
    49e6:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    49e8:	89 81       	ldd	r24, Y+1	; 0x01
    49ea:	9a 81       	ldd	r25, Y+2	; 0x02
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    49ec:	82 17       	cp	r24, r18
    49ee:	93 07       	cpc	r25, r19
    49f0:	b8 f3       	brcs	.-18     	; 0x49e0 <nrk_high_speed_timer_wait+0x5c>
}
    49f2:	0f 90       	pop	r0
    49f4:	0f 90       	pop	r0
    49f6:	cf 91       	pop	r28
    49f8:	df 91       	pop	r29
    49fa:	1f 91       	pop	r17
    49fc:	0f 91       	pop	r16
    49fe:	ff 90       	pop	r15
    4a00:	ef 90       	pop	r14
    4a02:	08 95       	ret

00004a04 <_nrk_high_speed_timer_get>:

inline uint16_t _nrk_high_speed_timer_get()
{
    4a04:	df 93       	push	r29
    4a06:	cf 93       	push	r28
    4a08:	00 d0       	rcall	.+0      	; 0x4a0a <_nrk_high_speed_timer_get+0x6>
    4a0a:	cd b7       	in	r28, 0x3d	; 61
    4a0c:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4a0e:	8c b5       	in	r24, 0x2c	; 44
    4a10:	9d b5       	in	r25, 0x2d	; 45
    4a12:	9a 83       	std	Y+2, r25	; 0x02
    4a14:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4a16:	29 81       	ldd	r18, Y+1	; 0x01
    4a18:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4a1a:	c9 01       	movw	r24, r18
    4a1c:	0f 90       	pop	r0
    4a1e:	0f 90       	pop	r0
    4a20:	cf 91       	pop	r28
    4a22:	df 91       	pop	r29
    4a24:	08 95       	ret

00004a26 <_nrk_os_timer_set>:

void _nrk_os_timer_set(uint8_t v)
{
TCNT0=v;
    4a26:	82 bf       	out	0x32, r24	; 50
}
    4a28:	08 95       	ret

00004a2a <_nrk_os_timer_stop>:


void _nrk_os_timer_stop()
{
  TCCR0 = 0;  // stop clock 
    4a2a:	13 be       	out	0x33, r1	; 51
  TIMSK &=  ~BM(OCIE0) ;
    4a2c:	87 b7       	in	r24, 0x37	; 55
    4a2e:	8d 7f       	andi	r24, 0xFD	; 253
    4a30:	87 bf       	out	0x37, r24	; 55
  TIMSK &=  ~BM(TOIE0) ;
    4a32:	87 b7       	in	r24, 0x37	; 55
    4a34:	8e 7f       	andi	r24, 0xFE	; 254
    4a36:	87 bf       	out	0x37, r24	; 55
  //ASSR = 0;
}
    4a38:	08 95       	ret

00004a3a <_nrk_os_timer_start>:
                                 //must also include timer3 
void _nrk_os_timer_start()
{
  TCCR0 = BM(WGM01) | BM(CS01) | BM(CS00); // set divider to 32 
    4a3a:	8b e0       	ldi	r24, 0x0B	; 11
    4a3c:	83 bf       	out	0x33, r24	; 51
  TIMSK =  TIMSK| BM(OCIE0) | BM(TOIE0) ;//| BM(TICIE1);    // Enable interrupt
    4a3e:	87 b7       	in	r24, 0x37	; 55
    4a40:	83 60       	ori	r24, 0x03	; 3
    4a42:	87 bf       	out	0x37, r24	; 55
}
    4a44:	08 95       	ret

00004a46 <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    SFIOR |= BM(PSR0);              // reset prescaler
    4a46:	80 b5       	in	r24, 0x20	; 32
    4a48:	82 60       	ori	r24, 0x02	; 2
    4a4a:	80 bd       	out	0x20, r24	; 32
    TCNT0 = 0;                  // reset counter
    4a4c:	12 be       	out	0x32, r1	; 50
    _nrk_time_trigger=0;
    4a4e:	10 92 97 04 	sts	0x0497, r1
    _nrk_prev_timer_val=0;
    4a52:	10 92 99 04 	sts	0x0499, r1
}
    4a56:	08 95       	ret

00004a58 <_nrk_get_next_wakeup>:


uint8_t _nrk_get_next_wakeup()
{
	return OCR0+1;
    4a58:	81 b7       	in	r24, 0x31	; 49
}
    4a5a:	8f 5f       	subi	r24, 0xFF	; 255
    4a5c:	08 95       	ret

00004a5e <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR0 = nw-1;
    4a5e:	81 50       	subi	r24, 0x01	; 1
    4a60:	81 bf       	out	0x31, r24	; 49
}
    4a62:	08 95       	ret

00004a64 <_nrk_os_timer_get>:



inline uint8_t _nrk_os_timer_get()
{
  return TCNT0;
    4a64:	82 b7       	in	r24, 0x32	; 50
}
    4a66:	08 95       	ret

00004a68 <__vector_15>:
} 

// This is the SUSPEND for the OS timer Tick
void SIG_OUTPUT_COMPARE0( void ) __attribute__ ( ( signal,naked ));
void SIG_OUTPUT_COMPARE0(void) {
   asm volatile (
    4a68:	0f 92       	push	r0
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	0f 92       	push	r0
    4a6e:	1f 92       	push	r1
    4a70:	2f 92       	push	r2
    4a72:	3f 92       	push	r3
    4a74:	4f 92       	push	r4
    4a76:	5f 92       	push	r5
    4a78:	6f 92       	push	r6
    4a7a:	7f 92       	push	r7
    4a7c:	8f 92       	push	r8
    4a7e:	9f 92       	push	r9
    4a80:	af 92       	push	r10
    4a82:	bf 92       	push	r11
    4a84:	cf 92       	push	r12
    4a86:	df 92       	push	r13
    4a88:	ef 92       	push	r14
    4a8a:	ff 92       	push	r15
    4a8c:	0f 93       	push	r16
    4a8e:	1f 93       	push	r17
    4a90:	2f 93       	push	r18
    4a92:	3f 93       	push	r19
    4a94:	4f 93       	push	r20
    4a96:	5f 93       	push	r21
    4a98:	6f 93       	push	r22
    4a9a:	7f 93       	push	r23
    4a9c:	8f 93       	push	r24
    4a9e:	9f 93       	push	r25
    4aa0:	af 93       	push	r26
    4aa2:	bf 93       	push	r27
    4aa4:	cf 93       	push	r28
    4aa6:	df 93       	push	r29
    4aa8:	ef 93       	push	r30
    4aaa:	ff 93       	push	r31
    4aac:	a0 91 30 05 	lds	r26, 0x0530
    4ab0:	b0 91 31 05 	lds	r27, 0x0531
    4ab4:	0d b6       	in	r0, 0x3d	; 61
    4ab6:	0d 92       	st	X+, r0
    4ab8:	0e b6       	in	r0, 0x3e	; 62
    4aba:	0d 92       	st	X+, r0
    4abc:	1f 92       	push	r1
    4abe:	a0 91 71 03 	lds	r26, 0x0371
    4ac2:	b0 91 72 03 	lds	r27, 0x0372
    4ac6:	1e 90       	ld	r1, -X
    4ac8:	be bf       	out	0x3e, r27	; 62
    4aca:	ad bf       	out	0x3d, r26	; 61
    4acc:	08 95       	ret

00004ace <nrk_timer_int_stop>:
*/


int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4ace:	88 23       	and	r24, r24
    4ad0:	19 f4       	brne	.+6      	; 0x4ad8 <nrk_timer_int_stop+0xa>
	{
	TIMSK &= ~(BM(OCIE2));
    4ad2:	87 b7       	in	r24, 0x37	; 55
    4ad4:	8f 77       	andi	r24, 0x7F	; 127
    4ad6:	87 bf       	out	0x37, r24	; 55
	}
return NRK_ERROR;
}
    4ad8:	8f ef       	ldi	r24, 0xFF	; 255
    4ada:	08 95       	ret

00004adc <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4adc:	88 23       	and	r24, r24
    4ade:	11 f0       	breq	.+4      	; 0x4ae4 <nrk_timer_int_reset+0x8>
    4ae0:	8f ef       	ldi	r24, 0xFF	; 255
    4ae2:	08 95       	ret
	{
	TCNT2=0;
    4ae4:	14 bc       	out	0x24, r1	; 36
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    4ae8:	08 95       	ret

00004aea <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4aea:	88 23       	and	r24, r24
    4aec:	19 f0       	breq	.+6      	; 0x4af4 <nrk_timer_int_read+0xa>
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	02 c0       	rjmp	.+4      	; 0x4af8 <nrk_timer_int_read+0xe>
	{
	return TCNT2;
    4af4:	24 b5       	in	r18, 0x24	; 36
    4af6:	30 e0       	ldi	r19, 0x00	; 0
	}
return 0;

}
    4af8:	c9 01       	movw	r24, r18
    4afa:	08 95       	ret

00004afc <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4afc:	88 23       	and	r24, r24
    4afe:	11 f0       	breq	.+4      	; 0x4b04 <nrk_timer_int_start+0x8>
    4b00:	8f ef       	ldi	r24, 0xFF	; 255
    4b02:	08 95       	ret
	{
	TIMSK |= BM(OCIE2);
    4b04:	87 b7       	in	r24, 0x37	; 55
    4b06:	80 68       	ori	r24, 0x80	; 128
    4b08:	87 bf       	out	0x37, r24	; 55
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    4b0c:	08 95       	ret

00004b0e <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4b0e:	88 23       	and	r24, r24
    4b10:	11 f0       	breq	.+4      	; 0x4b16 <nrk_timer_int_configure+0x8>
    4b12:	8f ef       	ldi	r24, 0xFF	; 255
    4b14:	08 95       	ret
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4b16:	cb 01       	movw	r24, r22
    4b18:	01 97       	sbiw	r24, 0x01	; 1
    4b1a:	85 30       	cpi	r24, 0x05	; 5
    4b1c:	91 05       	cpc	r25, r1
    4b1e:	10 f4       	brcc	.+4      	; 0x4b24 <nrk_timer_int_configure+0x16>
    4b20:	60 93 98 04 	sts	0x0498, r22
	TCCR2 = BM(WGM32);  // Automatic restart on compare, count up
    4b24:	88 e0       	ldi	r24, 0x08	; 8
    4b26:	85 bd       	out	0x25, r24	; 37
  	OCR2 = (compare_value & 0xFF );
    4b28:	43 bd       	out	0x23, r20	; 35
	app_timer0_callback=callback_func;
    4b2a:	30 93 96 04 	sts	0x0496, r19
    4b2e:	20 93 95 04 	sts	0x0495, r18
	if(app_timer0_prescale==1) TCCR2 |= BM(CS30);  
    4b32:	80 91 98 04 	lds	r24, 0x0498
    4b36:	81 30       	cpi	r24, 0x01	; 1
    4b38:	19 f4       	brne	.+6      	; 0x4b40 <nrk_timer_int_configure+0x32>
    4b3a:	85 b5       	in	r24, 0x25	; 37
    4b3c:	81 60       	ori	r24, 0x01	; 1
    4b3e:	09 c0       	rjmp	.+18     	; 0x4b52 <nrk_timer_int_configure+0x44>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR2 |= BM(CS31); 
    4b40:	82 30       	cpi	r24, 0x02	; 2
    4b42:	19 f4       	brne	.+6      	; 0x4b4a <nrk_timer_int_configure+0x3c>
    4b44:	85 b5       	in	r24, 0x25	; 37
    4b46:	82 60       	ori	r24, 0x02	; 2
    4b48:	04 c0       	rjmp	.+8      	; 0x4b52 <nrk_timer_int_configure+0x44>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR2 |= BM(CS31) | BM(CS30);  
    4b4a:	83 30       	cpi	r24, 0x03	; 3
    4b4c:	21 f4       	brne	.+8      	; 0x4b56 <nrk_timer_int_configure+0x48>
    4b4e:	85 b5       	in	r24, 0x25	; 37
    4b50:	83 60       	ori	r24, 0x03	; 3
    4b52:	85 bd       	out	0x25, r24	; 37
    4b54:	07 c0       	rjmp	.+14     	; 0x4b64 <nrk_timer_int_configure+0x56>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR2 |= BM(CS32) ;  
    4b56:	84 30       	cpi	r24, 0x04	; 4
    4b58:	19 f4       	brne	.+6      	; 0x4b60 <nrk_timer_int_configure+0x52>
    4b5a:	85 b5       	in	r24, 0x25	; 37
    4b5c:	84 60       	ori	r24, 0x04	; 4
    4b5e:	f9 cf       	rjmp	.-14     	; 0x4b52 <nrk_timer_int_configure+0x44>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR2 |= BM(CS32) | BM(CS30);  
    4b60:	85 30       	cpi	r24, 0x05	; 5
    4b62:	11 f0       	breq	.+4      	; 0x4b68 <nrk_timer_int_configure+0x5a>
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	08 95       	ret
    4b68:	85 b5       	in	r24, 0x25	; 37
    4b6a:	85 60       	ori	r24, 0x05	; 5
    4b6c:	85 bd       	out	0x25, r24	; 37
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
}
    4b70:	08 95       	ret

00004b72 <__vector_9>:


SIGNAL(TIMER2_COMP_vect) {
    4b72:	1f 92       	push	r1
    4b74:	0f 92       	push	r0
    4b76:	0f b6       	in	r0, 0x3f	; 63
    4b78:	0f 92       	push	r0
    4b7a:	0b b6       	in	r0, 0x3b	; 59
    4b7c:	0f 92       	push	r0
    4b7e:	11 24       	eor	r1, r1
    4b80:	2f 93       	push	r18
    4b82:	3f 93       	push	r19
    4b84:	4f 93       	push	r20
    4b86:	5f 93       	push	r21
    4b88:	6f 93       	push	r22
    4b8a:	7f 93       	push	r23
    4b8c:	8f 93       	push	r24
    4b8e:	9f 93       	push	r25
    4b90:	af 93       	push	r26
    4b92:	bf 93       	push	r27
    4b94:	ef 93       	push	r30
    4b96:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4b98:	e0 91 95 04 	lds	r30, 0x0495
    4b9c:	f0 91 96 04 	lds	r31, 0x0496
    4ba0:	30 97       	sbiw	r30, 0x00	; 0
    4ba2:	11 f0       	breq	.+4      	; 0x4ba8 <__vector_9+0x36>
    4ba4:	09 95       	icall
    4ba6:	04 c0       	rjmp	.+8      	; 0x4bb0 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4ba8:	8a e0       	ldi	r24, 0x0A	; 10
    4baa:	60 e0       	ldi	r22, 0x00	; 0
    4bac:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
	return;  	
}
    4bb0:	ff 91       	pop	r31
    4bb2:	ef 91       	pop	r30
    4bb4:	bf 91       	pop	r27
    4bb6:	af 91       	pop	r26
    4bb8:	9f 91       	pop	r25
    4bba:	8f 91       	pop	r24
    4bbc:	7f 91       	pop	r23
    4bbe:	6f 91       	pop	r22
    4bc0:	5f 91       	pop	r21
    4bc2:	4f 91       	pop	r20
    4bc4:	3f 91       	pop	r19
    4bc6:	2f 91       	pop	r18
    4bc8:	0f 90       	pop	r0
    4bca:	0b be       	out	0x3b, r0	; 59
    4bcc:	0f 90       	pop	r0
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	0f 90       	pop	r0
    4bd2:	1f 90       	pop	r1
    4bd4:	18 95       	reti

00004bd6 <__vector_default>:
}

//-------------------------------------------------------------------------------------------------------
//  Default ISR 
//-------------------------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4bd6:	1f 92       	push	r1
    4bd8:	0f 92       	push	r0
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	0f 92       	push	r0
    4bde:	0b b6       	in	r0, 0x3b	; 59
    4be0:	0f 92       	push	r0
    4be2:	11 24       	eor	r1, r1
    4be4:	2f 93       	push	r18
    4be6:	3f 93       	push	r19
    4be8:	4f 93       	push	r20
    4bea:	5f 93       	push	r21
    4bec:	6f 93       	push	r22
    4bee:	7f 93       	push	r23
    4bf0:	8f 93       	push	r24
    4bf2:	9f 93       	push	r25
    4bf4:	af 93       	push	r26
    4bf6:	bf 93       	push	r27
    4bf8:	ef 93       	push	r30
    4bfa:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4bfc:	8a e0       	ldi	r24, 0x0A	; 10
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
    4c00:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
}
    4c04:	ff 91       	pop	r31
    4c06:	ef 91       	pop	r30
    4c08:	bf 91       	pop	r27
    4c0a:	af 91       	pop	r26
    4c0c:	9f 91       	pop	r25
    4c0e:	8f 91       	pop	r24
    4c10:	7f 91       	pop	r23
    4c12:	6f 91       	pop	r22
    4c14:	5f 91       	pop	r21
    4c16:	4f 91       	pop	r20
    4c18:	3f 91       	pop	r19
    4c1a:	2f 91       	pop	r18
    4c1c:	0f 90       	pop	r0
    4c1e:	0b be       	out	0x3b, r0	; 59
    4c20:	0f 90       	pop	r0
    4c22:	0f be       	out	0x3f, r0	; 63
    4c24:	0f 90       	pop	r0
    4c26:	1f 90       	pop	r1
    4c28:	18 95       	reti

00004c2a <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4c2a:	04 b6       	in	r0, 0x34	; 52
    4c2c:	03 fe       	sbrs	r0, 3
    4c2e:	02 c0       	rjmp	.+4      	; 0x4c34 <_nrk_startup_error+0xa>
    4c30:	80 e1       	ldi	r24, 0x10	; 16
    4c32:	01 c0       	rjmp	.+2      	; 0x4c36 <_nrk_startup_error+0xc>
    4c34:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4c36:	04 b6       	in	r0, 0x34	; 52
    4c38:	02 fe       	sbrs	r0, 2
    4c3a:	06 c0       	rjmp	.+12     	; 0x4c48 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4c3c:	94 b7       	in	r25, 0x34	; 52
    4c3e:	9b 7f       	andi	r25, 0xFB	; 251
    4c40:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4c42:	04 b6       	in	r0, 0x34	; 52
    4c44:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4c46:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4c48:	04 b6       	in	r0, 0x34	; 52
    4c4a:	01 fe       	sbrs	r0, 1
    4c4c:	05 c0       	rjmp	.+10     	; 0x4c58 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4c4e:	94 b7       	in	r25, 0x34	; 52
    4c50:	9d 7f       	andi	r25, 0xFD	; 253
    4c52:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4c54:	82 60       	ori	r24, 0x02	; 2
    4c56:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4c58:	88 23       	and	r24, r24
    4c5a:	59 f4       	brne	.+22     	; 0x4c72 <_nrk_startup_error+0x48>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4c5c:	04 b6       	in	r0, 0x34	; 52
    4c5e:	00 fc       	sbrc	r0, 0
    4c60:	02 c0       	rjmp	.+4      	; 0x4c66 <_nrk_startup_error+0x3c>
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	03 c0       	rjmp	.+6      	; 0x4c6c <_nrk_startup_error+0x42>
	{
	MCUSR &= ~(1<<PORF);
    4c66:	94 b7       	in	r25, 0x34	; 52
    4c68:	9e 7f       	andi	r25, 0xFE	; 254
    4c6a:	94 bf       	out	0x34, r25	; 52
	else {
	error|=0x01;
	}

// check uart state 
if((volatile uint8_t)TCCR0!=0) error|=0x01;
    4c6c:	93 b7       	in	r25, 0x33	; 51
    4c6e:	91 11       	cpse	r25, r1
    4c70:	81 60       	ori	r24, 0x01	; 1

return error;
}
    4c72:	08 95       	ret

00004c74 <nrk_ext_int_enable>:

int8_t  nrk_ext_int_enable(uint8_t pin )
{
//if(pin==NRK_EXT_INT_0) { EIMSK |= 1; return NRK_OK; }
return NRK_ERROR;
}
    4c74:	8f ef       	ldi	r24, 0xFF	; 255
    4c76:	08 95       	ret

00004c78 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
//if(pin==NRK_EXT_INT_0) { EIMSK &= ~1; return NRK_OK; }
return NRK_ERROR;
}
    4c78:	8f ef       	ldi	r24, 0xFF	; 255
    4c7a:	08 95       	ret

00004c7c <nrk_ext_int_configure>:
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
	return NRK_OK;
	}
*/
return NRK_ERROR;
}
    4c7c:	8f ef       	ldi	r24, 0xFF	; 255
    4c7e:	08 95       	ret

00004c80 <__vector_1>:



SIGNAL(INT0_vect) {
    4c80:	1f 92       	push	r1
    4c82:	0f 92       	push	r0
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	0f 92       	push	r0
    4c88:	0b b6       	in	r0, 0x3b	; 59
    4c8a:	0f 92       	push	r0
    4c8c:	11 24       	eor	r1, r1
    4c8e:	2f 93       	push	r18
    4c90:	3f 93       	push	r19
    4c92:	4f 93       	push	r20
    4c94:	5f 93       	push	r21
    4c96:	6f 93       	push	r22
    4c98:	7f 93       	push	r23
    4c9a:	8f 93       	push	r24
    4c9c:	9f 93       	push	r25
    4c9e:	af 93       	push	r26
    4ca0:	bf 93       	push	r27
    4ca2:	ef 93       	push	r30
    4ca4:	ff 93       	push	r31
//	if(ext_int0_callback!=NULL) ext_int0_callback();
//	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4ca6:	8a e0       	ldi	r24, 0x0A	; 10
    4ca8:	60 e0       	ldi	r22, 0x00	; 0
    4caa:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <nrk_kernel_error_add>
	return;  	
}
    4cae:	ff 91       	pop	r31
    4cb0:	ef 91       	pop	r30
    4cb2:	bf 91       	pop	r27
    4cb4:	af 91       	pop	r26
    4cb6:	9f 91       	pop	r25
    4cb8:	8f 91       	pop	r24
    4cba:	7f 91       	pop	r23
    4cbc:	6f 91       	pop	r22
    4cbe:	5f 91       	pop	r21
    4cc0:	4f 91       	pop	r20
    4cc2:	3f 91       	pop	r19
    4cc4:	2f 91       	pop	r18
    4cc6:	0f 90       	pop	r0
    4cc8:	0b be       	out	0x3b, r0	; 59
    4cca:	0f 90       	pop	r0
    4ccc:	0f be       	out	0x3f, r0	; 63
    4cce:	0f 90       	pop	r0
    4cd0:	1f 90       	pop	r1
    4cd2:	18 95       	reti

00004cd4 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4cd4:	04 b6       	in	r0, 0x34	; 52
    4cd6:	03 fe       	sbrs	r0, 3
    4cd8:	02 c0       	rjmp	.+4      	; 0x4cde <nrk_watchdog_check+0xa>
    4cda:	8f ef       	ldi	r24, 0xFF	; 255
    4cdc:	08 95       	ret
    4cde:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4ce0:	08 95       	ret

00004ce2 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4ce2:	a8 95       	wdr

}
    4ce4:	08 95       	ret

00004ce6 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4ce6:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
MCUSR &= ~(1<<WDRF);
    4cea:	84 b7       	in	r24, 0x34	; 52
    4cec:	87 7f       	andi	r24, 0xF7	; 247
    4cee:	84 bf       	out	0x34, r24	; 52
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4cf0:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
MCUSR &= ~(1<<WDRF);
nrk_watchdog_reset();
WDTCR |= (1<<WDCE) | (1<<WDE);
    4cf2:	81 b5       	in	r24, 0x21	; 33
    4cf4:	88 61       	ori	r24, 0x18	; 24
    4cf6:	81 bd       	out	0x21, r24	; 33
WDTCR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
    4cf8:	8f e0       	ldi	r24, 0x0F	; 15
    4cfa:	81 bd       	out	0x21, r24	; 33
nrk_int_enable();
    4cfc:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>

}
    4d00:	08 95       	ret

00004d02 <nrk_watchdog_disable>:
#include <nrk_error.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4d02:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4d06:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4d08:	84 b7       	in	r24, 0x34	; 52
    4d0a:	87 7f       	andi	r24, 0xF7	; 247
    4d0c:	84 bf       	out	0x34, r24	; 52
WDTCR |= (1<<WDCE) | (1<<WDE);
    4d0e:	81 b5       	in	r24, 0x21	; 33
    4d10:	88 61       	ori	r24, 0x18	; 24
    4d12:	81 bd       	out	0x21, r24	; 33
WDTCR = 0;
    4d14:	11 bc       	out	0x21, r1	; 33
nrk_int_enable();
    4d16:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
}
    4d1a:	08 95       	ret

00004d1c <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    4d1c:	08 95       	ret

00004d1e <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4d1e:	fc 01       	movw	r30, r24
    4d20:	76 83       	std	Z+6, r23	; 0x06
    4d22:	65 83       	std	Z+5, r22	; 0x05
}
    4d24:	08 95       	ret

00004d26 <nrk_sleep>:


void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4d26:	85 b7       	in	r24, 0x35	; 53
    4d28:	83 7e       	andi	r24, 0xE3	; 227
    4d2a:	88 61       	ori	r24, 0x18	; 24
    4d2c:	85 bf       	out	0x35, r24	; 53
    sleep_mode ();
    4d2e:	85 b7       	in	r24, 0x35	; 53
    4d30:	80 62       	ori	r24, 0x20	; 32
    4d32:	85 bf       	out	0x35, r24	; 53
    4d34:	88 95       	sleep
    4d36:	85 b7       	in	r24, 0x35	; 53
    4d38:	8f 7d       	andi	r24, 0xDF	; 223
    4d3a:	85 bf       	out	0x35, r24	; 53

}
    4d3c:	08 95       	ret

00004d3e <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4d3e:	85 b7       	in	r24, 0x35	; 53
    4d40:	83 7e       	andi	r24, 0xE3	; 227
    4d42:	85 bf       	out	0x35, r24	; 53
    sleep_mode ();
    4d44:	85 b7       	in	r24, 0x35	; 53
    4d46:	80 62       	ori	r24, 0x20	; 32
    4d48:	85 bf       	out	0x35, r24	; 53
    4d4a:	88 95       	sleep
    4d4c:	85 b7       	in	r24, 0x35	; 53
    4d4e:	8f 7d       	andi	r24, 0xDF	; 223
    4d50:	85 bf       	out	0x35, r24	; 53

}
    4d52:	08 95       	ret

00004d54 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4d54:	25 e5       	ldi	r18, 0x55	; 85
    4d56:	fa 01       	movw	r30, r20
    4d58:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    4d5a:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    4d5c:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4d5e:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4d60:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    4d62:	12 92       	st	-Z, r1
    4d64:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    4d66:	12 92       	st	-Z, r1
    4d68:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4d6a:	12 92       	st	-Z, r1
    4d6c:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4d6e:	12 92       	st	-Z, r1
    4d70:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4d72:	12 92       	st	-Z, r1
    4d74:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4d76:	12 92       	st	-Z, r1
    4d78:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4d7a:	12 92       	st	-Z, r1
    4d7c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d7e:	12 92       	st	-Z, r1
    4d80:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    4d82:	12 92       	st	-Z, r1
    4d84:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d86:	12 92       	st	-Z, r1
    4d88:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d8a:	12 92       	st	-Z, r1
    4d8c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d8e:	12 92       	st	-Z, r1
    4d90:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d92:	12 92       	st	-Z, r1
    4d94:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d96:	12 92       	st	-Z, r1
    4d98:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d9a:	12 92       	st	-Z, r1
    4d9c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4d9e:	12 92       	st	-Z, r1
    4da0:	12 92       	st	-Z, r1
    *(--stk) = 0;
    4da2:	12 92       	st	-Z, r1
    4da4:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    4da6:	cf 01       	movw	r24, r30
    4da8:	08 95       	ret

00004daa <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4daa:	82 e9       	ldi	r24, 0x92	; 146
    4dac:	94 e1       	ldi	r25, 0x14	; 20
    4dae:	90 93 fe 10 	sts	0x10FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4db2:	80 93 ff 10 	sts	0x10FF, r24
}
    4db6:	08 95       	ret

00004db8 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
        *stkc = STK_CANARY_VAL;
    4db8:	85 e5       	ldi	r24, 0x55	; 85
    4dba:	80 93 7e 10 	sts	0x107E, r24
        stkc = NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    4dbe:	ee ef       	ldi	r30, 0xFE	; 254
    4dc0:	f0 e1       	ldi	r31, 0x10	; 16
    4dc2:	f0 93 72 03 	sts	0x0372, r31
    4dc6:	e0 93 71 03 	sts	0x0371, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4dca:	82 e9       	ldi	r24, 0x92	; 146
    4dcc:	94 e1       	ldi	r25, 0x14	; 20
    4dce:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4dd0:	80 93 ff 10 	sts	0x10FF, r24

}
    4dd4:	08 95       	ret

00004dd6 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4dd6:	0e 94 92 24 	call	0x4924	; 0x4924 <_nrk_setup_timer>
  nrk_int_enable();  
    4dda:	0e 94 8b 14 	call	0x2916	; 0x2916 <nrk_int_enable>
	
}
    4dde:	08 95       	ret

00004de0 <nrk_task_set_stk>:

    return ((void *)stk);
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4de0:	ef 92       	push	r14
    4de2:	ff 92       	push	r15
    4de4:	0f 93       	push	r16
    4de6:	1f 93       	push	r17
    4de8:	cf 93       	push	r28
    4dea:	df 93       	push	r29
    4dec:	ec 01       	movw	r28, r24
    4dee:	8b 01       	movw	r16, r22
    4df0:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4df2:	40 32       	cpi	r20, 0x20	; 32
    4df4:	51 05       	cpc	r21, r1
    4df6:	18 f4       	brcc	.+6      	; 0x4dfe <nrk_task_set_stk+0x1e>
    4df8:	81 e1       	ldi	r24, 0x11	; 17
    4dfa:	0e 94 39 18 	call	0x3072	; 0x3072 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4dfe:	08 94       	sec
    4e00:	e1 08       	sbc	r14, r1
    4e02:	f1 08       	sbc	r15, r1
    4e04:	e0 0e       	add	r14, r16
    4e06:	f1 1e       	adc	r15, r17
    4e08:	fa 82       	std	Y+2, r15	; 0x02
    4e0a:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    4e0c:	1c 83       	std	Y+4, r17	; 0x04
    4e0e:	0b 83       	std	Y+3, r16	; 0x03

}
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	1f 91       	pop	r17
    4e16:	0f 91       	pop	r16
    4e18:	ff 90       	pop	r15
    4e1a:	ef 90       	pop	r14
    4e1c:	08 95       	ret

00004e1e <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    4e1e:	a0 91 21 05 	lds	r26, 0x0521
	lds r27,nrk_high_ready_TCB+1
    4e22:	b0 91 22 05 	lds	r27, 0x0522

    	;x points to &OSTCB[x]
    
	ld r28,x+
    4e26:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    4e28:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    4e2a:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    4e2c:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    4e2e:	ff 91       	pop	r31
	pop r30
    4e30:	ef 91       	pop	r30
	pop r29
    4e32:	df 91       	pop	r29
	pop r28
    4e34:	cf 91       	pop	r28
	pop r27
    4e36:	bf 91       	pop	r27
	pop r26
    4e38:	af 91       	pop	r26
	pop r25
    4e3a:	9f 91       	pop	r25
	pop r24			
    4e3c:	8f 91       	pop	r24
	pop r23
    4e3e:	7f 91       	pop	r23
	pop r22
    4e40:	6f 91       	pop	r22
	pop r21
    4e42:	5f 91       	pop	r21
	pop r20	
    4e44:	4f 91       	pop	r20
	pop r19
    4e46:	3f 91       	pop	r19
	pop r18	
    4e48:	2f 91       	pop	r18
	pop r17
    4e4a:	1f 91       	pop	r17
	pop r16
    4e4c:	0f 91       	pop	r16
	pop r15
    4e4e:	ff 90       	pop	r15
	pop r14
    4e50:	ef 90       	pop	r14
	pop r13
    4e52:	df 90       	pop	r13
	pop r12
    4e54:	cf 90       	pop	r12
	pop r11
    4e56:	bf 90       	pop	r11
	pop r10
    4e58:	af 90       	pop	r10
	pop r9
    4e5a:	9f 90       	pop	r9
	pop r8
    4e5c:	8f 90       	pop	r8
	pop r7
    4e5e:	7f 90       	pop	r7
	pop r6
    4e60:	6f 90       	pop	r6
	pop r5
    4e62:	5f 90       	pop	r5
	pop r4
    4e64:	4f 90       	pop	r4
	pop r3
    4e66:	3f 90       	pop	r3
	pop r2
    4e68:	2f 90       	pop	r2
	pop r1
    4e6a:	1f 90       	pop	r1
	pop r0
    4e6c:	0f 90       	pop	r0
	out __SREG__, r0
    4e6e:	0f be       	out	0x3f, r0	; 63
	pop r0	
    4e70:	0f 90       	pop	r0
	   
    	reti 
    4e72:	18 95       	reti

00004e74 <vfprintf>:
    4e74:	6f 92       	push	r6
    4e76:	7f 92       	push	r7
    4e78:	8f 92       	push	r8
    4e7a:	9f 92       	push	r9
    4e7c:	af 92       	push	r10
    4e7e:	bf 92       	push	r11
    4e80:	cf 92       	push	r12
    4e82:	df 92       	push	r13
    4e84:	ef 92       	push	r14
    4e86:	ff 92       	push	r15
    4e88:	0f 93       	push	r16
    4e8a:	1f 93       	push	r17
    4e8c:	df 93       	push	r29
    4e8e:	cf 93       	push	r28
    4e90:	cd b7       	in	r28, 0x3d	; 61
    4e92:	de b7       	in	r29, 0x3e	; 62
    4e94:	2d 97       	sbiw	r28, 0x0d	; 13
    4e96:	0f b6       	in	r0, 0x3f	; 63
    4e98:	f8 94       	cli
    4e9a:	de bf       	out	0x3e, r29	; 62
    4e9c:	0f be       	out	0x3f, r0	; 63
    4e9e:	cd bf       	out	0x3d, r28	; 61
    4ea0:	6c 01       	movw	r12, r24
    4ea2:	4b 01       	movw	r8, r22
    4ea4:	8a 01       	movw	r16, r20
    4ea6:	fc 01       	movw	r30, r24
    4ea8:	17 82       	std	Z+7, r1	; 0x07
    4eaa:	16 82       	std	Z+6, r1	; 0x06
    4eac:	83 81       	ldd	r24, Z+3	; 0x03
    4eae:	81 fd       	sbrc	r24, 1
    4eb0:	06 c0       	rjmp	.+12     	; 0x4ebe <vfprintf+0x4a>
    4eb2:	2f ef       	ldi	r18, 0xFF	; 255
    4eb4:	3f ef       	ldi	r19, 0xFF	; 255
    4eb6:	0e c1       	rjmp	.+540    	; 0x50d4 <vfprintf+0x260>
    4eb8:	0e 5f       	subi	r16, 0xFE	; 254
    4eba:	1f 4f       	sbci	r17, 0xFF	; 255
    4ebc:	04 c0       	rjmp	.+8      	; 0x4ec6 <vfprintf+0x52>
    4ebe:	5e 01       	movw	r10, r28
    4ec0:	08 94       	sec
    4ec2:	a1 1c       	adc	r10, r1
    4ec4:	b1 1c       	adc	r11, r1
    4ec6:	f6 01       	movw	r30, r12
    4ec8:	f3 80       	ldd	r15, Z+3	; 0x03
    4eca:	f4 01       	movw	r30, r8
    4ecc:	f3 fc       	sbrc	r15, 3
    4ece:	85 91       	lpm	r24, Z+
    4ed0:	f3 fe       	sbrs	r15, 3
    4ed2:	81 91       	ld	r24, Z+
    4ed4:	4f 01       	movw	r8, r30
    4ed6:	88 23       	and	r24, r24
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <vfprintf+0x68>
    4eda:	f9 c0       	rjmp	.+498    	; 0x50ce <vfprintf+0x25a>
    4edc:	85 32       	cpi	r24, 0x25	; 37
    4ede:	51 f4       	brne	.+20     	; 0x4ef4 <vfprintf+0x80>
    4ee0:	f3 fc       	sbrc	r15, 3
    4ee2:	25 91       	lpm	r18, Z+
    4ee4:	f3 fe       	sbrs	r15, 3
    4ee6:	21 91       	ld	r18, Z+
    4ee8:	4f 01       	movw	r8, r30
    4eea:	25 32       	cpi	r18, 0x25	; 37
    4eec:	11 f0       	breq	.+4      	; 0x4ef2 <vfprintf+0x7e>
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	1f c0       	rjmp	.+62     	; 0x4f30 <vfprintf+0xbc>
    4ef2:	85 e2       	ldi	r24, 0x25	; 37
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	32 c0       	rjmp	.+100    	; 0x4f5c <vfprintf+0xe8>
    4ef8:	22 23       	and	r18, r18
    4efa:	09 f4       	brne	.+2      	; 0x4efe <vfprintf+0x8a>
    4efc:	e8 c0       	rjmp	.+464    	; 0x50ce <vfprintf+0x25a>
    4efe:	87 ea       	ldi	r24, 0xA7	; 167
    4f00:	93 e0       	ldi	r25, 0x03	; 3
    4f02:	62 2f       	mov	r22, r18
    4f04:	70 e0       	ldi	r23, 0x00	; 0
    4f06:	2c 87       	std	Y+12, r18	; 0x0c
    4f08:	3d 87       	std	Y+13, r19	; 0x0d
    4f0a:	0e 94 52 29 	call	0x52a4	; 0x52a4 <strchr_P>
    4f0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f10:	3d 85       	ldd	r19, Y+13	; 0x0d
    4f12:	00 97       	sbiw	r24, 0x00	; 0
    4f14:	39 f4       	brne	.+14     	; 0x4f24 <vfprintf+0xb0>
    4f16:	23 32       	cpi	r18, 0x23	; 35
    4f18:	11 f4       	brne	.+4      	; 0x4f1e <vfprintf+0xaa>
    4f1a:	30 61       	ori	r19, 0x10	; 16
    4f1c:	03 c0       	rjmp	.+6      	; 0x4f24 <vfprintf+0xb0>
    4f1e:	2c 36       	cpi	r18, 0x6C	; 108
    4f20:	61 f4       	brne	.+24     	; 0x4f3a <vfprintf+0xc6>
    4f22:	30 68       	ori	r19, 0x80	; 128
    4f24:	f4 01       	movw	r30, r8
    4f26:	f3 fc       	sbrc	r15, 3
    4f28:	25 91       	lpm	r18, Z+
    4f2a:	f3 fe       	sbrs	r15, 3
    4f2c:	21 91       	ld	r18, Z+
    4f2e:	4f 01       	movw	r8, r30
    4f30:	37 ff       	sbrs	r19, 7
    4f32:	e2 cf       	rjmp	.-60     	; 0x4ef8 <vfprintf+0x84>
    4f34:	22 23       	and	r18, r18
    4f36:	09 f4       	brne	.+2      	; 0x4f3a <vfprintf+0xc6>
    4f38:	ca c0       	rjmp	.+404    	; 0x50ce <vfprintf+0x25a>
    4f3a:	f3 2e       	mov	r15, r19
    4f3c:	80 ea       	ldi	r24, 0xA0	; 160
    4f3e:	93 e0       	ldi	r25, 0x03	; 3
    4f40:	62 2f       	mov	r22, r18
    4f42:	70 e0       	ldi	r23, 0x00	; 0
    4f44:	2c 87       	std	Y+12, r18	; 0x0c
    4f46:	3d 87       	std	Y+13, r19	; 0x0d
    4f48:	0e 94 52 29 	call	0x52a4	; 0x52a4 <strchr_P>
    4f4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f4e:	3f 2d       	mov	r19, r15
    4f50:	00 97       	sbiw	r24, 0x00	; 0
    4f52:	41 f0       	breq	.+16     	; 0x4f64 <vfprintf+0xf0>
    4f54:	0c 5f       	subi	r16, 0xFC	; 252
    4f56:	1f 4f       	sbci	r17, 0xFF	; 255
    4f58:	8f e3       	ldi	r24, 0x3F	; 63
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	b6 01       	movw	r22, r12
    4f5e:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    4f62:	b1 cf       	rjmp	.-158    	; 0x4ec6 <vfprintf+0x52>
    4f64:	23 36       	cpi	r18, 0x63	; 99
    4f66:	29 f0       	breq	.+10     	; 0x4f72 <vfprintf+0xfe>
    4f68:	23 37       	cpi	r18, 0x73	; 115
    4f6a:	91 f0       	breq	.+36     	; 0x4f90 <vfprintf+0x11c>
    4f6c:	23 35       	cpi	r18, 0x53	; 83
    4f6e:	09 f5       	brne	.+66     	; 0x4fb2 <vfprintf+0x13e>
    4f70:	0d c0       	rjmp	.+26     	; 0x4f8c <vfprintf+0x118>
    4f72:	32 e0       	ldi	r19, 0x02	; 2
    4f74:	e3 2e       	mov	r14, r19
    4f76:	f1 2c       	mov	r15, r1
    4f78:	e0 0e       	add	r14, r16
    4f7a:	f1 1e       	adc	r15, r17
    4f7c:	f8 01       	movw	r30, r16
    4f7e:	80 81       	ld	r24, Z
    4f80:	91 81       	ldd	r25, Z+1	; 0x01
    4f82:	b6 01       	movw	r22, r12
    4f84:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    4f88:	87 01       	movw	r16, r14
    4f8a:	9d cf       	rjmp	.-198    	; 0x4ec6 <vfprintf+0x52>
    4f8c:	f1 e0       	ldi	r31, 0x01	; 1
    4f8e:	ff 2a       	or	r15, r31
    4f90:	f8 01       	movw	r30, r16
    4f92:	60 80       	ld	r6, Z
    4f94:	71 80       	ldd	r7, Z+1	; 0x01
    4f96:	04 c0       	rjmp	.+8      	; 0x4fa0 <vfprintf+0x12c>
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	b6 01       	movw	r22, r12
    4f9c:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    4fa0:	f3 01       	movw	r30, r6
    4fa2:	f0 fc       	sbrc	r15, 0
    4fa4:	85 91       	lpm	r24, Z+
    4fa6:	f0 fe       	sbrs	r15, 0
    4fa8:	81 91       	ld	r24, Z+
    4faa:	3f 01       	movw	r6, r30
    4fac:	88 23       	and	r24, r24
    4fae:	a1 f7       	brne	.-24     	; 0x4f98 <vfprintf+0x124>
    4fb0:	83 cf       	rjmp	.-250    	; 0x4eb8 <vfprintf+0x44>
    4fb2:	24 36       	cpi	r18, 0x64	; 100
    4fb4:	11 f0       	breq	.+4      	; 0x4fba <vfprintf+0x146>
    4fb6:	29 36       	cpi	r18, 0x69	; 105
    4fb8:	29 f5       	brne	.+74     	; 0x5004 <vfprintf+0x190>
    4fba:	37 ff       	sbrs	r19, 7
    4fbc:	08 c0       	rjmp	.+16     	; 0x4fce <vfprintf+0x15a>
    4fbe:	f8 01       	movw	r30, r16
    4fc0:	60 81       	ld	r22, Z
    4fc2:	71 81       	ldd	r23, Z+1	; 0x01
    4fc4:	82 81       	ldd	r24, Z+2	; 0x02
    4fc6:	93 81       	ldd	r25, Z+3	; 0x03
    4fc8:	0c 5f       	subi	r16, 0xFC	; 252
    4fca:	1f 4f       	sbci	r17, 0xFF	; 255
    4fcc:	09 c0       	rjmp	.+18     	; 0x4fe0 <vfprintf+0x16c>
    4fce:	f8 01       	movw	r30, r16
    4fd0:	60 81       	ld	r22, Z
    4fd2:	71 81       	ldd	r23, Z+1	; 0x01
    4fd4:	88 27       	eor	r24, r24
    4fd6:	77 fd       	sbrc	r23, 7
    4fd8:	80 95       	com	r24
    4fda:	98 2f       	mov	r25, r24
    4fdc:	0e 5f       	subi	r16, 0xFE	; 254
    4fde:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe0:	2f ee       	ldi	r18, 0xEF	; 239
    4fe2:	f2 2e       	mov	r15, r18
    4fe4:	f3 22       	and	r15, r19
    4fe6:	97 ff       	sbrs	r25, 7
    4fe8:	09 c0       	rjmp	.+18     	; 0x4ffc <vfprintf+0x188>
    4fea:	90 95       	com	r25
    4fec:	80 95       	com	r24
    4fee:	70 95       	com	r23
    4ff0:	61 95       	neg	r22
    4ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff8:	f0 e4       	ldi	r31, 0x40	; 64
    4ffa:	ff 2a       	or	r15, r31
    4ffc:	a5 01       	movw	r20, r10
    4ffe:	2a e0       	ldi	r18, 0x0A	; 10
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	35 c0       	rjmp	.+106    	; 0x506e <vfprintf+0x1fa>
    5004:	20 37       	cpi	r18, 0x70	; 112
    5006:	b1 f0       	breq	.+44     	; 0x5034 <vfprintf+0x1c0>
    5008:	21 37       	cpi	r18, 0x71	; 113
    500a:	30 f4       	brcc	.+12     	; 0x5018 <vfprintf+0x1a4>
    500c:	28 35       	cpi	r18, 0x58	; 88
    500e:	c9 f0       	breq	.+50     	; 0x5042 <vfprintf+0x1ce>
    5010:	2f 36       	cpi	r18, 0x6F	; 111
    5012:	09 f0       	breq	.+2      	; 0x5016 <vfprintf+0x1a2>
    5014:	5c c0       	rjmp	.+184    	; 0x50ce <vfprintf+0x25a>
    5016:	06 c0       	rjmp	.+12     	; 0x5024 <vfprintf+0x1b0>
    5018:	25 37       	cpi	r18, 0x75	; 117
    501a:	39 f0       	breq	.+14     	; 0x502a <vfprintf+0x1b6>
    501c:	28 37       	cpi	r18, 0x78	; 120
    501e:	09 f0       	breq	.+2      	; 0x5022 <vfprintf+0x1ae>
    5020:	56 c0       	rjmp	.+172    	; 0x50ce <vfprintf+0x25a>
    5022:	0a c0       	rjmp	.+20     	; 0x5038 <vfprintf+0x1c4>
    5024:	28 e0       	ldi	r18, 0x08	; 8
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	10 c0       	rjmp	.+32     	; 0x504a <vfprintf+0x1d6>
    502a:	2f ee       	ldi	r18, 0xEF	; 239
    502c:	f2 22       	and	r15, r18
    502e:	2a e0       	ldi	r18, 0x0A	; 10
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	0b c0       	rjmp	.+22     	; 0x504a <vfprintf+0x1d6>
    5034:	80 e1       	ldi	r24, 0x10	; 16
    5036:	f8 2a       	or	r15, r24
    5038:	e4 e2       	ldi	r30, 0x24	; 36
    503a:	fe 2a       	or	r15, r30
    503c:	20 e1       	ldi	r18, 0x10	; 16
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	04 c0       	rjmp	.+8      	; 0x504a <vfprintf+0x1d6>
    5042:	f4 e0       	ldi	r31, 0x04	; 4
    5044:	ff 2a       	or	r15, r31
    5046:	20 e1       	ldi	r18, 0x10	; 16
    5048:	32 e0       	ldi	r19, 0x02	; 2
    504a:	f7 fe       	sbrs	r15, 7
    504c:	08 c0       	rjmp	.+16     	; 0x505e <vfprintf+0x1ea>
    504e:	f8 01       	movw	r30, r16
    5050:	60 81       	ld	r22, Z
    5052:	71 81       	ldd	r23, Z+1	; 0x01
    5054:	82 81       	ldd	r24, Z+2	; 0x02
    5056:	93 81       	ldd	r25, Z+3	; 0x03
    5058:	0c 5f       	subi	r16, 0xFC	; 252
    505a:	1f 4f       	sbci	r17, 0xFF	; 255
    505c:	07 c0       	rjmp	.+14     	; 0x506c <vfprintf+0x1f8>
    505e:	f8 01       	movw	r30, r16
    5060:	60 81       	ld	r22, Z
    5062:	71 81       	ldd	r23, Z+1	; 0x01
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	0e 5f       	subi	r16, 0xFE	; 254
    506a:	1f 4f       	sbci	r17, 0xFF	; 255
    506c:	a5 01       	movw	r20, r10
    506e:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <__ultoa_invert>
    5072:	e8 2e       	mov	r14, r24
    5074:	ea 18       	sub	r14, r10
    5076:	6f 2c       	mov	r6, r15
    5078:	77 24       	eor	r7, r7
    507a:	f6 fe       	sbrs	r15, 6
    507c:	05 c0       	rjmp	.+10     	; 0x5088 <vfprintf+0x214>
    507e:	8d e2       	ldi	r24, 0x2D	; 45
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	b6 01       	movw	r22, r12
    5084:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    5088:	64 fe       	sbrs	r6, 4
    508a:	15 c0       	rjmp	.+42     	; 0x50b6 <vfprintf+0x242>
    508c:	fe 01       	movw	r30, r28
    508e:	ee 0d       	add	r30, r14
    5090:	f1 1d       	adc	r31, r1
    5092:	80 81       	ld	r24, Z
    5094:	80 33       	cpi	r24, 0x30	; 48
    5096:	79 f0       	breq	.+30     	; 0x50b6 <vfprintf+0x242>
    5098:	80 e3       	ldi	r24, 0x30	; 48
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	b6 01       	movw	r22, r12
    509e:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    50a2:	62 fe       	sbrs	r6, 2
    50a4:	08 c0       	rjmp	.+16     	; 0x50b6 <vfprintf+0x242>
    50a6:	c3 01       	movw	r24, r6
    50a8:	80 72       	andi	r24, 0x20	; 32
    50aa:	90 70       	andi	r25, 0x00	; 0
    50ac:	88 5a       	subi	r24, 0xA8	; 168
    50ae:	9f 4f       	sbci	r25, 0xFF	; 255
    50b0:	b6 01       	movw	r22, r12
    50b2:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    50b6:	ea 94       	dec	r14
    50b8:	f5 01       	movw	r30, r10
    50ba:	ee 0d       	add	r30, r14
    50bc:	f1 1d       	adc	r31, r1
    50be:	80 81       	ld	r24, Z
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	b6 01       	movw	r22, r12
    50c4:	0e 94 a9 29 	call	0x5352	; 0x5352 <fputc>
    50c8:	ee 20       	and	r14, r14
    50ca:	a9 f7       	brne	.-22     	; 0x50b6 <vfprintf+0x242>
    50cc:	fc ce       	rjmp	.-520    	; 0x4ec6 <vfprintf+0x52>
    50ce:	f6 01       	movw	r30, r12
    50d0:	26 81       	ldd	r18, Z+6	; 0x06
    50d2:	37 81       	ldd	r19, Z+7	; 0x07
    50d4:	c9 01       	movw	r24, r18
    50d6:	2d 96       	adiw	r28, 0x0d	; 13
    50d8:	0f b6       	in	r0, 0x3f	; 63
    50da:	f8 94       	cli
    50dc:	de bf       	out	0x3e, r29	; 62
    50de:	0f be       	out	0x3f, r0	; 63
    50e0:	cd bf       	out	0x3d, r28	; 61
    50e2:	cf 91       	pop	r28
    50e4:	df 91       	pop	r29
    50e6:	1f 91       	pop	r17
    50e8:	0f 91       	pop	r16
    50ea:	ff 90       	pop	r15
    50ec:	ef 90       	pop	r14
    50ee:	df 90       	pop	r13
    50f0:	cf 90       	pop	r12
    50f2:	bf 90       	pop	r11
    50f4:	af 90       	pop	r10
    50f6:	9f 90       	pop	r9
    50f8:	8f 90       	pop	r8
    50fa:	7f 90       	pop	r7
    50fc:	6f 90       	pop	r6
    50fe:	08 95       	ret

00005100 <__mulsi3>:
    5100:	62 9f       	mul	r22, r18
    5102:	d0 01       	movw	r26, r0
    5104:	73 9f       	mul	r23, r19
    5106:	f0 01       	movw	r30, r0
    5108:	82 9f       	mul	r24, r18
    510a:	e0 0d       	add	r30, r0
    510c:	f1 1d       	adc	r31, r1
    510e:	64 9f       	mul	r22, r20
    5110:	e0 0d       	add	r30, r0
    5112:	f1 1d       	adc	r31, r1
    5114:	92 9f       	mul	r25, r18
    5116:	f0 0d       	add	r31, r0
    5118:	83 9f       	mul	r24, r19
    511a:	f0 0d       	add	r31, r0
    511c:	74 9f       	mul	r23, r20
    511e:	f0 0d       	add	r31, r0
    5120:	65 9f       	mul	r22, r21
    5122:	f0 0d       	add	r31, r0
    5124:	99 27       	eor	r25, r25
    5126:	72 9f       	mul	r23, r18
    5128:	b0 0d       	add	r27, r0
    512a:	e1 1d       	adc	r30, r1
    512c:	f9 1f       	adc	r31, r25
    512e:	63 9f       	mul	r22, r19
    5130:	b0 0d       	add	r27, r0
    5132:	e1 1d       	adc	r30, r1
    5134:	f9 1f       	adc	r31, r25
    5136:	bd 01       	movw	r22, r26
    5138:	cf 01       	movw	r24, r30
    513a:	11 24       	eor	r1, r1
    513c:	08 95       	ret

0000513e <__udivmodhi4>:
    513e:	aa 1b       	sub	r26, r26
    5140:	bb 1b       	sub	r27, r27
    5142:	51 e1       	ldi	r21, 0x11	; 17
    5144:	07 c0       	rjmp	.+14     	; 0x5154 <__udivmodhi4_ep>

00005146 <__udivmodhi4_loop>:
    5146:	aa 1f       	adc	r26, r26
    5148:	bb 1f       	adc	r27, r27
    514a:	a6 17       	cp	r26, r22
    514c:	b7 07       	cpc	r27, r23
    514e:	10 f0       	brcs	.+4      	; 0x5154 <__udivmodhi4_ep>
    5150:	a6 1b       	sub	r26, r22
    5152:	b7 0b       	sbc	r27, r23

00005154 <__udivmodhi4_ep>:
    5154:	88 1f       	adc	r24, r24
    5156:	99 1f       	adc	r25, r25
    5158:	5a 95       	dec	r21
    515a:	a9 f7       	brne	.-22     	; 0x5146 <__udivmodhi4_loop>
    515c:	80 95       	com	r24
    515e:	90 95       	com	r25
    5160:	bc 01       	movw	r22, r24
    5162:	cd 01       	movw	r24, r26
    5164:	08 95       	ret

00005166 <__divmodhi4>:
    5166:	97 fb       	bst	r25, 7
    5168:	09 2e       	mov	r0, r25
    516a:	07 26       	eor	r0, r23
    516c:	0a d0       	rcall	.+20     	; 0x5182 <__divmodhi4_neg1>
    516e:	77 fd       	sbrc	r23, 7
    5170:	04 d0       	rcall	.+8      	; 0x517a <__divmodhi4_neg2>
    5172:	e5 df       	rcall	.-54     	; 0x513e <__udivmodhi4>
    5174:	06 d0       	rcall	.+12     	; 0x5182 <__divmodhi4_neg1>
    5176:	00 20       	and	r0, r0
    5178:	1a f4       	brpl	.+6      	; 0x5180 <__divmodhi4_exit>

0000517a <__divmodhi4_neg2>:
    517a:	70 95       	com	r23
    517c:	61 95       	neg	r22
    517e:	7f 4f       	sbci	r23, 0xFF	; 255

00005180 <__divmodhi4_exit>:
    5180:	08 95       	ret

00005182 <__divmodhi4_neg1>:
    5182:	f6 f7       	brtc	.-4      	; 0x5180 <__divmodhi4_exit>
    5184:	90 95       	com	r25
    5186:	81 95       	neg	r24
    5188:	9f 4f       	sbci	r25, 0xFF	; 255
    518a:	08 95       	ret

0000518c <__udivmodsi4>:
    518c:	a1 e2       	ldi	r26, 0x21	; 33
    518e:	1a 2e       	mov	r1, r26
    5190:	aa 1b       	sub	r26, r26
    5192:	bb 1b       	sub	r27, r27
    5194:	fd 01       	movw	r30, r26
    5196:	0d c0       	rjmp	.+26     	; 0x51b2 <__udivmodsi4_ep>

00005198 <__udivmodsi4_loop>:
    5198:	aa 1f       	adc	r26, r26
    519a:	bb 1f       	adc	r27, r27
    519c:	ee 1f       	adc	r30, r30
    519e:	ff 1f       	adc	r31, r31
    51a0:	a2 17       	cp	r26, r18
    51a2:	b3 07       	cpc	r27, r19
    51a4:	e4 07       	cpc	r30, r20
    51a6:	f5 07       	cpc	r31, r21
    51a8:	20 f0       	brcs	.+8      	; 0x51b2 <__udivmodsi4_ep>
    51aa:	a2 1b       	sub	r26, r18
    51ac:	b3 0b       	sbc	r27, r19
    51ae:	e4 0b       	sbc	r30, r20
    51b0:	f5 0b       	sbc	r31, r21

000051b2 <__udivmodsi4_ep>:
    51b2:	66 1f       	adc	r22, r22
    51b4:	77 1f       	adc	r23, r23
    51b6:	88 1f       	adc	r24, r24
    51b8:	99 1f       	adc	r25, r25
    51ba:	1a 94       	dec	r1
    51bc:	69 f7       	brne	.-38     	; 0x5198 <__udivmodsi4_loop>
    51be:	60 95       	com	r22
    51c0:	70 95       	com	r23
    51c2:	80 95       	com	r24
    51c4:	90 95       	com	r25
    51c6:	9b 01       	movw	r18, r22
    51c8:	ac 01       	movw	r20, r24
    51ca:	bd 01       	movw	r22, r26
    51cc:	cf 01       	movw	r24, r30
    51ce:	08 95       	ret

000051d0 <do_rand>:
    51d0:	af 92       	push	r10
    51d2:	bf 92       	push	r11
    51d4:	cf 92       	push	r12
    51d6:	df 92       	push	r13
    51d8:	ef 92       	push	r14
    51da:	ff 92       	push	r15
    51dc:	0f 93       	push	r16
    51de:	1f 93       	push	r17
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	ec 01       	movw	r28, r24
    51e6:	e8 80       	ld	r14, Y
    51e8:	f9 80       	ldd	r15, Y+1	; 0x01
    51ea:	0a 81       	ldd	r16, Y+2	; 0x02
    51ec:	1b 81       	ldd	r17, Y+3	; 0x03
    51ee:	e1 14       	cp	r14, r1
    51f0:	f1 04       	cpc	r15, r1
    51f2:	01 05       	cpc	r16, r1
    51f4:	11 05       	cpc	r17, r1
    51f6:	41 f4       	brne	.+16     	; 0x5208 <do_rand+0x38>
    51f8:	84 e2       	ldi	r24, 0x24	; 36
    51fa:	e8 2e       	mov	r14, r24
    51fc:	89 ed       	ldi	r24, 0xD9	; 217
    51fe:	f8 2e       	mov	r15, r24
    5200:	8b e5       	ldi	r24, 0x5B	; 91
    5202:	08 2f       	mov	r16, r24
    5204:	87 e0       	ldi	r24, 0x07	; 7
    5206:	18 2f       	mov	r17, r24
    5208:	c8 01       	movw	r24, r16
    520a:	b7 01       	movw	r22, r14
    520c:	2d e1       	ldi	r18, 0x1D	; 29
    520e:	33 ef       	ldi	r19, 0xF3	; 243
    5210:	41 e0       	ldi	r20, 0x01	; 1
    5212:	50 e0       	ldi	r21, 0x00	; 0
    5214:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__divmodsi4>
    5218:	27 ea       	ldi	r18, 0xA7	; 167
    521a:	31 e4       	ldi	r19, 0x41	; 65
    521c:	40 e0       	ldi	r20, 0x00	; 0
    521e:	50 e0       	ldi	r21, 0x00	; 0
    5220:	0e 94 80 28 	call	0x5100	; 0x5100 <__mulsi3>
    5224:	5b 01       	movw	r10, r22
    5226:	6c 01       	movw	r12, r24
    5228:	c8 01       	movw	r24, r16
    522a:	b7 01       	movw	r22, r14
    522c:	2d e1       	ldi	r18, 0x1D	; 29
    522e:	33 ef       	ldi	r19, 0xF3	; 243
    5230:	41 e0       	ldi	r20, 0x01	; 1
    5232:	50 e0       	ldi	r21, 0x00	; 0
    5234:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__divmodsi4>
    5238:	ca 01       	movw	r24, r20
    523a:	b9 01       	movw	r22, r18
    523c:	2c ee       	ldi	r18, 0xEC	; 236
    523e:	34 ef       	ldi	r19, 0xF4	; 244
    5240:	4f ef       	ldi	r20, 0xFF	; 255
    5242:	5f ef       	ldi	r21, 0xFF	; 255
    5244:	0e 94 80 28 	call	0x5100	; 0x5100 <__mulsi3>
    5248:	6a 0d       	add	r22, r10
    524a:	7b 1d       	adc	r23, r11
    524c:	8c 1d       	adc	r24, r12
    524e:	9d 1d       	adc	r25, r13
    5250:	97 ff       	sbrs	r25, 7
    5252:	04 c0       	rjmp	.+8      	; 0x525c <do_rand+0x8c>
    5254:	61 50       	subi	r22, 0x01	; 1
    5256:	70 40       	sbci	r23, 0x00	; 0
    5258:	80 40       	sbci	r24, 0x00	; 0
    525a:	90 48       	sbci	r25, 0x80	; 128
    525c:	68 83       	st	Y, r22
    525e:	79 83       	std	Y+1, r23	; 0x01
    5260:	8a 83       	std	Y+2, r24	; 0x02
    5262:	9b 83       	std	Y+3, r25	; 0x03
    5264:	7f 77       	andi	r23, 0x7F	; 127
    5266:	cb 01       	movw	r24, r22
    5268:	df 91       	pop	r29
    526a:	cf 91       	pop	r28
    526c:	1f 91       	pop	r17
    526e:	0f 91       	pop	r16
    5270:	ff 90       	pop	r15
    5272:	ef 90       	pop	r14
    5274:	df 90       	pop	r13
    5276:	cf 90       	pop	r12
    5278:	bf 90       	pop	r11
    527a:	af 90       	pop	r10
    527c:	08 95       	ret

0000527e <rand_r>:
    527e:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <do_rand>
    5282:	08 95       	ret

00005284 <rand>:
    5284:	89 ea       	ldi	r24, 0xA9	; 169
    5286:	91 e0       	ldi	r25, 0x01	; 1
    5288:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <do_rand>
    528c:	08 95       	ret

0000528e <srand>:
    528e:	a0 e0       	ldi	r26, 0x00	; 0
    5290:	b0 e0       	ldi	r27, 0x00	; 0
    5292:	80 93 a9 01 	sts	0x01A9, r24
    5296:	90 93 aa 01 	sts	0x01AA, r25
    529a:	a0 93 ab 01 	sts	0x01AB, r26
    529e:	b0 93 ac 01 	sts	0x01AC, r27
    52a2:	08 95       	ret

000052a4 <strchr_P>:
    52a4:	fc 01       	movw	r30, r24
    52a6:	05 90       	lpm	r0, Z+
    52a8:	06 16       	cp	r0, r22
    52aa:	21 f0       	breq	.+8      	; 0x52b4 <strchr_P+0x10>
    52ac:	00 20       	and	r0, r0
    52ae:	d9 f7       	brne	.-10     	; 0x52a6 <strchr_P+0x2>
    52b0:	c0 01       	movw	r24, r0
    52b2:	08 95       	ret
    52b4:	31 97       	sbiw	r30, 0x01	; 1
    52b6:	cf 01       	movw	r24, r30
    52b8:	08 95       	ret

000052ba <fdevopen>:
    52ba:	0f 93       	push	r16
    52bc:	1f 93       	push	r17
    52be:	cf 93       	push	r28
    52c0:	df 93       	push	r29
    52c2:	ec 01       	movw	r28, r24
    52c4:	8b 01       	movw	r16, r22
    52c6:	00 97       	sbiw	r24, 0x00	; 0
    52c8:	31 f4       	brne	.+12     	; 0x52d6 <fdevopen+0x1c>
    52ca:	61 15       	cp	r22, r1
    52cc:	71 05       	cpc	r23, r1
    52ce:	19 f4       	brne	.+6      	; 0x52d6 <fdevopen+0x1c>
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	38 c0       	rjmp	.+112    	; 0x5346 <fdevopen+0x8c>
    52d6:	81 e0       	ldi	r24, 0x01	; 1
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	6e e0       	ldi	r22, 0x0E	; 14
    52dc:	70 e0       	ldi	r23, 0x00	; 0
    52de:	0e 94 c5 2a 	call	0x558a	; 0x558a <calloc>
    52e2:	fc 01       	movw	r30, r24
    52e4:	9c 01       	movw	r18, r24
    52e6:	00 97       	sbiw	r24, 0x00	; 0
    52e8:	71 f1       	breq	.+92     	; 0x5346 <fdevopen+0x8c>
    52ea:	80 e8       	ldi	r24, 0x80	; 128
    52ec:	83 83       	std	Z+3, r24	; 0x03
    52ee:	01 15       	cp	r16, r1
    52f0:	11 05       	cpc	r17, r1
    52f2:	71 f0       	breq	.+28     	; 0x5310 <fdevopen+0x56>
    52f4:	13 87       	std	Z+11, r17	; 0x0b
    52f6:	02 87       	std	Z+10, r16	; 0x0a
    52f8:	81 e8       	ldi	r24, 0x81	; 129
    52fa:	83 83       	std	Z+3, r24	; 0x03
    52fc:	80 91 50 05 	lds	r24, 0x0550
    5300:	90 91 51 05 	lds	r25, 0x0551
    5304:	00 97       	sbiw	r24, 0x00	; 0
    5306:	21 f4       	brne	.+8      	; 0x5310 <fdevopen+0x56>
    5308:	f0 93 51 05 	sts	0x0551, r31
    530c:	e0 93 50 05 	sts	0x0550, r30
    5310:	20 97       	sbiw	r28, 0x00	; 0
    5312:	c9 f0       	breq	.+50     	; 0x5346 <fdevopen+0x8c>
    5314:	d1 87       	std	Z+9, r29	; 0x09
    5316:	c0 87       	std	Z+8, r28	; 0x08
    5318:	83 81       	ldd	r24, Z+3	; 0x03
    531a:	82 60       	ori	r24, 0x02	; 2
    531c:	83 83       	std	Z+3, r24	; 0x03
    531e:	80 91 52 05 	lds	r24, 0x0552
    5322:	90 91 53 05 	lds	r25, 0x0553
    5326:	00 97       	sbiw	r24, 0x00	; 0
    5328:	71 f4       	brne	.+28     	; 0x5346 <fdevopen+0x8c>
    532a:	f0 93 53 05 	sts	0x0553, r31
    532e:	e0 93 52 05 	sts	0x0552, r30
    5332:	80 91 54 05 	lds	r24, 0x0554
    5336:	90 91 55 05 	lds	r25, 0x0555
    533a:	00 97       	sbiw	r24, 0x00	; 0
    533c:	21 f4       	brne	.+8      	; 0x5346 <fdevopen+0x8c>
    533e:	f0 93 55 05 	sts	0x0555, r31
    5342:	e0 93 54 05 	sts	0x0554, r30
    5346:	c9 01       	movw	r24, r18
    5348:	df 91       	pop	r29
    534a:	cf 91       	pop	r28
    534c:	1f 91       	pop	r17
    534e:	0f 91       	pop	r16
    5350:	08 95       	ret

00005352 <fputc>:
    5352:	0f 93       	push	r16
    5354:	1f 93       	push	r17
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
    535a:	8c 01       	movw	r16, r24
    535c:	eb 01       	movw	r28, r22
    535e:	8b 81       	ldd	r24, Y+3	; 0x03
    5360:	81 ff       	sbrs	r24, 1
    5362:	1b c0       	rjmp	.+54     	; 0x539a <fputc+0x48>
    5364:	82 ff       	sbrs	r24, 2
    5366:	0d c0       	rjmp	.+26     	; 0x5382 <fputc+0x30>
    5368:	2e 81       	ldd	r18, Y+6	; 0x06
    536a:	3f 81       	ldd	r19, Y+7	; 0x07
    536c:	8c 81       	ldd	r24, Y+4	; 0x04
    536e:	9d 81       	ldd	r25, Y+5	; 0x05
    5370:	28 17       	cp	r18, r24
    5372:	39 07       	cpc	r19, r25
    5374:	64 f4       	brge	.+24     	; 0x538e <fputc+0x3c>
    5376:	e8 81       	ld	r30, Y
    5378:	f9 81       	ldd	r31, Y+1	; 0x01
    537a:	01 93       	st	Z+, r16
    537c:	f9 83       	std	Y+1, r31	; 0x01
    537e:	e8 83       	st	Y, r30
    5380:	06 c0       	rjmp	.+12     	; 0x538e <fputc+0x3c>
    5382:	e8 85       	ldd	r30, Y+8	; 0x08
    5384:	f9 85       	ldd	r31, Y+9	; 0x09
    5386:	80 2f       	mov	r24, r16
    5388:	09 95       	icall
    538a:	00 97       	sbiw	r24, 0x00	; 0
    538c:	31 f4       	brne	.+12     	; 0x539a <fputc+0x48>
    538e:	8e 81       	ldd	r24, Y+6	; 0x06
    5390:	9f 81       	ldd	r25, Y+7	; 0x07
    5392:	01 96       	adiw	r24, 0x01	; 1
    5394:	9f 83       	std	Y+7, r25	; 0x07
    5396:	8e 83       	std	Y+6, r24	; 0x06
    5398:	02 c0       	rjmp	.+4      	; 0x539e <fputc+0x4c>
    539a:	0f ef       	ldi	r16, 0xFF	; 255
    539c:	1f ef       	ldi	r17, 0xFF	; 255
    539e:	c8 01       	movw	r24, r16
    53a0:	df 91       	pop	r29
    53a2:	cf 91       	pop	r28
    53a4:	1f 91       	pop	r17
    53a6:	0f 91       	pop	r16
    53a8:	08 95       	ret

000053aa <printf>:
    53aa:	df 93       	push	r29
    53ac:	cf 93       	push	r28
    53ae:	cd b7       	in	r28, 0x3d	; 61
    53b0:	de b7       	in	r29, 0x3e	; 62
    53b2:	fe 01       	movw	r30, r28
    53b4:	35 96       	adiw	r30, 0x05	; 5
    53b6:	61 91       	ld	r22, Z+
    53b8:	71 91       	ld	r23, Z+
    53ba:	80 91 52 05 	lds	r24, 0x0552
    53be:	90 91 53 05 	lds	r25, 0x0553
    53c2:	af 01       	movw	r20, r30
    53c4:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <vfprintf>
    53c8:	cf 91       	pop	r28
    53ca:	df 91       	pop	r29
    53cc:	08 95       	ret

000053ce <puts>:
    53ce:	ef 92       	push	r14
    53d0:	ff 92       	push	r15
    53d2:	0f 93       	push	r16
    53d4:	1f 93       	push	r17
    53d6:	cf 93       	push	r28
    53d8:	df 93       	push	r29
    53da:	8c 01       	movw	r16, r24
    53dc:	e0 91 52 05 	lds	r30, 0x0552
    53e0:	f0 91 53 05 	lds	r31, 0x0553
    53e4:	83 81       	ldd	r24, Z+3	; 0x03
    53e6:	81 ff       	sbrs	r24, 1
    53e8:	23 c0       	rjmp	.+70     	; 0x5430 <puts+0x62>
    53ea:	c0 e0       	ldi	r28, 0x00	; 0
    53ec:	d0 e0       	ldi	r29, 0x00	; 0
    53ee:	0e c0       	rjmp	.+28     	; 0x540c <puts+0x3e>
    53f0:	60 91 52 05 	lds	r22, 0x0552
    53f4:	70 91 53 05 	lds	r23, 0x0553
    53f8:	db 01       	movw	r26, r22
    53fa:	18 96       	adiw	r26, 0x08	; 8
    53fc:	ed 91       	ld	r30, X+
    53fe:	fc 91       	ld	r31, X
    5400:	19 97       	sbiw	r26, 0x09	; 9
    5402:	09 95       	icall
    5404:	00 97       	sbiw	r24, 0x00	; 0
    5406:	11 f0       	breq	.+4      	; 0x540c <puts+0x3e>
    5408:	cf ef       	ldi	r28, 0xFF	; 255
    540a:	df ef       	ldi	r29, 0xFF	; 255
    540c:	f8 01       	movw	r30, r16
    540e:	81 91       	ld	r24, Z+
    5410:	8f 01       	movw	r16, r30
    5412:	88 23       	and	r24, r24
    5414:	69 f7       	brne	.-38     	; 0x53f0 <puts+0x22>
    5416:	60 91 52 05 	lds	r22, 0x0552
    541a:	70 91 53 05 	lds	r23, 0x0553
    541e:	db 01       	movw	r26, r22
    5420:	18 96       	adiw	r26, 0x08	; 8
    5422:	ed 91       	ld	r30, X+
    5424:	fc 91       	ld	r31, X
    5426:	19 97       	sbiw	r26, 0x09	; 9
    5428:	8a e0       	ldi	r24, 0x0A	; 10
    542a:	09 95       	icall
    542c:	00 97       	sbiw	r24, 0x00	; 0
    542e:	11 f0       	breq	.+4      	; 0x5434 <puts+0x66>
    5430:	cf ef       	ldi	r28, 0xFF	; 255
    5432:	df ef       	ldi	r29, 0xFF	; 255
    5434:	ce 01       	movw	r24, r28
    5436:	df 91       	pop	r29
    5438:	cf 91       	pop	r28
    543a:	1f 91       	pop	r17
    543c:	0f 91       	pop	r16
    543e:	ff 90       	pop	r15
    5440:	ef 90       	pop	r14
    5442:	08 95       	ret

00005444 <sprintf>:
    5444:	0f 93       	push	r16
    5446:	1f 93       	push	r17
    5448:	df 93       	push	r29
    544a:	cf 93       	push	r28
    544c:	cd b7       	in	r28, 0x3d	; 61
    544e:	de b7       	in	r29, 0x3e	; 62
    5450:	2e 97       	sbiw	r28, 0x0e	; 14
    5452:	0f b6       	in	r0, 0x3f	; 63
    5454:	f8 94       	cli
    5456:	de bf       	out	0x3e, r29	; 62
    5458:	0f be       	out	0x3f, r0	; 63
    545a:	cd bf       	out	0x3d, r28	; 61
    545c:	0d 89       	ldd	r16, Y+21	; 0x15
    545e:	1e 89       	ldd	r17, Y+22	; 0x16
    5460:	86 e0       	ldi	r24, 0x06	; 6
    5462:	8c 83       	std	Y+4, r24	; 0x04
    5464:	1a 83       	std	Y+2, r17	; 0x02
    5466:	09 83       	std	Y+1, r16	; 0x01
    5468:	8f ef       	ldi	r24, 0xFF	; 255
    546a:	9f e7       	ldi	r25, 0x7F	; 127
    546c:	9e 83       	std	Y+6, r25	; 0x06
    546e:	8d 83       	std	Y+5, r24	; 0x05
    5470:	9e 01       	movw	r18, r28
    5472:	27 5e       	subi	r18, 0xE7	; 231
    5474:	3f 4f       	sbci	r19, 0xFF	; 255
    5476:	ce 01       	movw	r24, r28
    5478:	01 96       	adiw	r24, 0x01	; 1
    547a:	6f 89       	ldd	r22, Y+23	; 0x17
    547c:	78 8d       	ldd	r23, Y+24	; 0x18
    547e:	a9 01       	movw	r20, r18
    5480:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <vfprintf>
    5484:	ef 81       	ldd	r30, Y+7	; 0x07
    5486:	f8 85       	ldd	r31, Y+8	; 0x08
    5488:	e0 0f       	add	r30, r16
    548a:	f1 1f       	adc	r31, r17
    548c:	10 82       	st	Z, r1
    548e:	2e 96       	adiw	r28, 0x0e	; 14
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	f8 94       	cli
    5494:	de bf       	out	0x3e, r29	; 62
    5496:	0f be       	out	0x3f, r0	; 63
    5498:	cd bf       	out	0x3d, r28	; 61
    549a:	cf 91       	pop	r28
    549c:	df 91       	pop	r29
    549e:	1f 91       	pop	r17
    54a0:	0f 91       	pop	r16
    54a2:	08 95       	ret

000054a4 <__ultoa_invert>:
    54a4:	fa 01       	movw	r30, r20
    54a6:	aa 27       	eor	r26, r26
    54a8:	28 30       	cpi	r18, 0x08	; 8
    54aa:	51 f1       	breq	.+84     	; 0x5500 <__ultoa_invert+0x5c>
    54ac:	20 31       	cpi	r18, 0x10	; 16
    54ae:	81 f1       	breq	.+96     	; 0x5510 <__ultoa_invert+0x6c>
    54b0:	e8 94       	clt
    54b2:	6f 93       	push	r22
    54b4:	6e 7f       	andi	r22, 0xFE	; 254
    54b6:	6e 5f       	subi	r22, 0xFE	; 254
    54b8:	7f 4f       	sbci	r23, 0xFF	; 255
    54ba:	8f 4f       	sbci	r24, 0xFF	; 255
    54bc:	9f 4f       	sbci	r25, 0xFF	; 255
    54be:	af 4f       	sbci	r26, 0xFF	; 255
    54c0:	b1 e0       	ldi	r27, 0x01	; 1
    54c2:	3e d0       	rcall	.+124    	; 0x5540 <__ultoa_invert+0x9c>
    54c4:	b4 e0       	ldi	r27, 0x04	; 4
    54c6:	3c d0       	rcall	.+120    	; 0x5540 <__ultoa_invert+0x9c>
    54c8:	67 0f       	add	r22, r23
    54ca:	78 1f       	adc	r23, r24
    54cc:	89 1f       	adc	r24, r25
    54ce:	9a 1f       	adc	r25, r26
    54d0:	a1 1d       	adc	r26, r1
    54d2:	68 0f       	add	r22, r24
    54d4:	79 1f       	adc	r23, r25
    54d6:	8a 1f       	adc	r24, r26
    54d8:	91 1d       	adc	r25, r1
    54da:	a1 1d       	adc	r26, r1
    54dc:	6a 0f       	add	r22, r26
    54de:	71 1d       	adc	r23, r1
    54e0:	81 1d       	adc	r24, r1
    54e2:	91 1d       	adc	r25, r1
    54e4:	a1 1d       	adc	r26, r1
    54e6:	20 d0       	rcall	.+64     	; 0x5528 <__ultoa_invert+0x84>
    54e8:	09 f4       	brne	.+2      	; 0x54ec <__ultoa_invert+0x48>
    54ea:	68 94       	set
    54ec:	3f 91       	pop	r19
    54ee:	2a e0       	ldi	r18, 0x0A	; 10
    54f0:	26 9f       	mul	r18, r22
    54f2:	11 24       	eor	r1, r1
    54f4:	30 19       	sub	r19, r0
    54f6:	30 5d       	subi	r19, 0xD0	; 208
    54f8:	31 93       	st	Z+, r19
    54fa:	de f6       	brtc	.-74     	; 0x54b2 <__ultoa_invert+0xe>
    54fc:	cf 01       	movw	r24, r30
    54fe:	08 95       	ret
    5500:	46 2f       	mov	r20, r22
    5502:	47 70       	andi	r20, 0x07	; 7
    5504:	40 5d       	subi	r20, 0xD0	; 208
    5506:	41 93       	st	Z+, r20
    5508:	b3 e0       	ldi	r27, 0x03	; 3
    550a:	0f d0       	rcall	.+30     	; 0x552a <__ultoa_invert+0x86>
    550c:	c9 f7       	brne	.-14     	; 0x5500 <__ultoa_invert+0x5c>
    550e:	f6 cf       	rjmp	.-20     	; 0x54fc <__ultoa_invert+0x58>
    5510:	46 2f       	mov	r20, r22
    5512:	4f 70       	andi	r20, 0x0F	; 15
    5514:	40 5d       	subi	r20, 0xD0	; 208
    5516:	4a 33       	cpi	r20, 0x3A	; 58
    5518:	18 f0       	brcs	.+6      	; 0x5520 <__ultoa_invert+0x7c>
    551a:	49 5d       	subi	r20, 0xD9	; 217
    551c:	31 fd       	sbrc	r19, 1
    551e:	40 52       	subi	r20, 0x20	; 32
    5520:	41 93       	st	Z+, r20
    5522:	02 d0       	rcall	.+4      	; 0x5528 <__ultoa_invert+0x84>
    5524:	a9 f7       	brne	.-22     	; 0x5510 <__ultoa_invert+0x6c>
    5526:	ea cf       	rjmp	.-44     	; 0x54fc <__ultoa_invert+0x58>
    5528:	b4 e0       	ldi	r27, 0x04	; 4
    552a:	a6 95       	lsr	r26
    552c:	97 95       	ror	r25
    552e:	87 95       	ror	r24
    5530:	77 95       	ror	r23
    5532:	67 95       	ror	r22
    5534:	ba 95       	dec	r27
    5536:	c9 f7       	brne	.-14     	; 0x552a <__ultoa_invert+0x86>
    5538:	00 97       	sbiw	r24, 0x00	; 0
    553a:	61 05       	cpc	r22, r1
    553c:	71 05       	cpc	r23, r1
    553e:	08 95       	ret
    5540:	9b 01       	movw	r18, r22
    5542:	ac 01       	movw	r20, r24
    5544:	0a 2e       	mov	r0, r26
    5546:	06 94       	lsr	r0
    5548:	57 95       	ror	r21
    554a:	47 95       	ror	r20
    554c:	37 95       	ror	r19
    554e:	27 95       	ror	r18
    5550:	ba 95       	dec	r27
    5552:	c9 f7       	brne	.-14     	; 0x5546 <__ultoa_invert+0xa2>
    5554:	62 0f       	add	r22, r18
    5556:	73 1f       	adc	r23, r19
    5558:	84 1f       	adc	r24, r20
    555a:	95 1f       	adc	r25, r21
    555c:	a0 1d       	adc	r26, r0
    555e:	08 95       	ret

00005560 <__eerd_byte_m128>:
    5560:	e1 99       	sbic	0x1c, 1	; 28
    5562:	fe cf       	rjmp	.-4      	; 0x5560 <__eerd_byte_m128>
    5564:	9f bb       	out	0x1f, r25	; 31
    5566:	8e bb       	out	0x1e, r24	; 30
    5568:	e0 9a       	sbi	0x1c, 0	; 28
    556a:	99 27       	eor	r25, r25
    556c:	8d b3       	in	r24, 0x1d	; 29
    556e:	08 95       	ret

00005570 <__eewr_byte_m128>:
    5570:	26 2f       	mov	r18, r22

00005572 <__eewr_r18_m128>:
    5572:	e1 99       	sbic	0x1c, 1	; 28
    5574:	fe cf       	rjmp	.-4      	; 0x5572 <__eewr_r18_m128>
    5576:	9f bb       	out	0x1f, r25	; 31
    5578:	8e bb       	out	0x1e, r24	; 30
    557a:	2d bb       	out	0x1d, r18	; 29
    557c:	0f b6       	in	r0, 0x3f	; 63
    557e:	f8 94       	cli
    5580:	e2 9a       	sbi	0x1c, 2	; 28
    5582:	e1 9a       	sbi	0x1c, 1	; 28
    5584:	0f be       	out	0x3f, r0	; 63
    5586:	01 96       	adiw	r24, 0x01	; 1
    5588:	08 95       	ret

0000558a <calloc>:
    558a:	ef 92       	push	r14
    558c:	ff 92       	push	r15
    558e:	0f 93       	push	r16
    5590:	1f 93       	push	r17
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	68 9f       	mul	r22, r24
    5598:	80 01       	movw	r16, r0
    559a:	69 9f       	mul	r22, r25
    559c:	10 0d       	add	r17, r0
    559e:	78 9f       	mul	r23, r24
    55a0:	10 0d       	add	r17, r0
    55a2:	11 24       	eor	r1, r1
    55a4:	c8 01       	movw	r24, r16
    55a6:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <malloc>
    55aa:	e8 2e       	mov	r14, r24
    55ac:	e7 01       	movw	r28, r14
    55ae:	7e 01       	movw	r14, r28
    55b0:	f9 2e       	mov	r15, r25
    55b2:	e7 01       	movw	r28, r14
    55b4:	e1 14       	cp	r14, r1
    55b6:	f1 04       	cpc	r15, r1
    55b8:	31 f0       	breq	.+12     	; 0x55c6 <calloc+0x3c>
    55ba:	8e 2d       	mov	r24, r14
    55bc:	60 e0       	ldi	r22, 0x00	; 0
    55be:	70 e0       	ldi	r23, 0x00	; 0
    55c0:	a8 01       	movw	r20, r16
    55c2:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <memset>
    55c6:	ce 01       	movw	r24, r28
    55c8:	df 91       	pop	r29
    55ca:	cf 91       	pop	r28
    55cc:	1f 91       	pop	r17
    55ce:	0f 91       	pop	r16
    55d0:	ff 90       	pop	r15
    55d2:	ef 90       	pop	r14
    55d4:	08 95       	ret

000055d6 <malloc>:
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
    55da:	82 30       	cpi	r24, 0x02	; 2
    55dc:	91 05       	cpc	r25, r1
    55de:	10 f4       	brcc	.+4      	; 0x55e4 <malloc+0xe>
    55e0:	82 e0       	ldi	r24, 0x02	; 2
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	a0 91 58 05 	lds	r26, 0x0558
    55e8:	b0 91 59 05 	lds	r27, 0x0559
    55ec:	fd 01       	movw	r30, r26
    55ee:	20 e0       	ldi	r18, 0x00	; 0
    55f0:	30 e0       	ldi	r19, 0x00	; 0
    55f2:	c0 e0       	ldi	r28, 0x00	; 0
    55f4:	d0 e0       	ldi	r29, 0x00	; 0
    55f6:	20 c0       	rjmp	.+64     	; 0x5638 <malloc+0x62>
    55f8:	40 81       	ld	r20, Z
    55fa:	51 81       	ldd	r21, Z+1	; 0x01
    55fc:	48 17       	cp	r20, r24
    55fe:	59 07       	cpc	r21, r25
    5600:	61 f4       	brne	.+24     	; 0x561a <malloc+0x44>
    5602:	82 81       	ldd	r24, Z+2	; 0x02
    5604:	93 81       	ldd	r25, Z+3	; 0x03
    5606:	20 97       	sbiw	r28, 0x00	; 0
    5608:	19 f0       	breq	.+6      	; 0x5610 <malloc+0x3a>
    560a:	9b 83       	std	Y+3, r25	; 0x03
    560c:	8a 83       	std	Y+2, r24	; 0x02
    560e:	3a c0       	rjmp	.+116    	; 0x5684 <malloc+0xae>
    5610:	90 93 59 05 	sts	0x0559, r25
    5614:	80 93 58 05 	sts	0x0558, r24
    5618:	35 c0       	rjmp	.+106    	; 0x5684 <malloc+0xae>
    561a:	84 17       	cp	r24, r20
    561c:	95 07       	cpc	r25, r21
    561e:	38 f4       	brcc	.+14     	; 0x562e <malloc+0x58>
    5620:	21 15       	cp	r18, r1
    5622:	31 05       	cpc	r19, r1
    5624:	19 f0       	breq	.+6      	; 0x562c <malloc+0x56>
    5626:	42 17       	cp	r20, r18
    5628:	53 07       	cpc	r21, r19
    562a:	08 f4       	brcc	.+2      	; 0x562e <malloc+0x58>
    562c:	9a 01       	movw	r18, r20
    562e:	ef 01       	movw	r28, r30
    5630:	52 81       	ldd	r21, Z+2	; 0x02
    5632:	43 81       	ldd	r20, Z+3	; 0x03
    5634:	e5 2f       	mov	r30, r21
    5636:	f4 2f       	mov	r31, r20
    5638:	30 97       	sbiw	r30, 0x00	; 0
    563a:	f1 f6       	brne	.-68     	; 0x55f8 <malloc+0x22>
    563c:	21 15       	cp	r18, r1
    563e:	31 05       	cpc	r19, r1
    5640:	b9 f1       	breq	.+110    	; 0x56b0 <malloc+0xda>
    5642:	a9 01       	movw	r20, r18
    5644:	48 1b       	sub	r20, r24
    5646:	59 0b       	sbc	r21, r25
    5648:	44 30       	cpi	r20, 0x04	; 4
    564a:	51 05       	cpc	r21, r1
    564c:	08 f4       	brcc	.+2      	; 0x5650 <malloc+0x7a>
    564e:	c9 01       	movw	r24, r18
    5650:	e0 e0       	ldi	r30, 0x00	; 0
    5652:	f0 e0       	ldi	r31, 0x00	; 0
    5654:	2b c0       	rjmp	.+86     	; 0x56ac <malloc+0xd6>
    5656:	4d 91       	ld	r20, X+
    5658:	5c 91       	ld	r21, X
    565a:	11 97       	sbiw	r26, 0x01	; 1
    565c:	42 17       	cp	r20, r18
    565e:	53 07       	cpc	r21, r19
    5660:	01 f5       	brne	.+64     	; 0x56a2 <malloc+0xcc>
    5662:	82 17       	cp	r24, r18
    5664:	93 07       	cpc	r25, r19
    5666:	81 f4       	brne	.+32     	; 0x5688 <malloc+0xb2>
    5668:	12 96       	adiw	r26, 0x02	; 2
    566a:	8d 91       	ld	r24, X+
    566c:	9c 91       	ld	r25, X
    566e:	13 97       	sbiw	r26, 0x03	; 3
    5670:	30 97       	sbiw	r30, 0x00	; 0
    5672:	19 f0       	breq	.+6      	; 0x567a <malloc+0xa4>
    5674:	93 83       	std	Z+3, r25	; 0x03
    5676:	82 83       	std	Z+2, r24	; 0x02
    5678:	04 c0       	rjmp	.+8      	; 0x5682 <malloc+0xac>
    567a:	90 93 59 05 	sts	0x0559, r25
    567e:	80 93 58 05 	sts	0x0558, r24
    5682:	fd 01       	movw	r30, r26
    5684:	32 96       	adiw	r30, 0x02	; 2
    5686:	4f c0       	rjmp	.+158    	; 0x5726 <malloc+0x150>
    5688:	28 1b       	sub	r18, r24
    568a:	39 0b       	sbc	r19, r25
    568c:	fd 01       	movw	r30, r26
    568e:	e2 0f       	add	r30, r18
    5690:	f3 1f       	adc	r31, r19
    5692:	81 93       	st	Z+, r24
    5694:	91 93       	st	Z+, r25
    5696:	22 50       	subi	r18, 0x02	; 2
    5698:	30 40       	sbci	r19, 0x00	; 0
    569a:	11 96       	adiw	r26, 0x01	; 1
    569c:	3c 93       	st	X, r19
    569e:	2e 93       	st	-X, r18
    56a0:	42 c0       	rjmp	.+132    	; 0x5726 <malloc+0x150>
    56a2:	fd 01       	movw	r30, r26
    56a4:	52 81       	ldd	r21, Z+2	; 0x02
    56a6:	43 81       	ldd	r20, Z+3	; 0x03
    56a8:	a5 2f       	mov	r26, r21
    56aa:	b4 2f       	mov	r27, r20
    56ac:	10 97       	sbiw	r26, 0x00	; 0
    56ae:	99 f6       	brne	.-90     	; 0x5656 <malloc+0x80>
    56b0:	20 91 56 05 	lds	r18, 0x0556
    56b4:	30 91 57 05 	lds	r19, 0x0557
    56b8:	21 15       	cp	r18, r1
    56ba:	31 05       	cpc	r19, r1
    56bc:	41 f4       	brne	.+16     	; 0x56ce <malloc+0xf8>
    56be:	20 91 af 01 	lds	r18, 0x01AF
    56c2:	30 91 b0 01 	lds	r19, 0x01B0
    56c6:	30 93 57 05 	sts	0x0557, r19
    56ca:	20 93 56 05 	sts	0x0556, r18
    56ce:	20 91 b1 01 	lds	r18, 0x01B1
    56d2:	30 91 b2 01 	lds	r19, 0x01B2
    56d6:	21 15       	cp	r18, r1
    56d8:	31 05       	cpc	r19, r1
    56da:	41 f4       	brne	.+16     	; 0x56ec <malloc+0x116>
    56dc:	2d b7       	in	r18, 0x3d	; 61
    56de:	3e b7       	in	r19, 0x3e	; 62
    56e0:	40 91 ad 01 	lds	r20, 0x01AD
    56e4:	50 91 ae 01 	lds	r21, 0x01AE
    56e8:	24 1b       	sub	r18, r20
    56ea:	35 0b       	sbc	r19, r21
    56ec:	e0 91 56 05 	lds	r30, 0x0556
    56f0:	f0 91 57 05 	lds	r31, 0x0557
    56f4:	e2 17       	cp	r30, r18
    56f6:	f3 07       	cpc	r31, r19
    56f8:	a0 f4       	brcc	.+40     	; 0x5722 <malloc+0x14c>
    56fa:	2e 1b       	sub	r18, r30
    56fc:	3f 0b       	sbc	r19, r31
    56fe:	28 17       	cp	r18, r24
    5700:	39 07       	cpc	r19, r25
    5702:	78 f0       	brcs	.+30     	; 0x5722 <malloc+0x14c>
    5704:	ac 01       	movw	r20, r24
    5706:	4e 5f       	subi	r20, 0xFE	; 254
    5708:	5f 4f       	sbci	r21, 0xFF	; 255
    570a:	24 17       	cp	r18, r20
    570c:	35 07       	cpc	r19, r21
    570e:	48 f0       	brcs	.+18     	; 0x5722 <malloc+0x14c>
    5710:	4e 0f       	add	r20, r30
    5712:	5f 1f       	adc	r21, r31
    5714:	50 93 57 05 	sts	0x0557, r21
    5718:	40 93 56 05 	sts	0x0556, r20
    571c:	81 93       	st	Z+, r24
    571e:	91 93       	st	Z+, r25
    5720:	02 c0       	rjmp	.+4      	; 0x5726 <malloc+0x150>
    5722:	e0 e0       	ldi	r30, 0x00	; 0
    5724:	f0 e0       	ldi	r31, 0x00	; 0
    5726:	cf 01       	movw	r24, r30
    5728:	df 91       	pop	r29
    572a:	cf 91       	pop	r28
    572c:	08 95       	ret

0000572e <free>:
    572e:	cf 93       	push	r28
    5730:	df 93       	push	r29
    5732:	00 97       	sbiw	r24, 0x00	; 0
    5734:	09 f4       	brne	.+2      	; 0x5738 <free+0xa>
    5736:	51 c0       	rjmp	.+162    	; 0x57da <free+0xac>
    5738:	fc 01       	movw	r30, r24
    573a:	32 97       	sbiw	r30, 0x02	; 2
    573c:	13 82       	std	Z+3, r1	; 0x03
    573e:	12 82       	std	Z+2, r1	; 0x02
    5740:	a0 91 58 05 	lds	r26, 0x0558
    5744:	b0 91 59 05 	lds	r27, 0x0559
    5748:	10 97       	sbiw	r26, 0x00	; 0
    574a:	51 f1       	breq	.+84     	; 0x57a0 <free+0x72>
    574c:	40 e0       	ldi	r20, 0x00	; 0
    574e:	50 e0       	ldi	r21, 0x00	; 0
    5750:	ae 17       	cp	r26, r30
    5752:	bf 07       	cpc	r27, r31
    5754:	48 f4       	brcc	.+18     	; 0x5768 <free+0x3a>
    5756:	12 96       	adiw	r26, 0x02	; 2
    5758:	8d 91       	ld	r24, X+
    575a:	9c 91       	ld	r25, X
    575c:	13 97       	sbiw	r26, 0x03	; 3
    575e:	ad 01       	movw	r20, r26
    5760:	00 97       	sbiw	r24, 0x00	; 0
    5762:	19 f1       	breq	.+70     	; 0x57aa <free+0x7c>
    5764:	dc 01       	movw	r26, r24
    5766:	f4 cf       	rjmp	.-24     	; 0x5750 <free+0x22>
    5768:	b3 83       	std	Z+3, r27	; 0x03
    576a:	a2 83       	std	Z+2, r26	; 0x02
    576c:	ef 01       	movw	r28, r30
    576e:	29 91       	ld	r18, Y+
    5770:	39 91       	ld	r19, Y+
    5772:	ce 01       	movw	r24, r28
    5774:	82 0f       	add	r24, r18
    5776:	93 1f       	adc	r25, r19
    5778:	a8 17       	cp	r26, r24
    577a:	b9 07       	cpc	r27, r25
    577c:	71 f4       	brne	.+28     	; 0x579a <free+0x6c>
    577e:	8d 91       	ld	r24, X+
    5780:	9c 91       	ld	r25, X
    5782:	11 97       	sbiw	r26, 0x01	; 1
    5784:	82 0f       	add	r24, r18
    5786:	93 1f       	adc	r25, r19
    5788:	02 96       	adiw	r24, 0x02	; 2
    578a:	91 83       	std	Z+1, r25	; 0x01
    578c:	80 83       	st	Z, r24
    578e:	12 96       	adiw	r26, 0x02	; 2
    5790:	8d 91       	ld	r24, X+
    5792:	9c 91       	ld	r25, X
    5794:	13 97       	sbiw	r26, 0x03	; 3
    5796:	93 83       	std	Z+3, r25	; 0x03
    5798:	82 83       	std	Z+2, r24	; 0x02
    579a:	41 15       	cp	r20, r1
    579c:	51 05       	cpc	r21, r1
    579e:	29 f4       	brne	.+10     	; 0x57aa <free+0x7c>
    57a0:	f0 93 59 05 	sts	0x0559, r31
    57a4:	e0 93 58 05 	sts	0x0558, r30
    57a8:	18 c0       	rjmp	.+48     	; 0x57da <free+0xac>
    57aa:	da 01       	movw	r26, r20
    57ac:	13 96       	adiw	r26, 0x03	; 3
    57ae:	fc 93       	st	X, r31
    57b0:	ee 93       	st	-X, r30
    57b2:	12 97       	sbiw	r26, 0x02	; 2
    57b4:	2d 91       	ld	r18, X+
    57b6:	3d 91       	ld	r19, X+
    57b8:	a2 0f       	add	r26, r18
    57ba:	b3 1f       	adc	r27, r19
    57bc:	ea 17       	cp	r30, r26
    57be:	fb 07       	cpc	r31, r27
    57c0:	61 f4       	brne	.+24     	; 0x57da <free+0xac>
    57c2:	80 81       	ld	r24, Z
    57c4:	91 81       	ldd	r25, Z+1	; 0x01
    57c6:	82 0f       	add	r24, r18
    57c8:	93 1f       	adc	r25, r19
    57ca:	02 96       	adiw	r24, 0x02	; 2
    57cc:	ea 01       	movw	r28, r20
    57ce:	99 83       	std	Y+1, r25	; 0x01
    57d0:	88 83       	st	Y, r24
    57d2:	82 81       	ldd	r24, Z+2	; 0x02
    57d4:	93 81       	ldd	r25, Z+3	; 0x03
    57d6:	9b 83       	std	Y+3, r25	; 0x03
    57d8:	8a 83       	std	Y+2, r24	; 0x02
    57da:	df 91       	pop	r29
    57dc:	cf 91       	pop	r28
    57de:	08 95       	ret

000057e0 <memset>:
    57e0:	dc 01       	movw	r26, r24
    57e2:	01 c0       	rjmp	.+2      	; 0x57e6 <memset+0x6>
    57e4:	6d 93       	st	X+, r22
    57e6:	41 50       	subi	r20, 0x01	; 1
    57e8:	50 40       	sbci	r21, 0x00	; 0
    57ea:	e0 f7       	brcc	.-8      	; 0x57e4 <memset+0x4>
    57ec:	08 95       	ret

000057ee <__divmodsi4>:
    57ee:	97 fb       	bst	r25, 7
    57f0:	09 2e       	mov	r0, r25
    57f2:	05 26       	eor	r0, r21
    57f4:	0e d0       	rcall	.+28     	; 0x5812 <__divmodsi4_neg1>
    57f6:	57 fd       	sbrc	r21, 7
    57f8:	04 d0       	rcall	.+8      	; 0x5802 <__divmodsi4_neg2>
    57fa:	c8 dc       	rcall	.-1648   	; 0x518c <__udivmodsi4>
    57fc:	0a d0       	rcall	.+20     	; 0x5812 <__divmodsi4_neg1>
    57fe:	00 1c       	adc	r0, r0
    5800:	38 f4       	brcc	.+14     	; 0x5810 <__divmodsi4_exit>

00005802 <__divmodsi4_neg2>:
    5802:	50 95       	com	r21
    5804:	40 95       	com	r20
    5806:	30 95       	com	r19
    5808:	21 95       	neg	r18
    580a:	3f 4f       	sbci	r19, 0xFF	; 255
    580c:	4f 4f       	sbci	r20, 0xFF	; 255
    580e:	5f 4f       	sbci	r21, 0xFF	; 255

00005810 <__divmodsi4_exit>:
    5810:	08 95       	ret

00005812 <__divmodsi4_neg1>:
    5812:	f6 f7       	brtc	.-4      	; 0x5810 <__divmodsi4_exit>
    5814:	90 95       	com	r25
    5816:	80 95       	com	r24
    5818:	70 95       	com	r23
    581a:	61 95       	neg	r22
    581c:	7f 4f       	sbci	r23, 0xFF	; 255
    581e:	8f 4f       	sbci	r24, 0xFF	; 255
    5820:	9f 4f       	sbci	r25, 0xFF	; 255
    5822:	08 95       	ret

00005824 <_exit>:
    5824:	f8 94       	cli

00005826 <__stop_program>:
    5826:	ff cf       	rjmp	.-2      	; 0x5826 <__stop_program>
